{"version":3,"file":"angular-auth-oidc-client.js.map","sources":["ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","ng://angular-auth-oidc-client/lib/services/platform.provider.ts","ng://angular-auth-oidc-client/lib/services/auth-configuration.provider.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/url-parser.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"sourcesContent":["import { AuthorizationState } from './authorization-state.enum';\nimport { ValidationResult } from './validation-result.enum';\n\nexport class AuthorizationResult {\n    constructor(public authorizationState: AuthorizationState, public validationResult: ValidationResult, public isRenewProcess: boolean = false) {}\n}\n","export enum AuthorizationState {\n    authorized = 'authorized',\n    forbidden = 'forbidden',\n    unauthorized = 'unauthorized',\n}\n","export class JwtKeys {\n    keys: JwtKey[] = [];\n}\n\nexport class JwtKey {\n    kty = '';\n    use = '';\n    kid = '';\n    x5t = '';\n    e = '';\n    n = '';\n    x5c: any[] = [];\n}\n","export enum ValidationResult {\n    NotSet = 'NotSet',\n    StatesDoNotMatch = 'StatesDoNotMatch',\n    SignatureFailed = 'SignatureFailed',\n    IncorrectNonce = 'IncorrectNonce',\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\n    MaxOffsetExpired = 'MaxOffsetExpired',\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n    IncorrectAud = 'IncorrectAud',\n    TokenExpired = 'TokenExpired',\n    IncorrectAtHash = 'IncorrectAtHash',\n    Ok = 'Ok',\n    LoginRequired = 'LoginRequired',\n    SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { ValidationResult } from './validation-result.enum';\n\n// tslint:disable: variable-name\nexport class ValidateStateResult {\n    constructor(\n        public access_token = '',\n        public id_token = '',\n        public authResponseIsValid = false,\n        public decoded_id_token: any = {},\n        public state: ValidationResult = ValidationResult.NotSet\n    ) {}\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class OidcDataService {\n    constructor(private httpClient: HttpClient) {}\n\n    getWellknownEndpoints<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n\n    get<T>(url: string): Observable<T> {\n        let headers = new HttpHeaders();\n        headers = headers.set('Accept', 'application/json');\n\n        return this.httpClient.get<T>(url, {\n            headers,\n        });\n    }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class PlatformProvider {\n    get isBrowser() {\n        return isPlatformBrowser(this.platformId);\n    }\n\n    // tslint:disable-next-line: ban-types\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { OpenIdConfiguration, OpenIdInternalConfiguration } from '../models/auth.configuration';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { PlatformProvider } from './platform.provider';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurationProvider {\n    private DEFAULT_CONFIG: OpenIdInternalConfiguration = {\n        stsServer: 'https://please_set',\n        redirect_url: 'https://please_set',\n        client_id: 'please_set',\n        response_type: 'code',\n        scope: 'openid email profile',\n        hd_param: '',\n        post_logout_redirect_uri: 'https://please_set',\n        start_checksession: false,\n        silent_renew: false,\n        silent_renew_url: 'https://please_set',\n        silent_renew_offset_in_seconds: 0,\n        use_refresh_token: false,\n        ignore_nonce_after_refresh: false,\n        post_login_route: '/',\n        forbidden_route: '/forbidden',\n        unauthorized_route: '/unauthorized',\n        auto_userinfo: true,\n        auto_clean_state_after_authentication: true,\n        trigger_authorization_result_event: false,\n        log_console_warning_active: true,\n        log_console_debug_active: false,\n        iss_validation_off: false,\n        history_cleanup_off: false,\n        max_id_token_iat_offset_allowed_in_seconds: 3,\n        isauthorizedrace_timeout_in_seconds: 5,\n        disable_iat_offset_validation: false,\n        storage: typeof Storage !== 'undefined' ? sessionStorage : null,\n    };\n\n    private INITIAL_AUTHWELLKNOWN: AuthWellKnownEndpoints = {\n        issuer: '',\n        jwks_uri: '',\n        authorization_endpoint: '',\n        token_endpoint: '',\n        userinfo_endpoint: '',\n        end_session_endpoint: '',\n        check_session_iframe: '',\n        revocation_endpoint: '',\n        introspection_endpoint: '',\n    };\n\n    private mergedOpenIdConfiguration: OpenIdInternalConfiguration = this.DEFAULT_CONFIG;\n    private authWellKnownEndpoints: AuthWellKnownEndpoints = this.INITIAL_AUTHWELLKNOWN;\n\n    private onConfigurationChangeInternal = new Subject<OpenIdConfiguration>();\n\n    get openIDConfiguration(): OpenIdInternalConfiguration {\n        return this.mergedOpenIdConfiguration;\n    }\n\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\n        return this.authWellKnownEndpoints;\n    }\n\n    get onConfigurationChange() {\n        return this.onConfigurationChangeInternal.asObservable();\n    }\n\n    constructor(private platformProvider: PlatformProvider) {}\n\n    setup(\n        passedOpenIfConfiguration: OpenIdConfiguration | null | undefined,\n        passedAuthWellKnownEndpoints: AuthWellKnownEndpoints | null | undefined\n    ) {\n        this.mergedOpenIdConfiguration = { ...this.mergedOpenIdConfiguration, ...passedOpenIfConfiguration };\n        this.setSpecialCases(this.mergedOpenIdConfiguration);\n        this.authWellKnownEndpoints = { ...passedAuthWellKnownEndpoints };\n        this.onConfigurationChangeInternal.next({ ...this.mergedOpenIdConfiguration });\n    }\n\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\n        if (!this.platformProvider.isBrowser) {\n            currentConfig.start_checksession = false;\n            currentConfig.silent_renew = false;\n            currentConfig.use_refresh_token = false;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from './auth-configuration.provider';\n\n@Injectable()\nexport class LoggerService {\n    constructor(private configurationProvider: ConfigurationProvider) {}\n\n    logError(message: any, ...args: any[]) {\n        console.error(message, ...args);\n    }\n\n    logWarning(message: any) {\n        if (this.configurationProvider.openIDConfiguration.log_console_warning_active) {\n            console.warn(message);\n        }\n    }\n\n    logDebug(message: any) {\n        if (this.configurationProvider.openIDConfiguration.log_console_debug_active) {\n            console.log(message);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class IFrameService {\n    constructor(private loggerService: LoggerService) {}\n\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n        if (this.isIFrameElement(iFrameOnParent)) {\n            return iFrameOnParent;\n        }\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n        if (this.isIFrameElement(iFrameOnSelf)) {\n            return iFrameOnSelf;\n        }\n        return null;\n    }\n\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n        const sessionIframe = window.document.createElement('iframe');\n        sessionIframe.id = identifier;\n        this.loggerService.logDebug(sessionIframe);\n        sessionIframe.style.display = 'none';\n        window.document.body.appendChild(sessionIframe);\n        return sessionIframe;\n    }\n\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n        try {\n            const iFrameElement = window.parent.document.getElementById(identifier);\n            if (this.isIFrameElement(iFrameElement)) {\n                return iFrameElement;\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n        const iFrameElement = window.document.getElementById(identifier);\n        if (this.isIFrameElement(iFrameElement)) {\n            return iFrameElement;\n        }\n        return null;\n    }\n\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n        return !!element && element instanceof HTMLIFrameElement;\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityHelperService {\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\n        if (!value1 || !value2) {\n            return false;\n        }\n\n        if (this.bothValuesAreArrays(value1, value2)) {\n            return this.arraysEqual(value1 as any[], value2 as any[]);\n        }\n\n        if (this.bothValuesAreStrings(value1, value2)) {\n            return value1 === value2;\n        }\n\n        if (this.bothValuesAreObjects(value1, value2)) {\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n        }\n\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\n                return value1[0] === value2;\n            }\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\n                return value2[0] === value1;\n            }\n        }\n    }\n\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n    }\n\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\n    }\n\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\n        return this.valueIsString(value1) && this.valueIsString(value2);\n    }\n\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\n        return Array.isArray(value1) && Array.isArray(value2);\n    }\n\n    private valueIsString(value: any) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    private valueIsObject(value: any) {\n        return typeof value === 'object';\n    }\n\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n\n        for (let i = arr1.length; i--; ) {\n            if (arr1[i] !== arr2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from './oidc.logger.service';\n\n@Injectable()\nexport class TokenHelperService {\n    private PARTS_OF_TOKEN = 3;\n    constructor(private readonly loggerService: LoggerService) {}\n\n    getTokenExpirationDate(dataIdToken: any): Date {\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            return new Date();\n        }\n\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        date.setUTCSeconds(dataIdToken.exp);\n\n        return date;\n    }\n\n    getHeaderFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 0, encoded);\n    }\n\n    getPayloadFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 1, encoded);\n    }\n\n    getSignatureFromToken(token: any, encoded: boolean) {\n        if (!this.tokenIsValid(token)) {\n            return {};\n        }\n\n        return this.getPartOfToken(token, 2, encoded);\n    }\n\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\n        const partOfToken = this.extractPartOfToken(token, index);\n\n        if (encoded) {\n            return partOfToken;\n        }\n\n        const result = this.urlBase64Decode(partOfToken);\n        return JSON.parse(result);\n    }\n\n    private urlBase64Decode(str: string) {\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n        switch (output.length % 4) {\n            case 0:\n                break;\n            case 2:\n                output += '==';\n                break;\n            case 3:\n                output += '=';\n                break;\n            default:\n                throw Error('Illegal base64url string!');\n        }\n\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\n\n        try {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            return decodeURIComponent(\n                decoded\n                    .split('')\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n                    .join('')\n            );\n        } catch (err) {\n            return decoded;\n        }\n    }\n\n    private tokenIsValid(token: string) {\n        if (!token) {\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n            return false;\n        }\n\n        if (!(token as string).includes('.')) {\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n            return false;\n        }\n\n        const parts = token.split('.');\n\n        if (parts.length !== this.PARTS_OF_TOKEN) {\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\n            return false;\n        }\n\n        return true;\n    }\n\n    private extractPartOfToken(token: string, index: number) {\n        return token.split('.')[index];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from './auth-configuration.provider';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class OidcSecurityStorage {\n    /**\n     * This method must contain the logic to read the storage.\n     * @return The value of the given key\n     */\n    public abstract read(key: string): any;\n\n    /**\n     * This method must contain the logic to write the storage.\n     * @param value The value for the given key\n     */\n    public abstract write(key: string, value: any): void;\n}\n\n@Injectable()\nexport class BrowserStorage implements OidcSecurityStorage {\n    private hasStorage: boolean;\n\n    constructor(private configProvider: ConfigurationProvider) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n\n    public read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.configProvider.openIDConfiguration.storage.getItem(key + '_' + this.configProvider.openIDConfiguration.client_id));\n        }\n\n        return;\n    }\n\n    public write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.configProvider.openIDConfiguration.storage.setItem(\n                key + '_' + this.configProvider.openIDConfiguration.client_id,\n                JSON.stringify(value)\n            );\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { OidcSecurityStorage } from './oidc.security.storage';\n\nexport type SilentRenewState = 'running' | '';\n\n@Injectable()\nexport class OidcSecurityCommon {\n    private storageAuthResult = 'authorizationResult';\n\n    public get authResult(): any {\n        return this.retrieve(this.storageAuthResult);\n    }\n\n    public set authResult(value: any) {\n        this.store(this.storageAuthResult, value);\n    }\n\n    private storageAccessToken = 'authorizationData';\n\n    public get accessToken(): string {\n        return this.retrieve(this.storageAccessToken) || '';\n    }\n\n    public set accessToken(value: string) {\n        this.store(this.storageAccessToken, value);\n    }\n\n    private storageIdToken = 'authorizationDataIdToken';\n\n    public get idToken(): string {\n        return this.retrieve(this.storageIdToken) || '';\n    }\n\n    public set idToken(value: string) {\n        this.store(this.storageIdToken, value);\n    }\n\n    private storageIsAuthorized = '_isAuthorized';\n\n    public get isAuthorized(): boolean | undefined {\n        return this.retrieve(this.storageIsAuthorized);\n    }\n\n    public set isAuthorized(value: boolean | undefined) {\n        this.store(this.storageIsAuthorized, value);\n    }\n\n    private storageUserData = 'userData';\n\n    public get userData(): any {\n        return this.retrieve(this.storageUserData);\n    }\n\n    public set userData(value: any) {\n        this.store(this.storageUserData, value);\n    }\n\n    private storageAuthNonce = 'authNonce';\n\n    public get authNonce(): string {\n        return this.retrieve(this.storageAuthNonce) || '';\n    }\n\n    public set authNonce(value: string) {\n        this.store(this.storageAuthNonce, value);\n    }\n\n    private storageCodeVerifier = 'code_verifier';\n\n    public get code_verifier(): string {\n        return this.retrieve(this.storageCodeVerifier) || '';\n    }\n\n    public set code_verifier(value: string) {\n        this.store(this.storageCodeVerifier, value);\n    }\n\n    private storageAuthStateControl = 'authStateControl';\n\n    public get authStateControl(): string {\n        return this.retrieve(this.storageAuthStateControl) || '';\n    }\n\n    public set authStateControl(value: string) {\n        this.store(this.storageAuthStateControl, value);\n    }\n\n    private storageSessionState = 'session_state';\n\n    public get sessionState(): any {\n        return this.retrieve(this.storageSessionState);\n    }\n\n    public set sessionState(value: any) {\n        this.store(this.storageSessionState, value);\n    }\n\n    private storageSilentRenewRunning = 'storage_silent_renew_running';\n\n    public get silentRenewRunning(): SilentRenewState {\n        return this.retrieve(this.storageSilentRenewRunning) || '';\n    }\n\n    public set silentRenewRunning(value: SilentRenewState) {\n        this.store(this.storageSilentRenewRunning, value);\n    }\n\n    private storageCustomRequestParams = 'storage_custom_request_params';\n\n    public get customRequestParams(): {\n        [key: string]: string | number | boolean;\n    } {\n        return this.retrieve(this.storageCustomRequestParams);\n    }\n\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\n        this.store(this.storageCustomRequestParams, value);\n    }\n\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\n\n    private retrieve(key: string): any {\n        return this.oidcSecurityStorage.read(key);\n    }\n\n    private store(key: string, value: any) {\n        this.oidcSecurityStorage.write(key, value);\n    }\n\n    resetStorageData(isRenewProcess: boolean) {\n        if (!isRenewProcess) {\n            this.store(this.storageAuthResult, '');\n            this.store(this.storageSessionState, '');\n            this.store(this.storageSilentRenewRunning, '');\n            this.store(this.storageIsAuthorized, false);\n            this.store(this.storageAccessToken, '');\n            this.store(this.storageIdToken, '');\n            this.store(this.storageUserData, '');\n            this.store(this.storageCodeVerifier, '');\n        }\n    }\n\n    getAccessToken(): any {\n        return this.retrieve(this.storageAccessToken);\n    }\n\n    getIdToken(): any {\n        return this.retrieve(this.storageIdToken);\n    }\n\n    getRefreshToken(): any {\n        return this.authResult.refresh_token;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { EqualityHelperService } from './oidc-equality-helper.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\n\n@Injectable()\nexport class OidcSecurityValidation {\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\n\n    constructor(\n        private arrayHelperService: EqualityHelperService,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService\n    ) {}\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\n        let decoded: any;\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\n    }\n\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\n    // (possibly allowing for some small leeway to account for clock skew).\n    // tslint:disable-next-line: variable-name\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\n        offsetSeconds = offsetSeconds || 0;\n\n        if (!tokenExpirationDate) {\n            return false;\n        }\n\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\n\n        // Token not expired?\n        return tokenNotExpired;\n    }\n\n    // iss\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n    // https scheme that contains scheme, host,\n    // and optionally, port number and path components and no query or fragment components.\n    //\n    // sub\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n    //\n    // aud\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n    //\n    // exp\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n    //\n    // iat\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n    // 1970- 01 - 01T00: 00: 00Z as measured\n    // in UTC until the date/ time.\n    validate_required_id_token(dataIdToken: any): boolean {\n        let validated = true;\n        if (!dataIdToken.hasOwnProperty('iss')) {\n            validated = false;\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('sub')) {\n            validated = false;\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('aud')) {\n            validated = false;\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('exp')) {\n            validated = false;\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            validated = false;\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\n        }\n\n        return validated;\n    }\n\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n    validate_id_token_iat_max_offset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n        if (disableIatOffsetValidation) {\n            return true;\n        }\n\n        if (!dataIdToken.hasOwnProperty('iat')) {\n            return false;\n        }\n\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n        if (dateTimeIatIdToken == null) {\n            return false;\n        }\n\n        this.loggerService.logDebug(\n            'validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTimeIatIdToken.valueOf()) + ' < ' + maxOffsetAllowedInSeconds * 1000\n        );\n        return new Date().valueOf() - dateTimeIatIdToken.valueOf() < maxOffsetAllowedInSeconds * 1000;\n    }\n\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n    // The precise method for detecting replay attacks is Client specific.\n\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n    // The current spec is ambiguous and Keycloak does send it.\n    validate_id_token_nonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n        const isFromRefreshToken =\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === OidcSecurityValidation.RefreshTokenNoncePlaceholder;\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n    // MUST exactly match the value of the iss (issuer) Claim.\n    // tslint:disable-next-line: variable-name\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\n            this.loggerService.logDebug(\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\n                    dataIdToken.iss +\n                    ' authWellKnownEndpoints issuer:' +\n                    authWellKnownEndpoints_issuer\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n    // by the iss (issuer) Claim as an audience.\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n    // not trusted by the Client.\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\n        if (dataIdToken.aud instanceof Array) {\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\n\n            if (!result) {\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n                return false;\n            }\n\n            return true;\n        } else if (dataIdToken.aud !== aud) {\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    validateStateFromHashCallback(state: any, localState: any): boolean {\n        if ((state as string) !== (localState as string)) {\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n            return false;\n        }\n\n        return true;\n    }\n\n    validate_userdata_sub_id_token(idTokenSub: any, userdataSub: any): boolean {\n        if ((idTokenSub as string) !== (userdataSub as string)) {\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + idTokenSub + ' userdata_sub:' + userdataSub);\n            return false;\n        }\n\n        return true;\n    }\n\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\n    validate_signature_id_token(idToken: any, jwtkeys: any): boolean {\n        if (!jwtkeys || !jwtkeys.keys) {\n            return false;\n        }\n\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n            this.loggerService.logWarning('id token has no header data');\n            return false;\n        }\n\n        const kid = headerData.kid;\n        const alg = headerData.alg;\n\n        if ('RS256' !== (alg as string)) {\n            this.loggerService.logWarning('Only RS256 supported');\n            return false;\n        }\n\n        let isValid = false;\n\n        if (!headerData.hasOwnProperty('kid')) {\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\n            // kty\t\"RSA\" use \"sig\"\n            let amountOfMatchingKeys = 0;\n            for (const key of jwtkeys.keys) {\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\n                }\n            }\n\n            if (amountOfMatchingKeys === 0) {\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n                return false;\n            } else if (amountOfMatchingKeys > 1) {\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n                return false;\n            } else {\n                for (const key of jwtkeys.keys) {\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\n                        const publickey = KEYUTIL.getKey(key);\n                        isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\n                        if (!isValid) {\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                        }\n                        return isValid;\n                    }\n                }\n            }\n        } else {\n            // kid in the Jose header of id_token\n            for (const key of jwtkeys.keys) {\n                if ((key.kid as string) === (kid as string)) {\n                    const publickey = KEYUTIL.getKey(key);\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\n                    if (!isValid) {\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n                    }\n                    return isValid;\n                }\n            }\n        }\n\n        return isValid;\n    }\n\n    config_validate_response_type(responseType: string): boolean {\n        if (responseType === 'id_token token' || responseType === 'id_token') {\n            return true;\n        }\n\n        if (responseType === 'code') {\n            return true;\n        }\n\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\n        return false;\n    }\n\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n    ////    if (!header_data.hasOwnProperty('kid')) {\n    ////        // no kid defined in Jose header\n    ////        if (jwtkeys.keys.length != 1) {\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n    ////            return false;\n    ////        }\n    ////    }\n\n    ////    return true;\n    //// }\n\n    // Access Token Validation\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n    // is present in the ID Token.\n    validate_id_token_at_hash(accessToken: any, atHash: any, isCodeFlow: boolean): boolean {\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n        // The at_hash is optional for the code flow\n        if (isCodeFlow) {\n            if (!(atHash as string)) {\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n                return true;\n            }\n        }\n\n        const testdata = this.generate_at_hash('' + accessToken);\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\n        if (testdata === (atHash as string)) {\n            return true; // isValid;\n        } else {\n            const testValue = this.generate_at_hash('' + decodeURIComponent(accessToken));\n            this.loggerService.logDebug('-gen access--' + testValue);\n            if (testValue === (atHash as string)) {\n                return true; // isValid\n            }\n        }\n\n        return false;\n    }\n\n    private generate_at_hash(accessToken: any): string {\n        const hash = KJUR.crypto.Util.hashString(accessToken, 'sha256');\n        const first128bits = hash.substr(0, hash.length / 2);\n        const testdata = hextob64u(first128bits);\n\n        return testdata;\n    }\n\n    generate_code_verifier(codeChallenge: any): string {\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\n        const testdata = hextob64u(hash);\n\n        return testdata;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecurityValidation } from './oidc.security.validation';\n\n@Injectable()\nexport class StateValidationService {\n    constructor(\n        public oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        const toReturn = new ValidateStateResult();\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            toReturn.state = ValidationResult.StatesDoNotMatch;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\n            this.configurationProvider.openIDConfiguration.response_type === 'code'\n        ) {\n            toReturn.access_token = result.access_token;\n        }\n\n        if (result.id_token) {\n            toReturn.id_token = result.id_token;\n\n            toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\n\n            if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n                toReturn.state = ValidationResult.SignatureFailed;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.oidcSecurityValidation.validate_id_token_nonce(\n                    toReturn.decoded_id_token,\n                    this.oidcSecurityCommon.authNonce,\n                    this.configurationProvider.openIDConfiguration.ignore_nonce_after_refresh\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\n                toReturn.state = ValidationResult.IncorrectNonce;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\n                    toReturn.decoded_id_token,\n                    this.configurationProvider.openIDConfiguration.max_id_token_iat_offset_allowed_in_seconds,\n                    this.configurationProvider.openIDConfiguration.disable_iat_offset_validation\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n                toReturn.state = ValidationResult.MaxOffsetExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                if (this.configurationProvider.openIDConfiguration.iss_validation_off) {\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n                } else if (\n                    !this.configurationProvider.openIDConfiguration.iss_validation_off &&\n                    !this.oidcSecurityValidation.validate_id_token_iss(\n                        toReturn.decoded_id_token,\n                        this.configurationProvider.wellKnownEndpoints.issuer\n                    )\n                ) {\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n                    this.handleUnsuccessfulValidation();\n                    return toReturn;\n                }\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (\n                !this.oidcSecurityValidation.validate_id_token_aud(\n                    toReturn.decoded_id_token,\n                    this.configurationProvider.openIDConfiguration.client_id\n                )\n            ) {\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\n                toReturn.state = ValidationResult.IncorrectAud;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n\n            if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\n                this.loggerService.logWarning('authorizedCallback token expired');\n                toReturn.state = ValidationResult.TokenExpired;\n                this.handleUnsuccessfulValidation();\n                return toReturn;\n            }\n        } else {\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\n        }\n\n        // flow id_token token\n        if (\n            this.configurationProvider.openIDConfiguration.response_type !== 'id_token token' &&\n            this.configurationProvider.openIDConfiguration.response_type !== 'code'\n        ) {\n            toReturn.authResponseIsValid = true;\n            toReturn.state = ValidationResult.Ok;\n            this.handleSuccessfulValidation();\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        if (\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\n                toReturn.access_token,\n                toReturn.decoded_id_token.at_hash,\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\n            ) ||\n            !toReturn.access_token\n        ) {\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n            toReturn.state = ValidationResult.IncorrectAtHash;\n            this.handleUnsuccessfulValidation();\n            return toReturn;\n        }\n\n        toReturn.authResponseIsValid = true;\n        toReturn.state = ValidationResult.Ok;\n        this.handleSuccessfulValidation();\n        return toReturn;\n    }\n\n    private handleSuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n    }\n\n    private handleUnsuccessfulValidation() {\n        this.oidcSecurityCommon.authNonce = '';\n\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\n            this.oidcSecurityCommon.authStateControl = '';\n        }\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { from, Observable, Observer, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class OidcSecurityCheckSession {\n    private sessionIframe: any;\n    private iframeMessageEvent: any;\n    private scheduledHeartBeat: any;\n    private lastIFrameRefresh = 0;\n    private outstandingMessages = 0;\n    private heartBeatInterval = 3000;\n    private iframeRefreshInterval = 60000;\n    private checkSessionChanged = new Subject<any>();\n\n    public get onCheckSessionChanged(): Observable<any> {\n        return this.checkSessionChanged.asObservable();\n    }\n\n    constructor(\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService,\n        private iFrameService: IFrameService,\n        private zone: NgZone,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    private doesSessionExist(): boolean {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n\n        if (!existingIFrame) {\n            return false;\n        }\n\n        this.sessionIframe = existingIFrame;\n        return true;\n    }\n\n    private init() {\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n            return from([this]);\n        }\n\n        if (!this.doesSessionExist()) {\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n            this.iframeMessageEvent = this.messageHandler.bind(this);\n            window.addEventListener('message', this.iframeMessageEvent, false);\n        }\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n            return;\n        }\n\n        if (this.configurationProvider.wellKnownEndpoints.check_session_iframe) {\n            this.sessionIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.check_session_iframe);\n        } else {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n        }\n\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\n            this.sessionIframe.onload = () => {\n                this.lastIFrameRefresh = Date.now();\n                observer.next(this);\n                observer.complete();\n            };\n        });\n    }\n\n    startCheckingSession(clientId: string): void {\n        if (this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.pollServerSession(clientId);\n    }\n\n    stopCheckingSession(): void {\n        if (!this.scheduledHeartBeat) {\n            return;\n        }\n\n        this.clearScheduledHeartBeat();\n    }\n\n    private pollServerSession(clientId: string) {\n        const pollServerSessionRecur = () => {\n            this.init()\n                .pipe(take(1))\n                .subscribe(() => {\n                    if (this.sessionIframe && clientId) {\n                        this.loggerService.logDebug(this.sessionIframe);\n                        const sessionState = this.oidcSecurityCommon.sessionState;\n                        if (sessionState) {\n                            this.outstandingMessages++;\n                            this.sessionIframe.contentWindow.postMessage(\n                                clientId + ' ' + sessionState,\n                                this.configurationProvider.openIDConfiguration.stsServer\n                            );\n                        } else {\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\n                            this.checkSessionChanged.next();\n                        }\n                    } else {\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\n                        this.loggerService.logDebug(clientId);\n                        this.loggerService.logDebug(this.sessionIframe);\n                        // this.init();\n                    }\n\n                    // after sending three messages with no response, fail.\n                    if (this.outstandingMessages > 3) {\n                        this.loggerService.logError(\n                            `OidcSecurityCheckSession not receiving check session response messages.\n                            Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n                        );\n                        this.checkSessionChanged.next();\n                    }\n\n                    this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\n                });\n        };\n\n        this.outstandingMessages = 0;\n\n        this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\n        });\n    }\n    private clearScheduledHeartBeat() {\n        clearTimeout(this.scheduledHeartBeat);\n        this.scheduledHeartBeat = null;\n    }\n\n    private messageHandler(e: any) {\n        this.outstandingMessages = 0;\n        if (\n            this.sessionIframe &&\n            e.origin === this.configurationProvider.openIDConfiguration.stsServer &&\n            e.source === this.sessionIframe.contentWindow\n        ) {\n            if (e.data === 'error') {\n                this.loggerService.logWarning('error from checksession messageHandler');\n            } else if (e.data === 'changed') {\n                this.checkSessionChanged.next();\n            } else {\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n            }\n        }\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { LoggerService } from './oidc.logger.service';\n\nexport interface ConfigResult {\n    authWellknownEndpoints: any;\n    customConfig: any;\n}\n\n@Injectable()\nexport class OidcConfigService {\n    private configurationLoadedInternal = new ReplaySubject<ConfigResult>(1);\n\n    public get onConfigurationLoaded(): Observable<ConfigResult> {\n        return this.configurationLoadedInternal.asObservable();\n    }\n\n    constructor(private readonly loggerService: LoggerService, private readonly httpClient: HttpClient) {}\n\n    load(configUrl: string): Promise<boolean> {\n        return this.httpClient\n            .get(configUrl)\n            .pipe(\n                switchMap(clientConfiguration => {\n                    return this.loadUsingConfiguration(clientConfiguration);\n                }),\n                catchError(error => {\n                    this.loggerService.logError(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\n                    this.configurationLoadedInternal.next(undefined);\n                    return of(false);\n                })\n            )\n            .toPromise();\n    }\n\n    load_using_stsServer(stsServer: string): Promise<boolean> {\n        return this.loadUsingConfiguration({ stsServer }).toPromise();\n    }\n\n    load_using_custom_stsServer(url: string): Promise<boolean> {\n        return this.httpClient\n            .get(url)\n            .pipe(\n                switchMap(wellKnownEndpoints => {\n                    this.configurationLoadedInternal.next({\n                        authWellknownEndpoints: wellKnownEndpoints,\n                        customConfig: { stsServer: url },\n                    });\n                    return of(true);\n                }),\n                catchError(error => {\n                    this.loggerService.logError(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\n                    this.configurationLoadedInternal.next(undefined);\n                    return of(false);\n                })\n            )\n            .toPromise();\n    }\n\n    private loadUsingConfiguration(clientConfig: any): Observable<boolean> {\n        if (!clientConfig.stsServer) {\n            this.loggerService.logError(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`, clientConfig);\n            throw new Error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`);\n        }\n\n        const url = `${clientConfig.stsServer}/.well-known/openid-configuration`;\n\n        return this.httpClient.get(url).pipe(\n            switchMap(wellKnownEndpoints => {\n                this.configurationLoadedInternal.next({\n                    authWellknownEndpoints: wellKnownEndpoints,\n                    customConfig: clientConfig,\n                });\n                return of(true);\n            }),\n            catchError(error => {\n                this.loggerService.logError(`OidcConfigService 'load_using_stsServer' threw an error on calling ${url}`, error);\n                this.configurationLoadedInternal.next(undefined);\n                return of(false);\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IFrameService } from './existing-iframe.service';\nimport { LoggerService } from './oidc.logger.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class OidcSecuritySilentRenew {\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\n\n    initRenew(): HTMLIFrameElement {\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        if (!existingIFrame) {\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n        }\n        return existingIFrame;\n    }\n\n    startRenew(url: string): Observable<void> {\n        const sessionIframe = this.initRenew();\n        this.loggerService.logDebug('startRenew for URL:' + url);\n        return new Observable<void>(observer => {\n            const onLoadHandler = () => {\n                sessionIframe.removeEventListener('load', onLoadHandler);\n                observer.next(undefined);\n                observer.complete();\n            };\n            sessionIframe.addEventListener('load', onLoadHandler);\n            sessionIframe.src = url;\n            return () => {\n                sessionIframe.removeEventListener('load', onLoadHandler);\n            };\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCommon } from './oidc.security.common';\n\n@Injectable()\nexport class OidcSecurityUserService {\n    private userData: any = '';\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private loggerService: LoggerService,\n        private readonly configurationProvider: ConfigurationProvider\n    ) {}\n\n    initUserData() {\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\n    }\n\n    getUserData(): any {\n        if (!this.userData) {\n            throw Error('UserData is not set!');\n        }\n\n        return this.userData;\n    }\n\n    setUserData(value: any): void {\n        this.userData = value;\n    }\n\n    private getIdentityUserData(): Observable<any> {\n        const token = this.oidcSecurityCommon.getAccessToken();\n\n        if (!this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n\n            throw Error('authWellKnownEndpoints is undefined');\n        }\n\n        const canGetUserData = this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.userinfo_endpoint;\n\n        if (!canGetUserData) {\n            this.loggerService.logError(\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n            );\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\n        }\n\n        return this.oidcDataService.getIdentityUserData(this.configurationProvider.wellKnownEndpoints.userinfo_endpoint || '', token);\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n    encodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n\n    encodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n\n    decodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n\n    decodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class UrlParserService {\n    getUrlParameter(urlToCheck: any, name: any): string {\n        if (!urlToCheck) {\n            return '';\n        }\n\n        if (!name) {\n            return '';\n        }\n\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n        const results = regex.exec(urlToCheck);\n        return results === null ? '' : decodeURIComponent(results[1]);\n    }\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, from, Observable, of, Subject, throwError, timer } from 'rxjs';\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { OpenIdConfiguration } from '../models/auth.configuration';\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\nimport { AuthorizationResult } from '../models/authorization-result';\nimport { AuthorizationState } from '../models/authorization-state.enum';\nimport { JwtKeys } from '../models/jwtkeys';\nimport { ValidateStateResult } from '../models/validate-state-result.model';\nimport { ValidationResult } from '../models/validation-result.enum';\nimport { ConfigurationProvider } from './auth-configuration.provider';\nimport { StateValidationService } from './oidc-security-state-validation.service';\nimport { TokenHelperService } from './oidc-token-helper.service';\nimport { LoggerService } from './oidc.logger.service';\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\nimport { OidcSecurityCommon } from './oidc.security.common';\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\nimport { OidcSecurityUserService } from './oidc.security.user-service';\nimport { OidcSecurityValidation } from './oidc.security.validation';\nimport { UriEncoder } from './uri-encoder';\nimport { UrlParserService } from './url-parser.service';\nimport { oneLineTrim } from 'common-tags';\n\n// tslint:disable: variable-name\n@Injectable()\nexport class OidcSecurityService {\n    private _onModuleSetup = new Subject<boolean>();\n    private _onCheckSessionChanged = new Subject<boolean>();\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\n\n    public get onModuleSetup(): Observable<boolean> {\n        return this._onModuleSetup.asObservable();\n    }\n\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\n        return this._onAuthorizationResult.asObservable();\n    }\n\n    public get onCheckSessionChanged(): Observable<boolean> {\n        return this._onCheckSessionChanged.asObservable();\n    }\n\n    public get onConfigurationChange(): Observable<OpenIdConfiguration> {\n        return this.configurationProvider.onConfigurationChange;\n    }\n\n    checkSessionChanged = false;\n    moduleSetup = false;\n\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\n\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\n    private _isSetupAndAuthorized: Observable<boolean>;\n\n    private _userData = new BehaviorSubject<any>('');\n    private authWellKnownEndpointsLoaded = false;\n    private runTokenValidationRunning = false;\n    private _scheduledHeartBeat: any;\n    private boundSilentRenewEvent: any;\n\n    constructor(\n        private oidcDataService: OidcDataService,\n        private stateValidationService: StateValidationService,\n        private router: Router,\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\n        private oidcSecurityUserService: OidcSecurityUserService,\n        private oidcSecurityCommon: OidcSecurityCommon,\n        private oidcSecurityValidation: OidcSecurityValidation,\n        private tokenHelperService: TokenHelperService,\n        private loggerService: LoggerService,\n        private zone: NgZone,\n        private readonly httpClient: HttpClient,\n        private readonly configurationProvider: ConfigurationProvider,\n        private readonly urlParserService: UrlParserService\n    ) {\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\n            this.moduleSetup = true;\n            this._isModuleSetup.next(true);\n        });\n\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\n            filter((isModuleSetup: boolean) => isModuleSetup),\n            switchMap(() => {\n                if (!this.configurationProvider.openIDConfiguration.silent_renew) {\n                    this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`);\n                    return from([true]);\n                }\n\n                const race$ = this._isAuthorized.asObservable().pipe(\n                    filter((isAuthorized: boolean) => isAuthorized),\n                    take(1),\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\n                    // tslint:disable-next-line: deprecation\n                    race(\n                        this._onAuthorizationResult.pipe(\n                            take(1),\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\n                            map(() => true)\n                        ),\n                        timer(this.configurationProvider.openIDConfiguration.isauthorizedrace_timeout_in_seconds * 1000).pipe(\n                            // backup, if nothing happens after X seconds stop waiting and emit (5s Default)\n                            tap(() => {\n                                this.resetAuthorizationData(false);\n                                this.oidcSecurityCommon.authNonce = '';\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\n                            }),\n                            map(() => true)\n                        )\n                    )\n                );\n\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\n                    // login not running, or a second silent renew, user must login first before this will work.\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\n                    this.refreshSession().subscribe();\n                }\n\n                return race$;\n            }),\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\n            switchMapTo(this._isAuthorized.asObservable()),\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\n            shareReplay(1)\n        );\n\n        this._isSetupAndAuthorized\n            .pipe(filter(() => this.configurationProvider.openIDConfiguration.start_checksession))\n            .subscribe(isSetupAndAuthorized => {\n                if (isSetupAndAuthorized) {\n                    this.oidcSecurityCheckSession.startCheckingSession(this.configurationProvider.openIDConfiguration.client_id);\n                } else {\n                    this.oidcSecurityCheckSession.stopCheckingSession();\n                }\n            });\n    }\n\n    setupModule(openIdConfiguration: OpenIdConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\n        this.configurationProvider.setup(openIdConfiguration, authWellKnownEndpoints);\n\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\n            this.loggerService.logDebug('onCheckSessionChanged');\n            this.checkSessionChanged = true;\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\n        });\n\n        const userData = this.oidcSecurityCommon.userData;\n        if (userData) {\n            this.setUserData(userData);\n        }\n\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\n        if (isAuthorized) {\n            this.loggerService.logDebug('IsAuthorized setup module');\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\n            if (\n                this.oidcSecurityValidation.isTokenExpired(\n                    this.oidcSecurityCommon.idToken || this.oidcSecurityCommon.accessToken,\n                    this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\n                )\n            ) {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\n            } else {\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\n                this.setIsAuthorized(isAuthorized);\n            }\n            this.runTokenValidation();\n        }\n\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\n\n        this._onModuleSetup.next();\n\n        if (this.configurationProvider.openIDConfiguration.silent_renew) {\n            this.oidcSecuritySilentRenew.initRenew();\n\n            // Support authorization via DOM events.\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\n            //      We only ever want the latest setup service to be reacting to this event.\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\n\n            const instanceId = Math.random();\n\n            const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\n                if (e.detail !== instanceId) {\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\n                }\n            }).bind(this);\n\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\n\n            window.dispatchEvent(\n                new CustomEvent('oidc-silent-renew-init', {\n                    detail: instanceId,\n                })\n            );\n        }\n    }\n\n    getUserData<T = any>(): Observable<T> {\n        return this._userData.asObservable();\n    }\n\n    getIsModuleSetup(): Observable<boolean> {\n        return this._isModuleSetup.asObservable();\n    }\n\n    getIsAuthorized(): Observable<boolean> {\n        return this._isSetupAndAuthorized;\n    }\n\n    getToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getAccessToken();\n        return decodeURIComponent(token);\n    }\n\n    getIdToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getIdToken();\n        return decodeURIComponent(token);\n    }\n\n    getRefreshToken(): string {\n        if (!this._isAuthorized.getValue()) {\n            return '';\n        }\n\n        const token = this.oidcSecurityCommon.getRefreshToken();\n        return decodeURIComponent(token);\n    }\n\n    getPayloadFromIdToken(encode = false): any {\n        const token = this.getIdToken();\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\n    }\n\n    setState(state: string): void {\n        this.oidcSecurityCommon.authStateControl = state;\n    }\n\n    getState(): string {\n        return this.oidcSecurityCommon.authStateControl;\n    }\n\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\n        this.oidcSecurityCommon.customRequestParams = params;\n    }\n\n    // Code Flow with PCKE or Implicit Flow\n    authorize(urlHandler?: (url: string) => any) {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            this.authWellKnownEndpointsLoaded = true;\n        }\n\n        if (!this.authWellKnownEndpointsLoaded) {\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\n            return;\n        }\n\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.configurationProvider.openIDConfiguration.response_type)) {\n            // invalid response_type\n            return;\n        }\n\n        this.resetAuthorizationData(false);\n\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (!state) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n        // Code Flow\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    true,\n                    code_challenge,\n                    this.configurationProvider.openIDConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        } else {\n            // Implicit Flow\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    false,\n                    '',\n                    this.configurationProvider.openIDConfiguration.redirect_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\n                );\n            } else {\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        if (urlHandler) {\n            urlHandler(url);\n        } else {\n            this.redirectTo(url);\n        }\n    }\n\n    // Code Flow\n    authorizedCallbackWithCode(urlToCheck: string) {\n        this.authorizedCallbackWithCode$(urlToCheck).subscribe();\n    }\n    authorizedCallbackWithCode$(urlToCheck: string): Observable<void> {\n        const code = this.urlParserService.getUrlParameter(urlToCheck, 'code');\n        const state = this.urlParserService.getUrlParameter(urlToCheck, 'state');\n        const sessionState = this.urlParserService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n        if (!state) {\n            this.loggerService.logDebug('no state in url');\n            return of();\n        }\n        if (!code) {\n            this.loggerService.logDebug('no code in url');\n            return of();\n        }\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\n        return this.requestTokensWithCode$(code, state, sessionState);\n    }\n\n    // Code Flow\n    requestTokensWithCode(code: string, state: string, sessionState: string | null): void {\n        this.requestTokensWithCode$(code, state, sessionState).subscribe();\n    }\n\n    requestTokensWithCode$(code: string, state: string, sessionState: string | null): Observable<void> {\n        return this._isModuleSetup.pipe(\n            filter(isModuleSetup => !!isModuleSetup),\n            take(1),\n            switchMap(() => {\n                return this.requestTokensWithCodeProcedure$(code, state, sessionState);\n            })\n        );\n    }\n\n    // Refresh Token\n    refreshTokensWithCodeProcedure(code: string, state: string): Observable<any> {\n        let tokenRequestUrl = '';\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        const data = `grant_type=refresh_token&client_id=${this.configurationProvider.openIDConfiguration.client_id}&refresh_token=${code}`;\n\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\n            map(response => {\n                this.loggerService.logDebug('token refresh response: ' + JSON.stringify(response));\n                let obj: any = new Object();\n                obj = response;\n                obj.state = state;\n\n                this.authorizedCodeFlowCallbackProcedure(obj);\n            }),\n            catchError(error => {\n                this.loggerService.logDebug('token refresh failure response: ' + JSON.stringify(error));\n                let obj: any = new Object();\n                obj = error;\n                obj.state = state;\n\n                this.authorizedCodeFlowCallbackProcedure(obj);\n                return of(false);\n            })\n        );\n    }\n\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null): void {\n        this.requestTokensWithCodeProcedure$(code, state, session_state).subscribe();\n    }\n\n    // Code Flow with PCKE\n    requestTokensWithCodeProcedure$(code: string, state: string, session_state: string | null): Observable<void> {\n        let tokenRequestUrl = '';\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\n        }\n\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\n            this.loggerService.logWarning('authorizedCallback incorrect state');\n            // ValidationResult.StatesDoNotMatch;\n            return throwError(new Error('incorrect state'));\n        }\n\n        let headers: HttpHeaders = new HttpHeaders();\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n        let data = oneLineTrim`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\n            &code_verifier=${this.oidcSecurityCommon.code_verifier}\n            &code=${code}&redirect_uri=${this.configurationProvider.openIDConfiguration.redirect_url}`;\n\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\n            data = oneLineTrim`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\n                &code_verifier=${this.oidcSecurityCommon.code_verifier}\n                &code=${code}\n                &redirect_uri=${this.configurationProvider.openIDConfiguration.silent_renew_url}`;\n        }\n\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\n            map(response => {\n                let obj: any = new Object();\n                obj = response;\n                obj.state = state;\n                obj.session_state = session_state;\n\n                this.authorizedCodeFlowCallbackProcedure(obj);\n\n                return undefined;\n            }),\n            catchError(error => {\n                this.loggerService.logError(error);\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\n                return throwError(error);\n            })\n        );\n    }\n\n    // Code Flow\n    private authorizedCodeFlowCallbackProcedure(result: any) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n        this.resetAuthorizationData(isRenewProcess);\n\n        hash = hash || window.location.hash.substr(1);\n\n        const result: any = hash.split('&').reduce((resultData: any, item: string) => {\n            const parts = item.split('=');\n            resultData[parts.shift() as string] = parts.join('=');\n            return resultData;\n        }, {});\n\n        this.authorizedCallbackProcedure(result, isRenewProcess);\n    }\n\n    // Implicit Flow\n    authorizedImplicitFlowCallback(hash?: string) {\n        this._isModuleSetup\n            .pipe(\n                filter((isModuleSetup: boolean) => isModuleSetup),\n                take(1)\n            )\n            .subscribe(() => {\n                this.authorizedImplicitFlowCallbackProcedure(hash);\n            });\n    }\n\n    private redirectTo(url: string) {\n        window.location.href = url;\n    }\n\n    // Implicit Flow\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\n        this.oidcSecurityCommon.authResult = result;\n\n        if (!this.configurationProvider.openIDConfiguration.history_cleanup_off && !isRenewProcess) {\n            // reset the history to remove the tokens\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n        } else {\n            this.loggerService.logDebug('history clean up inactive');\n        }\n\n        if (result.error) {\n            if (isRenewProcess) {\n                this.loggerService.logDebug(result);\n            } else {\n                this.loggerService.logWarning(result);\n            }\n\n            if ((result.error as string) === 'login_required') {\n                this._onAuthorizationResult.next(\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, isRenewProcess)\n                );\n            } else {\n                this._onAuthorizationResult.next(\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError, isRenewProcess)\n                );\n            }\n\n            this.resetAuthorizationData(false);\n            this.oidcSecurityCommon.authNonce = '';\n\n            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n            }\n        } else {\n            this.loggerService.logDebug(result);\n\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n            this.getSigningKeys().subscribe(\n                jwtKeys => {\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\n\n                    if (validationResult.authResponseIsValid) {\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\n                                response => {\n                                    if (response) {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\n                                        );\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\n                                        }\n                                    } else {\n                                        this._onAuthorizationResult.next(\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\n                                        );\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n                                        }\n                                    }\n                                },\n                                err => {\n                                    /* Something went wrong while getting signing key */\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\n                                }\n                            );\n                        } else {\n                            if (!isRenewProcess) {\n                                // userData is set to the id_token decoded, auto get user data set to false\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\n                            }\n\n                            this.runTokenValidation();\n\n                            this._onAuthorizationResult.next(\n                                new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\n                            );\n                            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                                this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\n                            }\n                        }\n                    } else {\n                        // something went wrong\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\n                        this.loggerService.logWarning(window.location.hash);\n                        this.resetAuthorizationData(false);\n                        this.oidcSecurityCommon.silentRenewRunning = '';\n\n                        this._onAuthorizationResult.next(\n                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\n                        );\n                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\n                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n                        }\n                    }\n                },\n                err => {\n                    /* Something went wrong while getting signing key */\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\n                    this.oidcSecurityCommon.silentRenewRunning = '';\n                }\n            );\n        }\n    }\n\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\n        result = result ? result : this.oidcSecurityCommon.authResult;\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\n\n        return new Observable<boolean>(observer => {\n            // flow id_token token\n            if (\n                this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\n            ) {\n                if (isRenewProcess && this._userData.value) {\n                    this.oidcSecurityCommon.sessionState = result.session_state;\n                    observer.next(true);\n                    observer.complete();\n                } else {\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\n\n                        const userData = this.oidcSecurityUserService.getUserData();\n\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\n                            this.setUserData(userData);\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\n\n                            this.oidcSecurityCommon.sessionState = result.session_state;\n\n                            this.runTokenValidation();\n                            observer.next(true);\n                        } else {\n                            // something went wrong, userdata sub does not match that from id_token\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n                            this.resetAuthorizationData(false);\n                            observer.next(false);\n                        }\n                        observer.complete();\n                    });\n                }\n            } else {\n                // flow id_token\n                this.loggerService.logDebug('authorizedCallback id_token flow');\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\n\n                // userData is set to the id_token decoded. No access_token.\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\n                this.setUserData(this.oidcSecurityUserService.getUserData());\n\n                this.oidcSecurityCommon.sessionState = result.session_state;\n\n                this.runTokenValidation();\n\n                observer.next(true);\n                observer.complete();\n            }\n        });\n    }\n\n    logoff(urlHandler?: (url: string) => any) {\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\n\n        if (this.configurationProvider.wellKnownEndpoints) {\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n\n                this.resetAuthorizationData(false);\n\n                if (this.configurationProvider.openIDConfiguration.start_checksession && this.checkSessionChanged) {\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\n                } else if (urlHandler) {\n                    urlHandler(url);\n                } else {\n                    this.redirectTo(url);\n                }\n            } else {\n                this.resetAuthorizationData(false);\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n            }\n        } else {\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        }\n    }\n\n    refreshSession(): Observable<boolean> {\n        if (!this.configurationProvider.openIDConfiguration.silent_renew) {\n            return of(false);\n        }\n\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\n\n        let state = this.oidcSecurityCommon.authStateControl;\n        if (state === '' || state === null) {\n            state = Date.now() + '' + Math.random() + Math.random();\n            this.oidcSecurityCommon.authStateControl = state;\n        }\n\n        const nonce = 'N' + Math.random() + '' + Date.now();\n        this.oidcSecurityCommon.authNonce = nonce;\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\n\n        let url = '';\n\n        // Code Flow\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            if (this.configurationProvider.openIDConfiguration.use_refresh_token) {\n                // try using refresh token\n                const refresh_token = this.oidcSecurityCommon.getRefreshToken();\n                if (refresh_token) {\n                    this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n                    // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n                    this.oidcSecurityCommon.authNonce = OidcSecurityValidation.RefreshTokenNoncePlaceholder;\n                    return this.refreshTokensWithCodeProcedure(refresh_token, state);\n                } else {\n                    this.loggerService.logDebug('no refresh token found, using silent renew');\n                }\n            }\n            // code_challenge with \"S256\"\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\n\n            this.oidcSecurityCommon.code_verifier = code_verifier;\n\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    true,\n                    code_challenge,\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        } else {\n            if (this.configurationProvider.wellKnownEndpoints) {\n                url = this.createAuthorizeUrl(\n                    false,\n                    '',\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\n                    nonce,\n                    state,\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\n                    'none'\n                );\n            } else {\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n            }\n        }\n\n        return this.oidcSecuritySilentRenew.startRenew(url).pipe(map(() => true));\n    }\n\n    handleError(error: any) {\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\n        const isRenewProcess = silentRenew === 'running';\n        this.loggerService.logError(error);\n        if (error.status === 403 || error.status === '403') {\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\n            } else {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.forbidden_route]);\n            }\n        } else if (error.status === 401 || error.status === '401') {\n            const silentRenewRunning = this.oidcSecurityCommon.silentRenewRunning;\n\n            this.resetAuthorizationData(!!silentRenewRunning);\n\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\n            } else {\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\n            }\n        }\n    }\n\n    startCheckingSilentRenew(): void {\n        this.runTokenValidation();\n    }\n\n    stopCheckingSilentRenew(): void {\n        if (this._scheduledHeartBeat) {\n            clearTimeout(this._scheduledHeartBeat);\n            this._scheduledHeartBeat = null;\n            this.runTokenValidationRunning = false;\n        }\n    }\n\n    resetAuthorizationData(isRenewProcess: boolean): void {\n        if (!isRenewProcess) {\n            if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\n                // Clear user data. Fixes #97.\n                this.setUserData('');\n            }\n\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\n            this.checkSessionChanged = false;\n            this.setIsAuthorized(false);\n        }\n    }\n\n    getEndSessionUrl(): string | undefined {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\n                const id_token_hint = this.oidcSecurityCommon.idToken;\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\n            }\n        }\n    }\n\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\n        if (result.error) {\n            return new ValidateStateResult('', '', false, {});\n        }\n\n        return this.stateValidationService.validateState(result, jwtKeys);\n    }\n\n    private setUserData(userData: any): void {\n        this.oidcSecurityCommon.userData = userData;\n        this._userData.next(userData);\n    }\n\n    private setIsAuthorized(isAuthorized: boolean): void {\n        this._isAuthorized.next(isAuthorized);\n    }\n\n    private setAuthorizationData(access_token: any, id_token: any) {\n        if (this.oidcSecurityCommon.accessToken !== '') {\n            this.oidcSecurityCommon.accessToken = '';\n        }\n\n        this.loggerService.logDebug(access_token);\n        this.loggerService.logDebug(id_token);\n        this.loggerService.logDebug('storing to storage, getting the roles');\n        this.oidcSecurityCommon.accessToken = access_token;\n        this.oidcSecurityCommon.idToken = id_token;\n        this.setIsAuthorized(true);\n        this.oidcSecurityCommon.isAuthorized = true;\n    }\n\n    private createAuthorizeUrl(\n        isCodeFlow: boolean,\n        code_challenge: string,\n        redirect_url: string,\n        nonce: string,\n        state: string,\n        authorization_endpoint: string,\n        prompt?: string\n    ): string {\n        const urlParts = authorization_endpoint.split('?');\n        const authorizationUrl = urlParts[0];\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('client_id', this.configurationProvider.openIDConfiguration.client_id);\n        params = params.append('redirect_uri', redirect_url);\n        params = params.append('response_type', this.configurationProvider.openIDConfiguration.response_type);\n        params = params.append('scope', this.configurationProvider.openIDConfiguration.scope);\n        params = params.append('nonce', nonce);\n        params = params.append('state', state);\n\n        if (isCodeFlow) {\n            params = params.append('code_challenge', code_challenge);\n            params = params.append('code_challenge_method', 'S256');\n        }\n\n        if (prompt) {\n            params = params.append('prompt', prompt);\n        }\n\n        if (this.configurationProvider.openIDConfiguration.hd_param) {\n            params = params.append('hd', this.configurationProvider.openIDConfiguration.hd_param);\n        }\n\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\n\n        Object.keys(customParams).forEach(key => {\n            params = params.append(key, customParams[key].toString());\n        });\n\n        return `${authorizationUrl}?${params}`;\n    }\n\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\n        const urlParts = end_session_endpoint.split('?');\n\n        const authorizationEndsessionUrl = urlParts[0];\n\n        let params = new HttpParams({\n            fromString: urlParts[1],\n            encoder: new UriEncoder(),\n        });\n        params = params.set('id_token_hint', id_token_hint);\n        params = params.append('post_logout_redirect_uri', this.configurationProvider.openIDConfiguration.post_logout_redirect_uri);\n\n        return `${authorizationEndsessionUrl}?${params}`;\n    }\n\n    private getSigningKeys(): Observable<JwtKeys> {\n        if (this.configurationProvider.wellKnownEndpoints) {\n            this.loggerService.logDebug('jwks_uri: ' + this.configurationProvider.wellKnownEndpoints.jwks_uri);\n\n            return this.oidcDataService\n                .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwks_uri || '')\n                .pipe(catchError(this.handleErrorGetSigningKeys));\n        } else {\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\n        }\n\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\n    }\n\n    private handleErrorGetSigningKeys(error: Response | any) {\n        let errMsg: string;\n        if (error instanceof Response) {\n            const body = error.json() || {};\n            const err = JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        this.loggerService.logError(errMsg);\n        return throwError(errMsg);\n    }\n\n    private runTokenValidation() {\n        if (this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silent_renew) {\n            return;\n        }\n        this.runTokenValidationRunning = true;\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\n\n        /**\n         *   First time: delay 10 seconds to call silentRenewHeartBeatCheck\n         *   Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\n         */\n        const silentRenewHeartBeatCheck = () => {\n            this.loggerService.logDebug(\n                'silentRenewHeartBeatCheck\\r\\n' +\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\n                    `\\t_userData.value: ${!!this._userData.value}`\n            );\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\n                if (\n                    this.oidcSecurityValidation.isTokenExpired(\n                        this.oidcSecurityCommon.idToken,\n                        this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\n                    )\n                ) {\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\n\n                    if (this.configurationProvider.openIDConfiguration.silent_renew) {\n                        this.refreshSession().subscribe(\n                            () => {\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            },\n                            (err: any) => {\n                                this.loggerService.logError('Error: ' + err);\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n                            }\n                        );\n                        /* In this situation, we schedule a heartbeat check only when silentRenew is finished.\n                        We don't want to schedule another check so we have to return here */\n                        return;\n                    } else {\n                        this.resetAuthorizationData(false);\n                    }\n                }\n            }\n\n            /* Delay 3 seconds and do the next check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\n        };\n\n        this.zone.runOutsideAngular(() => {\n            /* Initial heartbeat check */\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\n        });\n    }\n\n    private silentRenewEventHandler(e: CustomEvent) {\n        this.loggerService.logDebug('silentRenewEventHandler');\n\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\n            const urlParts = e.detail.toString().split('?');\n            const params = new HttpParams({\n                fromString: urlParts[1],\n            });\n            const code = params.get('code');\n            const state = params.get('state');\n            const session_state = params.get('session_state');\n            const error = params.get('error');\n            if (code && state) {\n                this.requestTokensWithCodeProcedure(code, state, session_state);\n            }\n            if (error) {\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, true));\n                this.resetAuthorizationData(false);\n                this.oidcSecurityCommon.authNonce = '';\n                this.loggerService.logDebug(e.detail.toString());\n            }\n        } else {\n            // ImplicitFlow\n            this.authorizedImplicitFlowCallback(e.detail);\n        }\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { OidcDataService } from '../data-services/oidc-data.service';\nimport { IFrameService } from '../services/existing-iframe.service';\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\nimport { LoggerService } from '../services/oidc.logger.service';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport { OidcConfigService } from '../services/oidc.security.config.service';\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\n\n@NgModule()\nexport class AuthModule {\n    static forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcConfigService,\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                TokenHelperService,\n                LoggerService,\n                IFrameService,\n                EqualityHelperService,\n                OidcDataService,\n                StateValidationService,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage,\n                },\n            ],\n        };\n    }\n}\n\nexport interface Type<T> extends Function {\n    new (...args: any[]): T;\n}\n\nexport interface Token {\n    storage?: Type<any>;\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}
