{"version":3,"sources":["ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","node_modules/tslib/tslib.es6.js","ng://angular-auth-oidc-client/lib/services/platform.provider.ts","ng://angular-auth-oidc-client/lib/services/auth-configuration.provider.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/url-parser.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"names":["JwtKeys","this","keys","kty","use","kid","x5t","e","n","x5c","AuthorizationResult","authorizationState","validationResult","isRenewProcess","authorized","forbidden","unauthorized","NotSet","StatesDoNotMatch","SignatureFailed","IncorrectNonce","RequiredPropertyMissing","MaxOffsetExpired","IssDoesNotMatchIssuer","NoAuthWellKnownEndPoints","IncorrectAud","TokenExpired","IncorrectAtHash","Ok","LoginRequired","SecureTokenServerError","ValidateStateResult","access_token","id_token","authResponseIsValid","decoded_id_token","state","ValidationResult","OidcDataService","prototype","getWellknownEndpoints","url","headers","HttpHeaders","set","httpClient","get","getIdentityUserData","token","decodeURIComponent","Injectable","HttpClient","__assign","Object","assign","t","s","i","arguments","length","p","hasOwnProperty","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","ar","push","error","__makeTemplateObject","cooked","raw","defineProperty","PlatformProvider","isPlatformBrowser","platformId","args","providedIn","decorators","type","Inject","PLATFORM_ID","ConfigurationProvider","mergedOpenIdConfiguration","authWellKnownEndpoints","onConfigurationChangeInternal","asObservable","setup","passedOpenIfConfiguration","passedAuthWellKnownEndpoints","setSpecialCases","currentConfig","platformProvider","isBrowser","start_checksession","silent_renew","use_refresh_token","DEFAULT_CONFIG","stsServer","redirect_url","client_id","response_type","scope","hd_param","post_logout_redirect_uri","silent_renew_url","silent_renew_offset_in_seconds","ignore_nonce_after_refresh","post_login_route","forbidden_route","unauthorized_route","auto_userinfo","auto_clean_state_after_authentication","trigger_authorization_result_event","log_console_warning_active","log_console_debug_active","iss_validation_off","history_cleanup_off","max_id_token_iat_offset_allowed_in_seconds","isauthorizedrace_timeout_in_seconds","disable_iat_offset_validation","storage","Storage","sessionStorage","INITIAL_AUTHWELLKNOWN","issuer","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","Subject","LoggerService","logError","message","_i","console","__spread","concat","logWarning","configurationProvider","openIDConfiguration","warn","logDebug","log","IFrameService","getExistingIFrame","identifier","iFrameOnParent","getIFrameFromParentWindow","isIFrameElement","iFrameOnSelf","getIFrameFromWindow","addIFrameToWindowBody","sessionIframe","window","document","createElement","id","loggerService","style","display","body","appendChild","iFrameElement","parent","getElementById","element","HTMLIFrameElement","EqualityHelperService","areEqual","value1","value2","bothValuesAreArrays","arraysEqual","bothValuesAreStrings","bothValuesAreObjects","JSON","stringify","toLowerCase","oneValueIsStringAndTheOtherIsArray","Array","isArray","valueIsString","valueIsObject","String","arr1","arr2","TokenHelperService","getTokenExpirationDate","dataIdToken","Date","date","setUTCSeconds","exp","getHeaderFromToken","encoded","tokenIsValid","getPartOfToken","getPayloadFromToken","getSignatureFromToken","index","partOfToken","extractPartOfToken","result","urlBase64Decode","parse","str","output","replace","Error","decoded","atob","Buffer","toString","split","map","c","charCodeAt","slice","join","err","includes","PARTS_OF_TOKEN","OidcSecurityStorage","BrowserStorage","read","key","hasStorage","configProvider","getItem","write","undefined","setItem","OidcSecurityCommon","retrieve","storageAuthResult","store","storageAccessToken","storageIdToken","storageIsAuthorized","storageUserData","storageAuthNonce","storageCodeVerifier","storageAuthStateControl","storageSessionState","storageSilentRenewRunning","storageCustomRequestParams","oidcSecurityStorage","resetStorageData","getAccessToken","getIdToken","getRefreshToken","authResult","refresh_token","OidcSecurityValidation","isTokenExpired","offsetSeconds","tokenHelperService","validate_id_token_exp_not_expired","tokenExpirationDate","tokenExpirationValue","valueOf","nowWithOffset","tokenNotExpired","validate_required_id_token","validated","validate_id_token_iat_max_offset","maxOffsetAllowedInSeconds","disableIatOffsetValidation","dateTimeIatIdToken","iat","validate_id_token_nonce","localNonce","ignoreNonceAfterRefresh","nonce","RefreshTokenNoncePlaceholder","validate_id_token_iss","authWellKnownEndpoints_issuer","iss","validate_id_token_aud","aud","arrayHelperService","validateStateFromHashCallback","localState","validate_userdata_sub_id_token","idTokenSub","userdataSub","validate_signature_id_token","idToken","jwtkeys","headerData","constructor","alg","isValid","_h","tslib_1.__values","_j","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_d","_e","_f","_g","config_validate_response_type","responseType","validate_id_token_at_hash","accessToken","atHash","isCodeFlow","testdata","generate_at_hash","testValue","hash","crypto","Util","hashString","first128bits","substr","hextob64u","generate_code_verifier","codeChallenge","StateValidationService","validateState","jwtKeys","toReturn","oidcSecurityValidation","oidcSecurityCommon","authStateControl","handleUnsuccessfulValidation","authNonce","wellKnownEndpoints","handleSuccessfulValidation","at_hash","IFRAME_FOR_CHECK_SESSION_IDENTIFIER","OidcSecurityCheckSession","checkSessionChanged","doesSessionExist","existingIFrame","iFrameService","init","_this","lastIFrameRefresh","iframeRefreshInterval","now","from","iframeMessageEvent","messageHandler","bind","addEventListener","contentWindow","location","Observable","create","observer","onload","complete","startCheckingSession","clientId","scheduledHeartBeat","pollServerSession","stopCheckingSession","clearScheduledHeartBeat","pollServerSessionRecur","pipe","take","subscribe","sessionState","outstandingMessages","postMessage","setTimeout","heartBeatInterval","zone","runOutsideAngular","clearTimeout","origin","source","data","NgZone","OidcConfigService","configurationLoadedInternal","load","configUrl","switchMap","clientConfiguration","loadUsingConfiguration","catchError","of","toPromise","load_using_stsServer","load_using_custom_stsServer","authWellknownEndpoints","customConfig","clientConfig","ReplaySubject","IFRAME_FOR_SILENT_RENEW_IDENTIFIER","OidcSecuritySilentRenew","initRenew","startRenew","onLoadHandler","removeEventListener","src","OidcSecurityUserService","initUserData","userData","getUserData","setUserData","oidcDataService","UriEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","UrlParserService","getUrlParameter","urlToCheck","name","results","RegExp","exec","OidcSecurityService","_onModuleSetup","_onAuthorizationResult","_onCheckSessionChanged","onConfigurationChange","setupModule","openIdConfiguration","oidcSecurityCheckSession","onCheckSessionChanged","isAuthorized","setIsAuthorized","runTokenValidation","oidcSecuritySilentRenew","boundSilentRenewEvent","silentRenewEventHandler","instanceId_1","Math","random","boundSilentRenewInitEvent_1","detail","dispatchEvent","CustomEvent","_userData","getIsModuleSetup","_isModuleSetup","getIsAuthorized","_isSetupAndAuthorized","getToken","_isAuthorized","getValue","getPayloadFromIdToken","encode","setState","getState","setCustomRequestParameters","params","customRequestParams","authorize","urlHandler","authWellKnownEndpointsLoaded","resetAuthorizationData","code_verifier","code_challenge","createAuthorizeUrl","redirectTo","authorizedCallbackWithCode","authorizedCallbackWithCode$","code","urlParserService","requestTokensWithCode$","requestTokensWithCode","filter","isModuleSetup","requestTokensWithCodeProcedure$","refreshTokensWithCodeProcedure","tokenRequestUrl","post","response","obj","authorizedCodeFlowCallbackProcedure","requestTokensWithCodeProcedure","session_state","throwError","oneLine","templateObject_1","silentRenewRunning","templateObject_2","authorizedCallbackProcedure","authorizedImplicitFlowCallbackProcedure","reduce","resultData","item","parts","shift","authorizedImplicitFlowCallback","href","history","replaceState","title","pathname","AuthorizationState","router","navigate","getSigningKeys","getValidatedStateResult","setAuthorizationData","getUserinfo","oidcSecurityUserService","sub","logoff","id_token_hint","createEndSessionUrl","refreshSession","handleError","status","startCheckingSilentRenew","stopCheckingSilentRenew","_scheduledHeartBeat","runTokenValidationRunning","getEndSessionUrl","stateValidationService","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","append","customParams","forEach","authorizationEndsessionUrl","handleErrorGetSigningKeys","errMsg","Response","json","statusText","silentRenewHeartBeatCheck","Router","moduleSetup","BehaviorSubject","onModuleSetup","race$","tap","race","timer","switchMapTo","shareReplay","isSetupAndAuthorized","AuthModule","forRoot","ngModule","providers","provide","useClass","NgModule"],"mappings":"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","sourcesContent":["export class JwtKeys {\r\n    keys: JwtKey[] = [];\r\n}\r\n\r\nexport class JwtKey {\r\n    kty = '';\r\n    use = '';\r\n    kid = '';\r\n    x5t = '';\r\n    e = '';\r\n    n = '';\r\n    x5c: any[] = [];\r\n}\r\n","import { AuthorizationState } from './authorization-state.enum';\r\nimport { ValidationResult } from './validation-result.enum';\r\n\r\nexport class AuthorizationResult {\r\n    constructor(public authorizationState: AuthorizationState, public validationResult: ValidationResult, public isRenewProcess: boolean = false) {}\r\n}\r\n","export enum AuthorizationState {\r\n    authorized = 'authorized',\r\n    forbidden = 'forbidden',\r\n    unauthorized = 'unauthorized',\r\n}\r\n","export enum ValidationResult {\r\n    NotSet = 'NotSet',\r\n    StatesDoNotMatch = 'StatesDoNotMatch',\r\n    SignatureFailed = 'SignatureFailed',\r\n    IncorrectNonce = 'IncorrectNonce',\r\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n    MaxOffsetExpired = 'MaxOffsetExpired',\r\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n    IncorrectAud = 'IncorrectAud',\r\n    TokenExpired = 'TokenExpired',\r\n    IncorrectAtHash = 'IncorrectAtHash',\r\n    Ok = 'Ok',\r\n    LoginRequired = 'LoginRequired',\r\n    SecureTokenServerError = 'SecureTokenServerError',\r\n}\r\n","import { ValidationResult } from './validation-result.enum';\r\n\r\n// tslint:disable: variable-name\r\nexport class ValidateStateResult {\r\n    constructor(\r\n        public access_token = '',\r\n        public id_token = '',\r\n        public authResponseIsValid = false,\r\n        public decoded_id_token: any = {},\r\n        public state: ValidationResult = ValidationResult.NotSet\r\n    ) {}\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class OidcDataService {\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getWellknownEndpoints<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n\r\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n\r\n    get<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlatformProvider {\r\n    get isBrowser() {\r\n        return isPlatformBrowser(this.platformId);\r\n    }\r\n\r\n    // tslint:disable-next-line: ban-types\r\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { OpenIdConfiguration, OpenIdInternalConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { PlatformProvider } from './platform.provider';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationProvider {\r\n    private DEFAULT_CONFIG: OpenIdInternalConfiguration = {\r\n        stsServer: 'https://please_set',\r\n        redirect_url: 'https://please_set',\r\n        client_id: 'please_set',\r\n        response_type: 'code',\r\n        scope: 'openid email profile',\r\n        hd_param: '',\r\n        post_logout_redirect_uri: 'https://please_set',\r\n        start_checksession: false,\r\n        silent_renew: false,\r\n        silent_renew_url: 'https://please_set',\r\n        silent_renew_offset_in_seconds: 0,\r\n        use_refresh_token: false,\r\n        ignore_nonce_after_refresh: false,\r\n        post_login_route: '/',\r\n        forbidden_route: '/forbidden',\r\n        unauthorized_route: '/unauthorized',\r\n        auto_userinfo: true,\r\n        auto_clean_state_after_authentication: true,\r\n        trigger_authorization_result_event: false,\r\n        log_console_warning_active: true,\r\n        log_console_debug_active: false,\r\n        iss_validation_off: false,\r\n        history_cleanup_off: false,\r\n        max_id_token_iat_offset_allowed_in_seconds: 3,\r\n        isauthorizedrace_timeout_in_seconds: 5,\r\n        disable_iat_offset_validation: false,\r\n        storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    };\r\n\r\n    private INITIAL_AUTHWELLKNOWN: AuthWellKnownEndpoints = {\r\n        issuer: '',\r\n        jwks_uri: '',\r\n        authorization_endpoint: '',\r\n        token_endpoint: '',\r\n        userinfo_endpoint: '',\r\n        end_session_endpoint: '',\r\n        check_session_iframe: '',\r\n        revocation_endpoint: '',\r\n        introspection_endpoint: '',\r\n    };\r\n\r\n    private mergedOpenIdConfiguration: OpenIdInternalConfiguration = this.DEFAULT_CONFIG;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints = this.INITIAL_AUTHWELLKNOWN;\r\n\r\n    private onConfigurationChangeInternal = new Subject<OpenIdConfiguration>();\r\n\r\n    get openIDConfiguration(): OpenIdInternalConfiguration {\r\n        return this.mergedOpenIdConfiguration;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        return this.authWellKnownEndpoints;\r\n    }\r\n\r\n    get onConfigurationChange() {\r\n        return this.onConfigurationChangeInternal.asObservable();\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setup(\r\n        passedOpenIfConfiguration: OpenIdConfiguration | null | undefined,\r\n        passedAuthWellKnownEndpoints: AuthWellKnownEndpoints | null | undefined\r\n    ) {\r\n        this.mergedOpenIdConfiguration = { ...this.mergedOpenIdConfiguration, ...passedOpenIfConfiguration };\r\n        this.setSpecialCases(this.mergedOpenIdConfiguration);\r\n        this.authWellKnownEndpoints = { ...passedAuthWellKnownEndpoints };\r\n        this.onConfigurationChangeInternal.next({ ...this.mergedOpenIdConfiguration });\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.start_checksession = false;\r\n            currentConfig.silent_renew = false;\r\n            currentConfig.use_refresh_token = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    logError(message: any, ...args: any[]) {\r\n        console.error(message, ...args);\r\n    }\r\n\r\n    logWarning(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\r\n\r\n    logDebug(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class IFrameService {\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnParent)) {\r\n            return iFrameOnParent;\r\n        }\r\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnSelf)) {\r\n            return iFrameOnSelf;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\r\n        const sessionIframe = window.document.createElement('iframe');\r\n        sessionIframe.id = identifier;\r\n        this.loggerService.logDebug(sessionIframe);\r\n        sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(sessionIframe);\r\n        return sessionIframe;\r\n    }\r\n\r\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\r\n        try {\r\n            const iFrameElement = window.parent.document.getElementById(identifier);\r\n            if (this.isIFrameElement(iFrameElement)) {\r\n                return iFrameElement;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameElement = window.document.getElementById(identifier);\r\n        if (this.isIFrameElement(iFrameElement)) {\r\n            return iFrameElement;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\r\n        return !!element && element instanceof HTMLIFrameElement;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class EqualityHelperService {\r\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\r\n        if (!value1 || !value2) {\r\n            return false;\r\n        }\r\n\r\n        if (this.bothValuesAreArrays(value1, value2)) {\r\n            return this.arraysEqual(value1 as any[], value2 as any[]);\r\n        }\r\n\r\n        if (this.bothValuesAreStrings(value1, value2)) {\r\n            return value1 === value2;\r\n        }\r\n\r\n        if (this.bothValuesAreObjects(value1, value2)) {\r\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\r\n        }\r\n\r\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\r\n                return value1[0] === value2;\r\n            }\r\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\r\n                return value2[0] === value1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\r\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\r\n    }\r\n\r\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\r\n    }\r\n\r\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsString(value1) && this.valueIsString(value2);\r\n    }\r\n\r\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\r\n        return Array.isArray(value1) && Array.isArray(value2);\r\n    }\r\n\r\n    private valueIsString(value: any) {\r\n        return typeof value === 'string' || value instanceof String;\r\n    }\r\n\r\n    private valueIsObject(value: any) {\r\n        return typeof value === 'object';\r\n    }\r\n\r\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = arr1.length; i--; ) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class TokenHelperService {\r\n    private PARTS_OF_TOKEN = 3;\r\n    constructor(private readonly loggerService: LoggerService) {}\r\n\r\n    getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\r\n\r\n    getHeaderFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 0, encoded);\r\n    }\r\n\r\n    getPayloadFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 1, encoded);\r\n    }\r\n\r\n    getSignatureFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 2, encoded);\r\n    }\r\n\r\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\r\n        const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n        if (encoded) {\r\n            return partOfToken;\r\n        }\r\n\r\n        const result = this.urlBase64Decode(partOfToken);\r\n        return JSON.parse(result);\r\n    }\r\n\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw Error('Illegal base64url string!');\r\n        }\r\n\r\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\r\n\r\n        try {\r\n            // Going backwards: from bytestream, to percent-encoding, to original string.\r\n            return decodeURIComponent(\r\n                decoded\r\n                    .split('')\r\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n                    .join('')\r\n            );\r\n        } catch (err) {\r\n            return decoded;\r\n        }\r\n    }\r\n\r\n    private tokenIsValid(token: string) {\r\n        if (!token) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\r\n            return false;\r\n        }\r\n\r\n        if (!(token as string).includes('.')) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\r\n            return false;\r\n        }\r\n\r\n        const parts = token.split('.');\r\n\r\n        if (parts.length !== this.PARTS_OF_TOKEN) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private extractPartOfToken(token: string, index: number) {\r\n        return token.split('.')[index];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable()\r\nexport abstract class OidcSecurityStorage {\r\n    /**\r\n     * This method must contain the logic to read the storage.\r\n     * @return The value of the given key\r\n     */\r\n    public abstract read(key: string): any;\r\n\r\n    /**\r\n     * This method must contain the logic to write the storage.\r\n     * @param value The value for the given key\r\n     */\r\n    public abstract write(key: string, value: any): void;\r\n}\r\n\r\n@Injectable()\r\nexport class BrowserStorage implements OidcSecurityStorage {\r\n    private hasStorage: boolean;\r\n\r\n    constructor(private configProvider: ConfigurationProvider) {\r\n        this.hasStorage = typeof Storage !== 'undefined';\r\n    }\r\n\r\n    public read(key: string): any {\r\n        if (this.hasStorage) {\r\n            return JSON.parse(this.configProvider.openIDConfiguration.storage.getItem(key + '_' + this.configProvider.openIDConfiguration.client_id));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public write(key: string, value: any): void {\r\n        if (this.hasStorage) {\r\n            value = value === undefined ? null : value;\r\n            this.configProvider.openIDConfiguration.storage.setItem(\r\n                key + '_' + this.configProvider.openIDConfiguration.client_id,\r\n                JSON.stringify(value)\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storageAuthResult = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storageAuthResult);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storageAuthResult, value);\r\n    }\r\n\r\n    private storageAccessToken = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storageAccessToken) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storageAccessToken, value);\r\n    }\r\n\r\n    private storageIdToken = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storageIdToken) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storageIdToken, value);\r\n    }\r\n\r\n    private storageIsAuthorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storageIsAuthorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storageIsAuthorized, value);\r\n    }\r\n\r\n    private storageUserData = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storageUserData);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storageUserData, value);\r\n    }\r\n\r\n    private storageAuthNonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storageAuthNonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storageAuthNonce, value);\r\n    }\r\n\r\n    private storageCodeVerifier = 'code_verifier';\r\n\r\n    public get code_verifier(): string {\r\n        return this.retrieve(this.storageCodeVerifier) || '';\r\n    }\r\n\r\n    public set code_verifier(value: string) {\r\n        this.store(this.storageCodeVerifier, value);\r\n    }\r\n\r\n    private storageAuthStateControl = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storageAuthStateControl) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storageAuthStateControl, value);\r\n    }\r\n\r\n    private storageSessionState = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storageSessionState);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storageSessionState, value);\r\n    }\r\n\r\n    private storageSilentRenewRunning = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storageSilentRenewRunning) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storageSilentRenewRunning, value);\r\n    }\r\n\r\n    private storageCustomRequestParams = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storageCustomRequestParams);\r\n    }\r\n\r\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storageCustomRequestParams, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storageAuthResult, '');\r\n            this.store(this.storageSessionState, '');\r\n            this.store(this.storageSilentRenewRunning, '');\r\n            this.store(this.storageIsAuthorized, false);\r\n            this.store(this.storageAccessToken, '');\r\n            this.store(this.storageIdToken, '');\r\n            this.store(this.storageUserData, '');\r\n            this.store(this.storageCodeVerifier, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storageAccessToken);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storageIdToken);\r\n    }\r\n\r\n    getRefreshToken(): any {\r\n        return this.authResult.refresh_token;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\r\nimport { EqualityHelperService } from './oidc-equality-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\r\n\r\n    constructor(\r\n        private arrayHelperService: EqualityHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n    // (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n    // (possibly allowing for some small leeway to account for clock skew).\r\n    // tslint:disable-next-line: variable-name\r\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\r\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\r\n\r\n        // Token not expired?\r\n        return tokenNotExpired;\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\r\n    // https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\r\n    // 1970- 01 - 01T00: 00: 00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\r\n        if (disableIatOffsetValidation) {\r\n            return true;\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\r\n\r\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\r\n\r\n        if (dateTimeIatIdToken == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTimeIatIdToken.valueOf()) + ' < ' + maxOffsetAllowedInSeconds * 1000\r\n        );\r\n        return new Date().valueOf() - dateTimeIatIdToken.valueOf() < maxOffsetAllowedInSeconds * 1000;\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n\r\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\r\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\r\n    // The current spec is ambiguous and Keycloak does send it.\r\n    validate_id_token_nonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\r\n        const isFromRefreshToken =\r\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\r\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    // tslint:disable-next-line: variable-name\r\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, localState: any): boolean {\r\n        if ((state as string) !== (localState as string)) {\r\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(idTokenSub: any, userdataSub: any): boolean {\r\n        if ((idTokenSub as string) !== (userdataSub as string)) {\r\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + idTokenSub + ' userdata_sub:' + userdataSub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(idToken: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\r\n\r\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = headerData.kid;\r\n        const alg = headerData.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!headerData.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(responseType: string): boolean {\r\n        if (responseType === 'id_token token' || responseType === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        if (responseType === 'code') {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(accessToken: any, atHash: any, isCodeFlow: boolean): boolean {\r\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\r\n\r\n        // The at_hash is optional for the code flow\r\n        if (isCodeFlow) {\r\n            if (!(atHash as string)) {\r\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const testdata = this.generate_at_hash('' + accessToken);\r\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\r\n        if (testdata === (atHash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash('' + decodeURIComponent(accessToken));\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (atHash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(accessToken: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(accessToken, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n\r\n    generate_code_verifier(codeChallenge: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\r\n        const testdata = hextob64u(hash);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\n\r\n@Injectable()\r\nexport class StateValidationService {\r\n    constructor(\r\n        public oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        const toReturn = new ValidateStateResult();\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            toReturn.state = ValidationResult.StatesDoNotMatch;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n            this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n        ) {\r\n            toReturn.access_token = result.access_token;\r\n        }\r\n\r\n        if (result.id_token) {\r\n            toReturn.id_token = result.id_token;\r\n\r\n            toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\r\n\r\n            if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\r\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\r\n                toReturn.state = ValidationResult.SignatureFailed;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_nonce(\r\n                    toReturn.decoded_id_token,\r\n                    this.oidcSecurityCommon.authNonce,\r\n                    this.configurationProvider.openIDConfiguration.ignore_nonce_after_refresh\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\r\n                toReturn.state = ValidationResult.IncorrectNonce;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\r\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\r\n                    toReturn.decoded_id_token,\r\n                    this.configurationProvider.openIDConfiguration.max_id_token_iat_offset_allowed_in_seconds,\r\n                    this.configurationProvider.openIDConfiguration.disable_iat_offset_validation\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n                toReturn.state = ValidationResult.MaxOffsetExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                if (this.configurationProvider.openIDConfiguration.iss_validation_off) {\r\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\r\n                } else if (\r\n                    !this.configurationProvider.openIDConfiguration.iss_validation_off &&\r\n                    !this.oidcSecurityValidation.validate_id_token_iss(\r\n                        toReturn.decoded_id_token,\r\n                        this.configurationProvider.wellKnownEndpoints.issuer\r\n                    )\r\n                ) {\r\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n                    this.handleUnsuccessfulValidation();\r\n                    return toReturn;\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_aud(\r\n                    toReturn.decoded_id_token,\r\n                    this.configurationProvider.openIDConfiguration.client_id\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\r\n                toReturn.state = ValidationResult.IncorrectAud;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\r\n                this.loggerService.logWarning('authorizedCallback token expired');\r\n                toReturn.state = ValidationResult.TokenExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\r\n        }\r\n\r\n        // flow id_token token\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'id_token token' &&\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'code'\r\n        ) {\r\n            toReturn.authResponseIsValid = true;\r\n            toReturn.state = ValidationResult.Ok;\r\n            this.handleSuccessfulValidation();\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\r\n                toReturn.access_token,\r\n                toReturn.decoded_id_token.at_hash,\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) ||\r\n            !toReturn.access_token\r\n        ) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\r\n            toReturn.state = ValidationResult.IncorrectAtHash;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        toReturn.authResponseIsValid = true;\r\n        toReturn.state = ValidationResult.Ok;\r\n        this.handleSuccessfulValidation();\r\n        return toReturn;\r\n    }\r\n\r\n    private handleSuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\r\n\r\n    private handleUnsuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { from, Observable, Observer, Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private scheduledHeartBeat: any;\r\n    private lastIFrameRefresh = 0;\r\n    private outstandingMessages = 0;\r\n    private heartBeatInterval = 3000;\r\n    private iframeRefreshInterval = 60000;\r\n    private checkSessionChanged = new Subject<any>();\r\n\r\n    public get onCheckSessionChanged(): Observable<any> {\r\n        return this.checkSessionChanged.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private iFrameService: IFrameService,\r\n        private zone: NgZone,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    private doesSessionExist(): boolean {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n\r\n        if (!existingIFrame) {\r\n            return false;\r\n        }\r\n\r\n        this.sessionIframe = existingIFrame;\r\n        return true;\r\n    }\r\n\r\n    private init() {\r\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n            return from([this]);\r\n        }\r\n\r\n        if (!this.doesSessionExist()) {\r\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n        }\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\r\n            return;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints.check_session_iframe) {\r\n            this.sessionIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.check_session_iframe);\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\r\n            this.sessionIframe.onload = () => {\r\n                this.lastIFrameRefresh = Date.now();\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: string): void {\r\n        if (this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.pollServerSession(clientId);\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (!this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.clearScheduledHeartBeat();\r\n    }\r\n\r\n    private pollServerSession(clientId: string) {\r\n        const pollServerSessionRecur = () => {\r\n            this.init()\r\n                .pipe(take(1))\r\n                .subscribe(() => {\r\n                    if (this.sessionIframe && clientId) {\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        const sessionState = this.oidcSecurityCommon.sessionState;\r\n                        if (sessionState) {\r\n                            this.outstandingMessages++;\r\n                            this.sessionIframe.contentWindow.postMessage(\r\n                                clientId + ' ' + sessionState,\r\n                                this.configurationProvider.openIDConfiguration.stsServer\r\n                            );\r\n                        } else {\r\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\r\n                            this.checkSessionChanged.next();\r\n                        }\r\n                    } else {\r\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\r\n                        this.loggerService.logDebug(clientId);\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        // this.init();\r\n                    }\r\n\r\n                    // after sending three messages with no response, fail.\r\n                    if (this.outstandingMessages > 3) {\r\n                        this.loggerService.logError(\r\n                            `OidcSecurityCheckSession not receiving check session response messages.\r\n                            Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\r\n                        );\r\n                        this.checkSessionChanged.next();\r\n                    }\r\n\r\n                    this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\r\n                });\r\n        };\r\n\r\n        this.outstandingMessages = 0;\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\r\n        });\r\n    }\r\n    private clearScheduledHeartBeat() {\r\n        clearTimeout(this.scheduledHeartBeat);\r\n        this.scheduledHeartBeat = null;\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        this.outstandingMessages = 0;\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.configurationProvider.openIDConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this.checkSessionChanged.next();\r\n            } else {\r\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, ReplaySubject } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nexport interface ConfigResult {\r\n    authWellknownEndpoints: any;\r\n    customConfig: any;\r\n}\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n    private configurationLoadedInternal = new ReplaySubject<ConfigResult>(1);\r\n\r\n    public get onConfigurationLoaded(): Observable<ConfigResult> {\r\n        return this.configurationLoadedInternal.asObservable();\r\n    }\r\n\r\n    constructor(private readonly loggerService: LoggerService, private readonly httpClient: HttpClient) {}\r\n\r\n    load(configUrl: string): Promise<boolean> {\r\n        return this.httpClient\r\n            .get(configUrl)\r\n            .pipe(\r\n                switchMap(clientConfiguration => {\r\n                    return this.loadUsingConfiguration(clientConfiguration);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    load_using_stsServer(stsServer: string): Promise<boolean> {\r\n        return this.loadUsingConfiguration({ stsServer }).toPromise();\r\n    }\r\n\r\n    load_using_custom_stsServer(url: string): Promise<boolean> {\r\n        return this.httpClient\r\n            .get(url)\r\n            .pipe(\r\n                switchMap(wellKnownEndpoints => {\r\n                    this.configurationLoadedInternal.next({\r\n                        authWellknownEndpoints: wellKnownEndpoints,\r\n                        customConfig: { stsServer: url },\r\n                    });\r\n                    return of(true);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    private loadUsingConfiguration(clientConfig: any): Observable<boolean> {\r\n        if (!clientConfig.stsServer) {\r\n            this.loggerService.logError(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`, clientConfig);\r\n            throw new Error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`);\r\n        }\r\n\r\n        const url = `${clientConfig.stsServer}/.well-known/openid-configuration`;\r\n\r\n        return this.httpClient.get(url).pipe(\r\n            switchMap(wellKnownEndpoints => {\r\n                this.configurationLoadedInternal.next({\r\n                    authWellknownEndpoints: wellKnownEndpoints,\r\n                    customConfig: clientConfig,\r\n                });\r\n                return of(true);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(`OidcConfigService 'load_using_stsServer' threw an error on calling ${url}`, error);\r\n                this.configurationLoadedInternal.next(undefined);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\r\n\r\n    initRenew(): HTMLIFrameElement {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        if (!existingIFrame) {\r\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        }\r\n        return existingIFrame;\r\n    }\r\n\r\n    startRenew(url: string): Observable<void> {\r\n        const sessionIframe = this.initRenew();\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        return new Observable<void>(observer => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                observer.next(undefined);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n            return () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n\r\n            throw Error('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        const canGetUserData = this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.userinfo_endpoint;\r\n\r\n        if (!canGetUserData) {\r\n            this.loggerService.logError(\r\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n            );\r\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(this.configurationProvider.wellKnownEndpoints.userinfo_endpoint || '', token);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport class UriEncoder implements HttpParameterCodec {\r\n    encodeKey(key: string): string {\r\n        return encodeURIComponent(key);\r\n    }\r\n\r\n    encodeValue(value: string): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n\r\n    decodeKey(key: string): string {\r\n        return decodeURIComponent(key);\r\n    }\r\n\r\n    decodeValue(value: string): string {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlParserService {\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, from, Observable, of, Subject, throwError, timer } from 'rxjs';\r\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { OpenIdConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { AuthorizationResult } from '../models/authorization-result';\r\nimport { AuthorizationState } from '../models/authorization-state.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { UrlParserService } from './url-parser.service';\r\nimport { oneLine } from 'common-tags';\r\n\r\n// tslint:disable: variable-name\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    private _onModuleSetup = new Subject<boolean>();\r\n    private _onCheckSessionChanged = new Subject<boolean>();\r\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\r\n\r\n    public get onModuleSetup(): Observable<boolean> {\r\n        return this._onModuleSetup.asObservable();\r\n    }\r\n\r\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\r\n        return this._onAuthorizationResult.asObservable();\r\n    }\r\n\r\n    public get onCheckSessionChanged(): Observable<boolean> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    public get onConfigurationChange(): Observable<OpenIdConfiguration> {\r\n        return this.configurationProvider.onConfigurationChange;\r\n    }\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n\r\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\r\n\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isSetupAndAuthorized: Observable<boolean>;\r\n\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone,\r\n        private readonly httpClient: HttpClient,\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly urlParserService: UrlParserService\r\n    ) {\r\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\r\n            this.moduleSetup = true;\r\n            this._isModuleSetup.next(true);\r\n        });\r\n\r\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\r\n            filter((isModuleSetup: boolean) => isModuleSetup),\r\n            switchMap(() => {\r\n                if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                    this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`);\r\n                    return from([true]);\r\n                }\r\n\r\n                const race$ = this._isAuthorized.asObservable().pipe(\r\n                    filter((isAuthorized: boolean) => isAuthorized),\r\n                    take(1),\r\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\r\n                    // tslint:disable-next-line: deprecation\r\n                    race(\r\n                        this._onAuthorizationResult.pipe(\r\n                            take(1),\r\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\r\n                            map(() => true)\r\n                        ),\r\n                        timer(this.configurationProvider.openIDConfiguration.isauthorizedrace_timeout_in_seconds * 1000).pipe(\r\n                            // backup, if nothing happens after X seconds stop waiting and emit (5s Default)\r\n                            tap(() => {\r\n                                this.resetAuthorizationData(false);\r\n                                this.oidcSecurityCommon.authNonce = '';\r\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\r\n                            }),\r\n                            map(() => true)\r\n                        )\r\n                    )\r\n                );\r\n\r\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\r\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\r\n                    // login not running, or a second silent renew, user must login first before this will work.\r\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\r\n                    this.refreshSession().subscribe();\r\n                }\r\n\r\n                return race$;\r\n            }),\r\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\r\n            switchMapTo(this._isAuthorized.asObservable()),\r\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\r\n            shareReplay(1)\r\n        );\r\n\r\n        this._isSetupAndAuthorized\r\n            .pipe(filter(() => this.configurationProvider.openIDConfiguration.start_checksession))\r\n            .subscribe(isSetupAndAuthorized => {\r\n                if (isSetupAndAuthorized) {\r\n                    this.oidcSecurityCheckSession.startCheckingSession(this.configurationProvider.openIDConfiguration.client_id);\r\n                } else {\r\n                    this.oidcSecurityCheckSession.stopCheckingSession();\r\n                }\r\n            });\r\n    }\r\n\r\n    setupModule(openIdConfiguration: OpenIdConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\r\n        this.configurationProvider.setup(openIdConfiguration, authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (\r\n                this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken || this.oidcSecurityCommon.accessToken,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n            }\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\r\n\r\n        this._onModuleSetup.next();\r\n\r\n        if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            this.oidcSecuritySilentRenew.initRenew();\r\n\r\n            // Support authorization via DOM events.\r\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n            //      We only ever want the latest setup service to be reacting to this event.\r\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n            const instanceId = Math.random();\r\n\r\n            const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n                if (e.detail !== instanceId) {\r\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                }\r\n            }).bind(this);\r\n\r\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n            window.dispatchEvent(\r\n                new CustomEvent('oidc-silent-renew-init', {\r\n                    detail: instanceId,\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserData<T = any>(): Observable<T> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsModuleSetup(): Observable<boolean> {\r\n        return this._isModuleSetup.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isSetupAndAuthorized;\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getRefreshToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getRefreshToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    // Code Flow with PCKE or Implicit Flow\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.configurationProvider.openIDConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            // Implicit Flow\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        if (urlHandler) {\r\n            urlHandler(url);\r\n        } else {\r\n            this.redirectTo(url);\r\n        }\r\n    }\r\n\r\n    // Code Flow\r\n    authorizedCallbackWithCode(urlToCheck: string) {\r\n        this.authorizedCallbackWithCode$(urlToCheck).subscribe();\r\n    }\r\n    authorizedCallbackWithCode$(urlToCheck: string): Observable<void> {\r\n        const code = this.urlParserService.getUrlParameter(urlToCheck, 'code');\r\n        const state = this.urlParserService.getUrlParameter(urlToCheck, 'state');\r\n        const sessionState = this.urlParserService.getUrlParameter(urlToCheck, 'session_state') || null;\r\n\r\n        if (!state) {\r\n            this.loggerService.logDebug('no state in url');\r\n            return of();\r\n        }\r\n        if (!code) {\r\n            this.loggerService.logDebug('no code in url');\r\n            return of();\r\n        }\r\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\r\n        return this.requestTokensWithCode$(code, state, sessionState);\r\n    }\r\n\r\n    // Code Flow\r\n    requestTokensWithCode(code: string, state: string, sessionState: string | null): void {\r\n        this.requestTokensWithCode$(code, state, sessionState).subscribe();\r\n    }\r\n\r\n    requestTokensWithCode$(code: string, state: string, sessionState: string | null): Observable<void> {\r\n        return this._isModuleSetup.pipe(\r\n            filter(isModuleSetup => !!isModuleSetup),\r\n            take(1),\r\n            switchMap(() => {\r\n                return this.requestTokensWithCodeProcedure$(code, state, sessionState);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Refresh Token\r\n    refreshTokensWithCodeProcedure(code: string, state: string): Observable<any> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        const data = `grant_type=refresh_token&client_id=${this.configurationProvider.openIDConfiguration.client_id}&refresh_token=${code}`;\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\r\n            map(response => {\r\n                this.loggerService.logDebug('token refresh response: ' + JSON.stringify(response));\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n\r\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null): void {\r\n        this.requestTokensWithCodeProcedure$(code, state, session_state).subscribe();\r\n    }\r\n\r\n    // Code Flow with PCKE\r\n    requestTokensWithCodeProcedure$(code: string, state: string, session_state: string | null): Observable<void> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            // ValidationResult.StatesDoNotMatch;\r\n            return throwError(new Error('incorrect state'));\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        let data = oneLine`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\r\n            &code_verifier=${this.oidcSecurityCommon.code_verifier}\r\n            &code=${code}&redirect_uri=${this.configurationProvider.openIDConfiguration.redirect_url}`;\r\n\r\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\r\n            data = oneLine`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\r\n                &code_verifier=${this.oidcSecurityCommon.code_verifier}\r\n                &code=${code}\r\n                &redirect_uri=${this.configurationProvider.openIDConfiguration.silent_renew_url}`;\r\n        }\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\r\n            map(response => {\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n                obj.session_state = session_state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n\r\n                return undefined;\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Code Flow\r\n    private authorizedCodeFlowCallbackProcedure(result: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash.split('&').reduce((resultData: any, item: string) => {\r\n            const parts = item.split('=');\r\n            resultData[parts.shift() as string] = parts.join('=');\r\n            return resultData;\r\n        }, {});\r\n\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    authorizedImplicitFlowCallback(hash?: string) {\r\n        this._isModuleSetup\r\n            .pipe(\r\n                filter((isModuleSetup: boolean) => isModuleSetup),\r\n                take(1)\r\n            )\r\n            .subscribe(() => {\r\n                this.authorizedImplicitFlowCallbackProcedure(hash);\r\n            });\r\n    }\r\n\r\n    private redirectTo(url: string) {\r\n        window.location.href = url;\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\r\n        this.oidcSecurityCommon.authResult = result;\r\n\r\n        if (!this.configurationProvider.openIDConfiguration.history_cleanup_off && !isRenewProcess) {\r\n            // reset the history to remove the tokens\r\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\r\n        } else {\r\n            this.loggerService.logDebug('history clean up inactive');\r\n        }\r\n\r\n        if (result.error) {\r\n            if (isRenewProcess) {\r\n                this.loggerService.logDebug(result);\r\n            } else {\r\n                this.loggerService.logWarning(result);\r\n            }\r\n\r\n            if ((result.error as string) === 'login_required') {\r\n                this._onAuthorizationResult.next(\r\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, isRenewProcess)\r\n                );\r\n            } else {\r\n                this._onAuthorizationResult.next(\r\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError, isRenewProcess)\r\n                );\r\n            }\r\n\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.authNonce = '';\r\n\r\n            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug(result);\r\n\r\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\r\n\r\n            this.getSigningKeys().subscribe(\r\n                jwtKeys => {\r\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\r\n\r\n                    if (validationResult.authResponseIsValid) {\r\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\r\n                                response => {\r\n                                    if (response) {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                                        }\r\n                                    } else {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                                        }\r\n                                    }\r\n                                },\r\n                                err => {\r\n                                    /* Something went wrong while getting signing key */\r\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (!isRenewProcess) {\r\n                                // userData is set to the id_token decoded, auto get user data set to false\r\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\r\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n                            }\r\n\r\n                            this.runTokenValidation();\r\n\r\n                            this._onAuthorizationResult.next(\r\n                                new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\r\n                            );\r\n                            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // something went wrong\r\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\r\n                        this.loggerService.logWarning(window.location.hash);\r\n                        this.resetAuthorizationData(false);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        this._onAuthorizationResult.next(\r\n                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\r\n                        );\r\n                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    /* Something went wrong while getting signing key */\r\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\r\n                    this.oidcSecurityCommon.silentRenewRunning = '';\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (\r\n                this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) {\r\n                if (isRenewProcess && this._userData.value) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\r\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\r\n\r\n                        const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\r\n                            this.setUserData(userData);\r\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\r\n\r\n                            this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                            this.runTokenValidation();\r\n                            observer.next(true);\r\n                        } else {\r\n                            // something went wrong, userdata sub does not match that from id_token\r\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                            this.resetAuthorizationData(false);\r\n                            observer.next(false);\r\n                        }\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                this.runTokenValidation();\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff(urlHandler?: (url: string) => any) {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (this.configurationProvider.openIDConfiguration.start_checksession && this.checkSessionChanged) {\r\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\r\n                } else if (urlHandler) {\r\n                    urlHandler(url);\r\n                } else {\r\n                    this.redirectTo(url);\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<boolean> {\r\n        if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return of(false);\r\n        }\r\n\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            if (this.configurationProvider.openIDConfiguration.use_refresh_token) {\r\n                // try using refresh token\r\n                const refresh_token = this.oidcSecurityCommon.getRefreshToken();\r\n                if (refresh_token) {\r\n                    this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\r\n                    // Nonce is not used with refresh tokens; but Keycloak may send it anyway\r\n                    this.oidcSecurityCommon.authNonce = OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n                    return this.refreshTokensWithCodeProcedure(refresh_token, state);\r\n                } else {\r\n                    this.loggerService.logDebug('no refresh token found, using silent renew');\r\n                }\r\n            }\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        return this.oidcSecuritySilentRenew.startRenew(url).pipe(map(() => true));\r\n    }\r\n\r\n    handleError(error: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenewRunning = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenewRunning);\r\n\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    resetAuthorizationData(isRenewProcess: boolean): void {\r\n        if (!isRenewProcess) {\r\n            if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n            this.setIsAuthorized(false);\r\n        }\r\n    }\r\n\r\n    getEndSessionUrl(): string | undefined {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        isCodeFlow: boolean,\r\n        code_challenge: string,\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('client_id', this.configurationProvider.openIDConfiguration.client_id);\r\n        params = params.append('redirect_uri', redirect_url);\r\n        params = params.append('response_type', this.configurationProvider.openIDConfiguration.response_type);\r\n        params = params.append('scope', this.configurationProvider.openIDConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (isCodeFlow) {\r\n            params = params.append('code_challenge', code_challenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.configurationProvider.openIDConfiguration.hd_param) {\r\n            params = params.append('hd', this.configurationProvider.openIDConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append('post_logout_redirect_uri', this.configurationProvider.openIDConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logDebug('jwks_uri: ' + this.configurationProvider.wellKnownEndpoints.jwks_uri);\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwks_uri || '')\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\r\n\r\n        /**\r\n         *   First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n         *   Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            this.loggerService.logDebug(\r\n                'silentRenewHeartBeatCheck\\r\\n' +\r\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\r\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\r\n                    `\\t_userData.value: ${!!this._userData.value}`\r\n            );\r\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\r\n                if (\r\n                    this.oidcSecurityValidation.isTokenExpired(\r\n                        this.oidcSecurityCommon.idToken,\r\n                        this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                    )\r\n                ) {\r\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(\r\n                            () => {\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            },\r\n                            (err: any) => {\r\n                                this.loggerService.logError('Error: ' + err);\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            }\r\n                        );\r\n                        /* In this situation, we schedule a heartbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            const urlParts = e.detail.toString().split('?');\r\n            const params = new HttpParams({\r\n                fromString: urlParts[1],\r\n            });\r\n            const code = params.get('code');\r\n            const state = params.get('state');\r\n            const session_state = params.get('session_state');\r\n            const error = params.get('error');\r\n            if (code && state) {\r\n                this.requestTokensWithCodeProcedure(code, state, session_state);\r\n            }\r\n            if (error) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, true));\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.authNonce = '';\r\n                this.loggerService.logDebug(e.detail.toString());\r\n            }\r\n        } else {\r\n            // ImplicitFlow\r\n            this.authorizedImplicitFlowCallback(e.detail);\r\n        }\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { IFrameService } from '../services/existing-iframe.service';\r\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\r\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\r\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\r\nimport { LoggerService } from '../services/oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\r\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\r\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { OidcSecurityService } from '../services/oidc.security.service';\r\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\r\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\r\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\r\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\r\n\r\n@NgModule()\r\nexport class AuthModule {\r\n    static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: AuthModule,\r\n            providers: [\r\n                OidcConfigService,\r\n                OidcSecurityService,\r\n                OidcSecurityValidation,\r\n                OidcSecurityCheckSession,\r\n                OidcSecuritySilentRenew,\r\n                OidcSecurityUserService,\r\n                OidcSecurityCommon,\r\n                TokenHelperService,\r\n                LoggerService,\r\n                IFrameService,\r\n                EqualityHelperService,\r\n                OidcDataService,\r\n                StateValidationService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: token.storage || BrowserStorage,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n    new (...args: any[]): T;\r\n}\r\n\r\nexport interface Token {\r\n    storage?: Type<any>;\r\n}\r\n"]}