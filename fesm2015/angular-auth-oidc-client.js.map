{"version":3,"file":"angular-auth-oidc-client.js.map","sources":["ng://angular-auth-oidc-client/lib/models/authorization-result.ts","ng://angular-auth-oidc-client/lib/models/authorization-state.enum.ts","ng://angular-auth-oidc-client/lib/models/jwtkeys.ts","ng://angular-auth-oidc-client/lib/models/validation-result.enum.ts","ng://angular-auth-oidc-client/lib/models/validate-state-result.model.ts","ng://angular-auth-oidc-client/lib/data-services/oidc-data.service.ts","ng://angular-auth-oidc-client/lib/services/platform.provider.ts","ng://angular-auth-oidc-client/lib/services/auth-configuration.provider.ts","ng://angular-auth-oidc-client/lib/services/oidc.logger.service.ts","ng://angular-auth-oidc-client/lib/services/existing-iframe.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-equality-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc-token-helper.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.storage.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.common.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.validation.ts","ng://angular-auth-oidc-client/lib/services/oidc-security-state-validation.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.check-session.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.config.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.silent-renew.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.user-service.ts","ng://angular-auth-oidc-client/lib/services/uri-encoder.ts","ng://angular-auth-oidc-client/lib/services/url-parser.service.ts","ng://angular-auth-oidc-client/lib/services/oidc.security.service.ts","ng://angular-auth-oidc-client/lib/modules/auth.module.ts"],"sourcesContent":["import { AuthorizationState } from './authorization-state.enum';\r\nimport { ValidationResult } from './validation-result.enum';\r\n\r\nexport class AuthorizationResult {\r\n    constructor(public authorizationState: AuthorizationState, public validationResult: ValidationResult, public isRenewProcess: boolean = false) {}\r\n}\r\n","export enum AuthorizationState {\r\n    authorized = 'authorized',\r\n    forbidden = 'forbidden',\r\n    unauthorized = 'unauthorized',\r\n}\r\n","export class JwtKeys {\r\n    keys: JwtKey[] = [];\r\n}\r\n\r\nexport class JwtKey {\r\n    kty = '';\r\n    use = '';\r\n    kid = '';\r\n    x5t = '';\r\n    e = '';\r\n    n = '';\r\n    x5c: any[] = [];\r\n}\r\n","export enum ValidationResult {\r\n    NotSet = 'NotSet',\r\n    StatesDoNotMatch = 'StatesDoNotMatch',\r\n    SignatureFailed = 'SignatureFailed',\r\n    IncorrectNonce = 'IncorrectNonce',\r\n    RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n    MaxOffsetExpired = 'MaxOffsetExpired',\r\n    IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n    NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n    IncorrectAud = 'IncorrectAud',\r\n    TokenExpired = 'TokenExpired',\r\n    IncorrectAtHash = 'IncorrectAtHash',\r\n    Ok = 'Ok',\r\n    LoginRequired = 'LoginRequired',\r\n    SecureTokenServerError = 'SecureTokenServerError',\r\n}\r\n","import { ValidationResult } from './validation-result.enum';\r\n\r\n// tslint:disable: variable-name\r\nexport class ValidateStateResult {\r\n    constructor(\r\n        public access_token = '',\r\n        public id_token = '',\r\n        public authResponseIsValid = false,\r\n        public decoded_id_token: any = {},\r\n        public state: ValidationResult = ValidationResult.NotSet\r\n    ) {}\r\n}\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class OidcDataService {\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n    getWellknownEndpoints<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n\r\n    getIdentityUserData<T>(url: string, token: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n        headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n\r\n    get<T>(url: string): Observable<T> {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        return this.httpClient.get<T>(url, {\r\n            headers,\r\n        });\r\n    }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlatformProvider {\r\n    get isBrowser() {\r\n        return isPlatformBrowser(this.platformId);\r\n    }\r\n\r\n    // tslint:disable-next-line: ban-types\r\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { OpenIdConfiguration, OpenIdInternalConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { PlatformProvider } from './platform.provider';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationProvider {\r\n    private DEFAULT_CONFIG: OpenIdInternalConfiguration = {\r\n        stsServer: 'https://please_set',\r\n        redirect_url: 'https://please_set',\r\n        client_id: 'please_set',\r\n        response_type: 'code',\r\n        scope: 'openid email profile',\r\n        hd_param: '',\r\n        post_logout_redirect_uri: 'https://please_set',\r\n        start_checksession: false,\r\n        silent_renew: false,\r\n        silent_renew_url: 'https://please_set',\r\n        silent_renew_offset_in_seconds: 0,\r\n        use_refresh_token: false,\r\n        ignore_nonce_after_refresh: false,\r\n        post_login_route: '/',\r\n        forbidden_route: '/forbidden',\r\n        unauthorized_route: '/unauthorized',\r\n        auto_userinfo: true,\r\n        auto_clean_state_after_authentication: true,\r\n        trigger_authorization_result_event: false,\r\n        log_console_warning_active: true,\r\n        log_console_debug_active: false,\r\n        iss_validation_off: false,\r\n        history_cleanup_off: false,\r\n        max_id_token_iat_offset_allowed_in_seconds: 3,\r\n        isauthorizedrace_timeout_in_seconds: 5,\r\n        disable_iat_offset_validation: false,\r\n        storage: typeof Storage !== 'undefined' ? sessionStorage : null,\r\n    };\r\n\r\n    private INITIAL_AUTHWELLKNOWN: AuthWellKnownEndpoints = {\r\n        issuer: '',\r\n        jwks_uri: '',\r\n        authorization_endpoint: '',\r\n        token_endpoint: '',\r\n        userinfo_endpoint: '',\r\n        end_session_endpoint: '',\r\n        check_session_iframe: '',\r\n        revocation_endpoint: '',\r\n        introspection_endpoint: '',\r\n    };\r\n\r\n    private mergedOpenIdConfiguration: OpenIdInternalConfiguration = this.DEFAULT_CONFIG;\r\n    private authWellKnownEndpoints: AuthWellKnownEndpoints = this.INITIAL_AUTHWELLKNOWN;\r\n\r\n    private onConfigurationChangeInternal = new Subject<OpenIdConfiguration>();\r\n\r\n    get openIDConfiguration(): OpenIdInternalConfiguration {\r\n        return this.mergedOpenIdConfiguration;\r\n    }\r\n\r\n    get wellKnownEndpoints(): AuthWellKnownEndpoints {\r\n        return this.authWellKnownEndpoints;\r\n    }\r\n\r\n    get onConfigurationChange() {\r\n        return this.onConfigurationChangeInternal.asObservable();\r\n    }\r\n\r\n    constructor(private platformProvider: PlatformProvider) {}\r\n\r\n    setup(\r\n        passedOpenIfConfiguration: OpenIdConfiguration | null | undefined,\r\n        passedAuthWellKnownEndpoints: AuthWellKnownEndpoints | null | undefined\r\n    ) {\r\n        this.mergedOpenIdConfiguration = { ...this.mergedOpenIdConfiguration, ...passedOpenIfConfiguration };\r\n        this.setSpecialCases(this.mergedOpenIdConfiguration);\r\n        this.authWellKnownEndpoints = { ...passedAuthWellKnownEndpoints };\r\n        this.onConfigurationChangeInternal.next({ ...this.mergedOpenIdConfiguration });\r\n    }\r\n\r\n    private setSpecialCases(currentConfig: OpenIdConfiguration) {\r\n        if (!this.platformProvider.isBrowser) {\r\n            currentConfig.start_checksession = false;\r\n            currentConfig.silent_renew = false;\r\n            currentConfig.use_refresh_token = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n    constructor(private configurationProvider: ConfigurationProvider) {}\r\n\r\n    logError(message: any, ...args: any[]) {\r\n        console.error(message, ...args);\r\n    }\r\n\r\n    logWarning(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\r\n\r\n    logDebug(message: any) {\r\n        if (this.configurationProvider.openIDConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class IFrameService {\r\n    constructor(private loggerService: LoggerService) {}\r\n\r\n    getExistingIFrame(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnParent)) {\r\n            return iFrameOnParent;\r\n        }\r\n        const iFrameOnSelf = this.getIFrameFromWindow(identifier);\r\n        if (this.isIFrameElement(iFrameOnSelf)) {\r\n            return iFrameOnSelf;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\r\n        const sessionIframe = window.document.createElement('iframe');\r\n        sessionIframe.id = identifier;\r\n        this.loggerService.logDebug(sessionIframe);\r\n        sessionIframe.style.display = 'none';\r\n        window.document.body.appendChild(sessionIframe);\r\n        return sessionIframe;\r\n    }\r\n\r\n    private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\r\n        try {\r\n            const iFrameElement = window.parent.document.getElementById(identifier);\r\n            if (this.isIFrameElement(iFrameElement)) {\r\n                return iFrameElement;\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\r\n        const iFrameElement = window.document.getElementById(identifier);\r\n        if (this.isIFrameElement(iFrameElement)) {\r\n            return iFrameElement;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\r\n        return !!element && element instanceof HTMLIFrameElement;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class EqualityHelperService {\r\n    areEqual(value1: string | any[] | object | null | undefined, value2: string | any[] | object | null | undefined) {\r\n        if (!value1 || !value2) {\r\n            return false;\r\n        }\r\n\r\n        if (this.bothValuesAreArrays(value1, value2)) {\r\n            return this.arraysEqual(value1 as any[], value2 as any[]);\r\n        }\r\n\r\n        if (this.bothValuesAreStrings(value1, value2)) {\r\n            return value1 === value2;\r\n        }\r\n\r\n        if (this.bothValuesAreObjects(value1, value2)) {\r\n            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\r\n        }\r\n\r\n        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n            if (Array.isArray(value1) && this.valueIsString(value2)) {\r\n                return value1[0] === value2;\r\n            }\r\n            if (Array.isArray(value2) && this.valueIsString(value1)) {\r\n                return value2[0] === value1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private oneValueIsStringAndTheOtherIsArray(value1: string | object | any[], value2: string | object | any[]) {\r\n        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\r\n    }\r\n\r\n    private bothValuesAreObjects(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsObject(value1) && this.valueIsObject(value2);\r\n    }\r\n\r\n    private bothValuesAreStrings(value1: string | object | any[], value2: string | object | any[]) {\r\n        return this.valueIsString(value1) && this.valueIsString(value2);\r\n    }\r\n\r\n    private bothValuesAreArrays(value1: string | object | any[], value2: string | object | any[]) {\r\n        return Array.isArray(value1) && Array.isArray(value2);\r\n    }\r\n\r\n    private valueIsString(value: any) {\r\n        return typeof value === 'string' || value instanceof String;\r\n    }\r\n\r\n    private valueIsObject(value: any) {\r\n        return typeof value === 'object';\r\n    }\r\n\r\n    private arraysEqual(arr1: Array<string>, arr2: Array<string>) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = arr1.length; i--; ) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n@Injectable()\r\nexport class TokenHelperService {\r\n    private PARTS_OF_TOKEN = 3;\r\n    constructor(private readonly loggerService: LoggerService) {}\r\n\r\n    getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\r\n\r\n    getHeaderFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 0, encoded);\r\n    }\r\n\r\n    getPayloadFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 1, encoded);\r\n    }\r\n\r\n    getSignatureFromToken(token: any, encoded: boolean) {\r\n        if (!this.tokenIsValid(token)) {\r\n            return {};\r\n        }\r\n\r\n        return this.getPartOfToken(token, 2, encoded);\r\n    }\r\n\r\n    private getPartOfToken(token: string, index: number, encoded: boolean) {\r\n        const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n        if (encoded) {\r\n            return partOfToken;\r\n        }\r\n\r\n        const result = this.urlBase64Decode(partOfToken);\r\n        return JSON.parse(result);\r\n    }\r\n\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw Error('Illegal base64url string!');\r\n        }\r\n\r\n        const decoded = typeof window !== 'undefined' ? window.atob(output) : new Buffer(output, 'base64').toString('binary');\r\n\r\n        try {\r\n            // Going backwards: from bytestream, to percent-encoding, to original string.\r\n            return decodeURIComponent(\r\n                decoded\r\n                    .split('')\r\n                    .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n                    .join('')\r\n            );\r\n        } catch (err) {\r\n            return decoded;\r\n        }\r\n    }\r\n\r\n    private tokenIsValid(token: string) {\r\n        if (!token) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\r\n            return false;\r\n        }\r\n\r\n        if (!(token as string).includes('.')) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\r\n            return false;\r\n        }\r\n\r\n        const parts = token.split('.');\r\n\r\n        if (parts.length !== this.PARTS_OF_TOKEN) {\r\n            this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${this.PARTS_OF_TOKEN} dots`);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private extractPartOfToken(token: string, index: number) {\r\n        return token.split('.')[index];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable()\r\nexport abstract class OidcSecurityStorage {\r\n    /**\r\n     * This method must contain the logic to read the storage.\r\n     * @return The value of the given key\r\n     */\r\n    public abstract read(key: string): any;\r\n\r\n    /**\r\n     * This method must contain the logic to write the storage.\r\n     * @param value The value for the given key\r\n     */\r\n    public abstract write(key: string, value: any): void;\r\n}\r\n\r\n@Injectable()\r\nexport class BrowserStorage implements OidcSecurityStorage {\r\n    private hasStorage: boolean;\r\n\r\n    constructor(private configProvider: ConfigurationProvider) {\r\n        this.hasStorage = typeof Storage !== 'undefined';\r\n    }\r\n\r\n    public read(key: string): any {\r\n        if (this.hasStorage) {\r\n            return JSON.parse(this.configProvider.openIDConfiguration.storage.getItem(key + '_' + this.configProvider.openIDConfiguration.client_id));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public write(key: string, value: any): void {\r\n        if (this.hasStorage) {\r\n            value = value === undefined ? null : value;\r\n            this.configProvider.openIDConfiguration.storage.setItem(\r\n                key + '_' + this.configProvider.openIDConfiguration.client_id,\r\n                JSON.stringify(value)\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\r\n\r\n@Injectable()\r\nexport class OidcSecurityCommon {\r\n    private storageAuthResult = 'authorizationResult';\r\n\r\n    public get authResult(): any {\r\n        return this.retrieve(this.storageAuthResult);\r\n    }\r\n\r\n    public set authResult(value: any) {\r\n        this.store(this.storageAuthResult, value);\r\n    }\r\n\r\n    private storageAccessToken = 'authorizationData';\r\n\r\n    public get accessToken(): string {\r\n        return this.retrieve(this.storageAccessToken) || '';\r\n    }\r\n\r\n    public set accessToken(value: string) {\r\n        this.store(this.storageAccessToken, value);\r\n    }\r\n\r\n    private storageIdToken = 'authorizationDataIdToken';\r\n\r\n    public get idToken(): string {\r\n        return this.retrieve(this.storageIdToken) || '';\r\n    }\r\n\r\n    public set idToken(value: string) {\r\n        this.store(this.storageIdToken, value);\r\n    }\r\n\r\n    private storageIsAuthorized = '_isAuthorized';\r\n\r\n    public get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storageIsAuthorized);\r\n    }\r\n\r\n    public set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storageIsAuthorized, value);\r\n    }\r\n\r\n    private storageUserData = 'userData';\r\n\r\n    public get userData(): any {\r\n        return this.retrieve(this.storageUserData);\r\n    }\r\n\r\n    public set userData(value: any) {\r\n        this.store(this.storageUserData, value);\r\n    }\r\n\r\n    private storageAuthNonce = 'authNonce';\r\n\r\n    public get authNonce(): string {\r\n        return this.retrieve(this.storageAuthNonce) || '';\r\n    }\r\n\r\n    public set authNonce(value: string) {\r\n        this.store(this.storageAuthNonce, value);\r\n    }\r\n\r\n    private storageCodeVerifier = 'code_verifier';\r\n\r\n    public get code_verifier(): string {\r\n        return this.retrieve(this.storageCodeVerifier) || '';\r\n    }\r\n\r\n    public set code_verifier(value: string) {\r\n        this.store(this.storageCodeVerifier, value);\r\n    }\r\n\r\n    private storageAuthStateControl = 'authStateControl';\r\n\r\n    public get authStateControl(): string {\r\n        return this.retrieve(this.storageAuthStateControl) || '';\r\n    }\r\n\r\n    public set authStateControl(value: string) {\r\n        this.store(this.storageAuthStateControl, value);\r\n    }\r\n\r\n    private storageSessionState = 'session_state';\r\n\r\n    public get sessionState(): any {\r\n        return this.retrieve(this.storageSessionState);\r\n    }\r\n\r\n    public set sessionState(value: any) {\r\n        this.store(this.storageSessionState, value);\r\n    }\r\n\r\n    private storageSilentRenewRunning = 'storage_silent_renew_running';\r\n\r\n    public get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storageSilentRenewRunning) || '';\r\n    }\r\n\r\n    public set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storageSilentRenewRunning, value);\r\n    }\r\n\r\n    private storageCustomRequestParams = 'storage_custom_request_params';\r\n\r\n    public get customRequestParams(): {\r\n        [key: string]: string | number | boolean;\r\n    } {\r\n        return this.retrieve(this.storageCustomRequestParams);\r\n    }\r\n\r\n    public set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storageCustomRequestParams, value);\r\n    }\r\n\r\n    constructor(private oidcSecurityStorage: OidcSecurityStorage) {}\r\n\r\n    private retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\r\n\r\n    private store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\r\n\r\n    resetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storageAuthResult, '');\r\n            this.store(this.storageSessionState, '');\r\n            this.store(this.storageSilentRenewRunning, '');\r\n            this.store(this.storageIsAuthorized, false);\r\n            this.store(this.storageAccessToken, '');\r\n            this.store(this.storageIdToken, '');\r\n            this.store(this.storageUserData, '');\r\n            this.store(this.storageCodeVerifier, '');\r\n        }\r\n    }\r\n\r\n    getAccessToken(): any {\r\n        return this.retrieve(this.storageAccessToken);\r\n    }\r\n\r\n    getIdToken(): any {\r\n        return this.retrieve(this.storageIdToken);\r\n    }\r\n\r\n    getRefreshToken(): any {\r\n        return this.authResult.refresh_token;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\r\nimport { EqualityHelperService } from './oidc-equality-helper.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present in the ID Token.\r\n\r\n@Injectable()\r\nexport class OidcSecurityValidation {\r\n    static RefreshTokenNoncePlaceholder = '--RefreshToken--';\r\n\r\n    constructor(\r\n        private arrayHelperService: EqualityHelperService,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService\r\n    ) {}\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n    // (possibly allowing for some small leeway to account for clock skew).\r\n    isTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n        let decoded: any;\r\n        decoded = this.tokenHelperService.getPayloadFromToken(token, false);\r\n\r\n        return !this.validate_id_token_exp_not_expired(decoded, offsetSeconds);\r\n    }\r\n\r\n    // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n    // (possibly allowing for some small leeway to account for clock skew).\r\n    // tslint:disable-next-line: variable-name\r\n    validate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (!tokenExpirationDate) {\r\n            return false;\r\n        }\r\n\r\n        const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n        const nowWithOffset = new Date().valueOf() + offsetSeconds * 1000;\r\n        const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n        this.loggerService.logDebug(`Token not expired?: ${tokenExpirationValue} > ${nowWithOffset}  (${tokenNotExpired})`);\r\n\r\n        // Token not expired?\r\n        return tokenNotExpired;\r\n    }\r\n\r\n    // iss\r\n    // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\r\n    // https scheme that contains scheme, host,\r\n    // and optionally, port number and path components and no query or fragment components.\r\n    //\r\n    // sub\r\n    // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n    // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n    // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n    //\r\n    // aud\r\n    // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an audience value.\r\n    // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n    // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n    //\r\n    // exp\r\n    // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n    // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n    // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n    // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until the date/ time.\r\n    // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n    //\r\n    // iat\r\n    // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\r\n    // 1970- 01 - 01T00: 00: 00Z as measured\r\n    // in UTC until the date/ time.\r\n    validate_required_id_token(dataIdToken: any): boolean {\r\n        let validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.loggerService.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    validate_id_token_iat_max_offset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\r\n        if (disableIatOffsetValidation) {\r\n            return true;\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\r\n\r\n        maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\r\n\r\n        if (dateTimeIatIdToken == null) {\r\n            return false;\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n            'validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTimeIatIdToken.valueOf()) + ' < ' + maxOffsetAllowedInSeconds * 1000\r\n        );\r\n        return new Date().valueOf() - dateTimeIatIdToken.valueOf() < maxOffsetAllowedInSeconds * 1000;\r\n    }\r\n\r\n    // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n    // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n    // The precise method for detecting replay attacks is Client specific.\r\n\r\n    // However the nonce claim SHOULD not be present for the refesh_token grant type\r\n    // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\r\n    // The current spec is ambiguous and Keycloak does send it.\r\n    validate_id_token_nonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\r\n        const isFromRefreshToken =\r\n            (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n        if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\r\n            this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n    // MUST exactly match the value of the iss (issuer) Claim.\r\n    // tslint:disable-next-line: variable-name\r\n    validate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if ((dataIdToken.iss as string) !== (authWellKnownEndpoints_issuer as string)) {\r\n            this.loggerService.logDebug(\r\n                'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n                    dataIdToken.iss +\r\n                    ' authWellKnownEndpoints issuer:' +\r\n                    authWellKnownEndpoints_issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n    // by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n    // not trusted by the Client.\r\n    validate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud instanceof Array) {\r\n            const result = this.arrayHelperService.areEqual(dataIdToken.aud, aud);\r\n\r\n            if (!result) {\r\n                this.loggerService.logDebug('Validate_id_token_aud  array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        } else if (dataIdToken.aud !== aud) {\r\n            this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validateStateFromHashCallback(state: any, localState: any): boolean {\r\n        if ((state as string) !== (localState as string)) {\r\n            this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate_userdata_sub_id_token(idTokenSub: any, userdataSub: any): boolean {\r\n        if ((idTokenSub as string) !== (userdataSub as string)) {\r\n            this.loggerService.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + idTokenSub + ' userdata_sub:' + userdataSub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n    // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n    // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n    // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n    validate_signature_id_token(idToken: any, jwtkeys: any): boolean {\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\r\n\r\n        if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\r\n            this.loggerService.logWarning('id token has no header data');\r\n            return false;\r\n        }\r\n\r\n        const kid = headerData.kid;\r\n        const alg = headerData.alg;\r\n\r\n        if ('RS256' !== (alg as string)) {\r\n            this.loggerService.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (!headerData.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let amountOfMatchingKeys = 0;\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys === 0) {\r\n                this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1) {\r\n                this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (const key of jwtkeys.keys) {\r\n                    if ((key.kty as string) === 'RSA' && (key.use as string) === 'sig') {\r\n                        const publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (const key of jwtkeys.keys) {\r\n                if ((key.kid as string) === (kid as string)) {\r\n                    const publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(idToken, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    config_validate_response_type(responseType: string): boolean {\r\n        if (responseType === 'id_token token' || responseType === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        if (responseType === 'code') {\r\n            return true;\r\n        }\r\n\r\n        this.loggerService.logWarning('module configure incorrect, invalid response_type:' + responseType);\r\n        return false;\r\n    }\r\n\r\n    // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n    //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n    ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n    ////    if (!header_data.hasOwnProperty('kid')) {\r\n    ////        // no kid defined in Jose header\r\n    ////        if (jwtkeys.keys.length != 1) {\r\n    ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n    ////            return false;\r\n    ////        }\r\n    ////    }\r\n\r\n    ////    return true;\r\n    //// }\r\n\r\n    // Access Token Validation\r\n    // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n    // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n    // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n    // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n    // is present in the ID Token.\r\n    validate_id_token_at_hash(accessToken: any, atHash: any, isCodeFlow: boolean): boolean {\r\n        this.loggerService.logDebug('at_hash from the server:' + atHash);\r\n\r\n        // The at_hash is optional for the code flow\r\n        if (isCodeFlow) {\r\n            if (!(atHash as string)) {\r\n                this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const testdata = this.generate_at_hash('' + accessToken);\r\n        this.loggerService.logDebug('at_hash client validation not decoded:' + testdata);\r\n        if (testdata === (atHash as string)) {\r\n            return true; // isValid;\r\n        } else {\r\n            const testValue = this.generate_at_hash('' + decodeURIComponent(accessToken));\r\n            this.loggerService.logDebug('-gen access--' + testValue);\r\n            if (testValue === (atHash as string)) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private generate_at_hash(accessToken: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(accessToken, 'sha256');\r\n        const first128bits = hash.substr(0, hash.length / 2);\r\n        const testdata = hextob64u(first128bits);\r\n\r\n        return testdata;\r\n    }\r\n\r\n    generate_code_verifier(codeChallenge: any): string {\r\n        const hash = KJUR.crypto.Util.hashString(codeChallenge, 'sha256');\r\n        const testdata = hextob64u(hash);\r\n\r\n        return testdata;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\n\r\n@Injectable()\r\nexport class StateValidationService {\r\n    constructor(\r\n        public oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    validateState(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        const toReturn = new ValidateStateResult();\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            toReturn.state = ValidationResult.StatesDoNotMatch;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n            this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n        ) {\r\n            toReturn.access_token = result.access_token;\r\n        }\r\n\r\n        if (result.id_token) {\r\n            toReturn.id_token = result.id_token;\r\n\r\n            toReturn.decoded_id_token = this.tokenHelperService.getPayloadFromToken(toReturn.id_token, false);\r\n\r\n            if (!this.oidcSecurityValidation.validate_signature_id_token(toReturn.id_token, jwtKeys)) {\r\n                this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\r\n                toReturn.state = ValidationResult.SignatureFailed;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_nonce(\r\n                    toReturn.decoded_id_token,\r\n                    this.oidcSecurityCommon.authNonce,\r\n                    this.configurationProvider.openIDConfiguration.ignore_nonce_after_refresh\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect nonce');\r\n                toReturn.state = ValidationResult.IncorrectNonce;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_required_id_token(toReturn.decoded_id_token)) {\r\n                this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n                toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_iat_max_offset(\r\n                    toReturn.decoded_id_token,\r\n                    this.configurationProvider.openIDConfiguration.max_id_token_iat_offset_allowed_in_seconds,\r\n                    this.configurationProvider.openIDConfiguration.disable_iat_offset_validation\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n                toReturn.state = ValidationResult.MaxOffsetExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                if (this.configurationProvider.openIDConfiguration.iss_validation_off) {\r\n                    this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\r\n                } else if (\r\n                    !this.configurationProvider.openIDConfiguration.iss_validation_off &&\r\n                    !this.oidcSecurityValidation.validate_id_token_iss(\r\n                        toReturn.decoded_id_token,\r\n                        this.configurationProvider.wellKnownEndpoints.issuer\r\n                    )\r\n                ) {\r\n                    this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                    toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n                    this.handleUnsuccessfulValidation();\r\n                    return toReturn;\r\n                }\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n                toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (\r\n                !this.oidcSecurityValidation.validate_id_token_aud(\r\n                    toReturn.decoded_id_token,\r\n                    this.configurationProvider.openIDConfiguration.client_id\r\n                )\r\n            ) {\r\n                this.loggerService.logWarning('authorizedCallback incorrect aud');\r\n                toReturn.state = ValidationResult.IncorrectAud;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n\r\n            if (!this.oidcSecurityValidation.validate_id_token_exp_not_expired(toReturn.decoded_id_token)) {\r\n                this.loggerService.logWarning('authorizedCallback token expired');\r\n                toReturn.state = ValidationResult.TokenExpired;\r\n                this.handleUnsuccessfulValidation();\r\n                return toReturn;\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug('No id_token found, skipping id_token validation');\r\n        }\r\n\r\n        // flow id_token token\r\n        if (\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'id_token token' &&\r\n            this.configurationProvider.openIDConfiguration.response_type !== 'code'\r\n        ) {\r\n            toReturn.authResponseIsValid = true;\r\n            toReturn.state = ValidationResult.Ok;\r\n            this.handleSuccessfulValidation();\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        if (\r\n            !this.oidcSecurityValidation.validate_id_token_at_hash(\r\n                toReturn.access_token,\r\n                toReturn.decoded_id_token.at_hash,\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) ||\r\n            !toReturn.access_token\r\n        ) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect at_hash');\r\n            toReturn.state = ValidationResult.IncorrectAtHash;\r\n            this.handleUnsuccessfulValidation();\r\n            return toReturn;\r\n        }\r\n\r\n        toReturn.authResponseIsValid = true;\r\n        toReturn.state = ValidationResult.Ok;\r\n        this.handleSuccessfulValidation();\r\n        return toReturn;\r\n    }\r\n\r\n    private handleSuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\r\n\r\n    private handleUnsuccessfulValidation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.configurationProvider.openIDConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { from, Observable, Observer, Subject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class OidcSecurityCheckSession {\r\n    private sessionIframe: any;\r\n    private iframeMessageEvent: any;\r\n    private scheduledHeartBeat: any;\r\n    private lastIFrameRefresh = 0;\r\n    private outstandingMessages = 0;\r\n    private heartBeatInterval = 3000;\r\n    private iframeRefreshInterval = 60000;\r\n    private checkSessionChanged = new Subject<any>();\r\n\r\n    public get onCheckSessionChanged(): Observable<any> {\r\n        return this.checkSessionChanged.asObservable();\r\n    }\r\n\r\n    constructor(\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private iFrameService: IFrameService,\r\n        private zone: NgZone,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    private doesSessionExist(): boolean {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n\r\n        if (!existingIFrame) {\r\n            return false;\r\n        }\r\n\r\n        this.sessionIframe = existingIFrame;\r\n        return true;\r\n    }\r\n\r\n    private init() {\r\n        if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n            return from([this]);\r\n        }\r\n\r\n        if (!this.doesSessionExist()) {\r\n            this.sessionIframe = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n        }\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\r\n            return;\r\n        }\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints.check_session_iframe) {\r\n            this.sessionIframe.contentWindow.location.replace(this.configurationProvider.wellKnownEndpoints.check_session_iframe);\r\n        } else {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return Observable.create((observer: Observer<OidcSecurityCheckSession>) => {\r\n            this.sessionIframe.onload = () => {\r\n                this.lastIFrameRefresh = Date.now();\r\n                observer.next(this);\r\n                observer.complete();\r\n            };\r\n        });\r\n    }\r\n\r\n    startCheckingSession(clientId: string): void {\r\n        if (this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.pollServerSession(clientId);\r\n    }\r\n\r\n    stopCheckingSession(): void {\r\n        if (!this.scheduledHeartBeat) {\r\n            return;\r\n        }\r\n\r\n        this.clearScheduledHeartBeat();\r\n    }\r\n\r\n    private pollServerSession(clientId: string) {\r\n        const pollServerSessionRecur = () => {\r\n            this.init()\r\n                .pipe(take(1))\r\n                .subscribe(() => {\r\n                    if (this.sessionIframe && clientId) {\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        const sessionState = this.oidcSecurityCommon.sessionState;\r\n                        if (sessionState) {\r\n                            this.outstandingMessages++;\r\n                            this.sessionIframe.contentWindow.postMessage(\r\n                                clientId + ' ' + sessionState,\r\n                                this.configurationProvider.openIDConfiguration.stsServer\r\n                            );\r\n                        } else {\r\n                            this.loggerService.logDebug('OidcSecurityCheckSession pollServerSession session_state is blank');\r\n                            this.checkSessionChanged.next();\r\n                        }\r\n                    } else {\r\n                        this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession sessionIframe does not exist');\r\n                        this.loggerService.logDebug(clientId);\r\n                        this.loggerService.logDebug(this.sessionIframe);\r\n                        // this.init();\r\n                    }\r\n\r\n                    // after sending three messages with no response, fail.\r\n                    if (this.outstandingMessages > 3) {\r\n                        this.loggerService.logError(\r\n                            `OidcSecurityCheckSession not receiving check session response messages.\r\n                            Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\r\n                        );\r\n                        this.checkSessionChanged.next();\r\n                    }\r\n\r\n                    this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\r\n                });\r\n        };\r\n\r\n        this.outstandingMessages = 0;\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeat = setTimeout(pollServerSessionRecur, this.heartBeatInterval);\r\n        });\r\n    }\r\n    private clearScheduledHeartBeat() {\r\n        clearTimeout(this.scheduledHeartBeat);\r\n        this.scheduledHeartBeat = null;\r\n    }\r\n\r\n    private messageHandler(e: any) {\r\n        this.outstandingMessages = 0;\r\n        if (\r\n            this.sessionIframe &&\r\n            e.origin === this.configurationProvider.openIDConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.loggerService.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this.checkSessionChanged.next();\r\n            } else {\r\n                this.loggerService.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, ReplaySubject } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nexport interface ConfigResult {\r\n    authWellknownEndpoints: any;\r\n    customConfig: any;\r\n}\r\n\r\n@Injectable()\r\nexport class OidcConfigService {\r\n    private configurationLoadedInternal = new ReplaySubject<ConfigResult>(1);\r\n\r\n    public get onConfigurationLoaded(): Observable<ConfigResult> {\r\n        return this.configurationLoadedInternal.asObservable();\r\n    }\r\n\r\n    constructor(private readonly loggerService: LoggerService, private readonly httpClient: HttpClient) {}\r\n\r\n    load(configUrl: string): Promise<boolean> {\r\n        return this.httpClient\r\n            .get(configUrl)\r\n            .pipe(\r\n                switchMap(clientConfiguration => {\r\n                    return this.loadUsingConfiguration(clientConfiguration);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load' threw an error on calling ${configUrl}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    load_using_stsServer(stsServer: string): Promise<boolean> {\r\n        return this.loadUsingConfiguration({ stsServer }).toPromise();\r\n    }\r\n\r\n    load_using_custom_stsServer(url: string): Promise<boolean> {\r\n        return this.httpClient\r\n            .get(url)\r\n            .pipe(\r\n                switchMap(wellKnownEndpoints => {\r\n                    this.configurationLoadedInternal.next({\r\n                        authWellknownEndpoints: wellKnownEndpoints,\r\n                        customConfig: { stsServer: url },\r\n                    });\r\n                    return of(true);\r\n                }),\r\n                catchError(error => {\r\n                    this.loggerService.logError(`OidcConfigService 'load_using_custom_stsServer' threw an error on calling ${url}`, error);\r\n                    this.configurationLoadedInternal.next(undefined);\r\n                    return of(false);\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    private loadUsingConfiguration(clientConfig: any): Observable<boolean> {\r\n        if (!clientConfig.stsServer) {\r\n            this.loggerService.logError(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`, clientConfig);\r\n            throw new Error(`Property 'stsServer' is not present of passed config ${JSON.stringify(clientConfig)}`);\r\n        }\r\n\r\n        const url = `${clientConfig.stsServer}/.well-known/openid-configuration`;\r\n\r\n        return this.httpClient.get(url).pipe(\r\n            switchMap(wellKnownEndpoints => {\r\n                this.configurationLoadedInternal.next({\r\n                    authWellknownEndpoints: wellKnownEndpoints,\r\n                    customConfig: clientConfig,\r\n                });\r\n                return of(true);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(`OidcConfigService 'load_using_stsServer' threw an error on calling ${url}`, error);\r\n                this.configurationLoadedInternal.next(undefined);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable()\r\nexport class OidcSecuritySilentRenew {\r\n    constructor(private loggerService: LoggerService, private iFrameService: IFrameService) {}\r\n\r\n    initRenew(): HTMLIFrameElement {\r\n        const existingIFrame = this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        if (!existingIFrame) {\r\n            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n        }\r\n        return existingIFrame;\r\n    }\r\n\r\n    startRenew(url: string): Observable<void> {\r\n        const sessionIframe = this.initRenew();\r\n        this.loggerService.logDebug('startRenew for URL:' + url);\r\n        return new Observable<void>(observer => {\r\n            const onLoadHandler = () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n                observer.next(undefined);\r\n                observer.complete();\r\n            };\r\n            sessionIframe.addEventListener('load', onLoadHandler);\r\n            sessionIframe.src = url;\r\n            return () => {\r\n                sessionIframe.removeEventListener('load', onLoadHandler);\r\n            };\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\n@Injectable()\r\nexport class OidcSecurityUserService {\r\n    private userData: any = '';\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private loggerService: LoggerService,\r\n        private readonly configurationProvider: ConfigurationProvider\r\n    ) {}\r\n\r\n    initUserData() {\r\n        return this.getIdentityUserData().pipe(map((data: any) => (this.userData = data)));\r\n    }\r\n\r\n    getUserData(): any {\r\n        if (!this.userData) {\r\n            throw Error('UserData is not set!');\r\n        }\r\n\r\n        return this.userData;\r\n    }\r\n\r\n    setUserData(value: any): void {\r\n        this.userData = value;\r\n    }\r\n\r\n    private getIdentityUserData(): Observable<any> {\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (!this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\r\n\r\n            throw Error('authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        const canGetUserData = this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.userinfo_endpoint;\r\n\r\n        if (!canGetUserData) {\r\n            this.loggerService.logError(\r\n                'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n            );\r\n            throw Error('authWellKnownEndpoints.userinfo_endpoint is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.getIdentityUserData(this.configurationProvider.wellKnownEndpoints.userinfo_endpoint || '', token);\r\n    }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport class UriEncoder implements HttpParameterCodec {\r\n    encodeKey(key: string): string {\r\n        return encodeURIComponent(key);\r\n    }\r\n\r\n    encodeValue(value: string): string {\r\n        return encodeURIComponent(value);\r\n    }\r\n\r\n    decodeKey(key: string): string {\r\n        return decodeURIComponent(key);\r\n    }\r\n\r\n    decodeValue(value: string): string {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlParserService {\r\n    getUrlParameter(urlToCheck: any, name: any): string {\r\n        if (!urlToCheck) {\r\n            return '';\r\n        }\r\n\r\n        if (!name) {\r\n            return '';\r\n        }\r\n\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n        const results = regex.exec(urlToCheck);\r\n        return results === null ? '' : decodeURIComponent(results[1]);\r\n    }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, from, Observable, of, Subject, throwError, timer } from 'rxjs';\r\nimport { catchError, filter, map, race, shareReplay, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { OpenIdConfiguration } from '../models/auth.configuration';\r\nimport { AuthWellKnownEndpoints } from '../models/auth.well-known-endpoints';\r\nimport { AuthorizationResult } from '../models/authorization-result';\r\nimport { AuthorizationState } from '../models/authorization-state.enum';\r\nimport { JwtKeys } from '../models/jwtkeys';\r\nimport { ValidateStateResult } from '../models/validate-state-result.model';\r\nimport { ValidationResult } from '../models/validation-result.enum';\r\nimport { ConfigurationProvider } from './auth-configuration.provider';\r\nimport { StateValidationService } from './oidc-security-state-validation.service';\r\nimport { TokenHelperService } from './oidc-token-helper.service';\r\nimport { LoggerService } from './oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { UriEncoder } from './uri-encoder';\r\nimport { UrlParserService } from './url-parser.service';\r\nimport { oneLine } from 'common-tags';\r\n\r\n// tslint:disable: variable-name\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n    private _onModuleSetup = new Subject<boolean>();\r\n    private _onCheckSessionChanged = new Subject<boolean>();\r\n    private _onAuthorizationResult = new Subject<AuthorizationResult>();\r\n\r\n    public get onModuleSetup(): Observable<boolean> {\r\n        return this._onModuleSetup.asObservable();\r\n    }\r\n\r\n    public get onAuthorizationResult(): Observable<AuthorizationResult> {\r\n        return this._onAuthorizationResult.asObservable();\r\n    }\r\n\r\n    public get onCheckSessionChanged(): Observable<boolean> {\r\n        return this._onCheckSessionChanged.asObservable();\r\n    }\r\n\r\n    public get onConfigurationChange(): Observable<OpenIdConfiguration> {\r\n        return this.configurationProvider.onConfigurationChange;\r\n    }\r\n\r\n    checkSessionChanged = false;\r\n    moduleSetup = false;\r\n\r\n    private _isModuleSetup = new BehaviorSubject<boolean>(false);\r\n\r\n    private _isAuthorized = new BehaviorSubject<boolean>(false);\r\n    private _isSetupAndAuthorized: Observable<boolean>;\r\n\r\n    private _userData = new BehaviorSubject<any>('');\r\n    private authWellKnownEndpointsLoaded = false;\r\n    private runTokenValidationRunning = false;\r\n    private _scheduledHeartBeat: any;\r\n    private boundSilentRenewEvent: any;\r\n\r\n    constructor(\r\n        private oidcDataService: OidcDataService,\r\n        private stateValidationService: StateValidationService,\r\n        private router: Router,\r\n        private oidcSecurityCheckSession: OidcSecurityCheckSession,\r\n        private oidcSecuritySilentRenew: OidcSecuritySilentRenew,\r\n        private oidcSecurityUserService: OidcSecurityUserService,\r\n        private oidcSecurityCommon: OidcSecurityCommon,\r\n        private oidcSecurityValidation: OidcSecurityValidation,\r\n        private tokenHelperService: TokenHelperService,\r\n        private loggerService: LoggerService,\r\n        private zone: NgZone,\r\n        private readonly httpClient: HttpClient,\r\n        private readonly configurationProvider: ConfigurationProvider,\r\n        private readonly urlParserService: UrlParserService\r\n    ) {\r\n        this.onModuleSetup.pipe(take(1)).subscribe(() => {\r\n            this.moduleSetup = true;\r\n            this._isModuleSetup.next(true);\r\n        });\r\n\r\n        this._isSetupAndAuthorized = this._isModuleSetup.pipe(\r\n            filter((isModuleSetup: boolean) => isModuleSetup),\r\n            switchMap(() => {\r\n                if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                    this.loggerService.logDebug(`IsAuthorizedRace: Silent Renew Not Active. Emitting.`);\r\n                    return from([true]);\r\n                }\r\n\r\n                const race$ = this._isAuthorized.asObservable().pipe(\r\n                    filter((isAuthorized: boolean) => isAuthorized),\r\n                    take(1),\r\n                    tap(() => this.loggerService.logDebug('IsAuthorizedRace: Existing token is still authorized.')),\r\n                    // tslint:disable-next-line: deprecation\r\n                    race(\r\n                        this._onAuthorizationResult.pipe(\r\n                            take(1),\r\n                            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Silent Renew Refresh Session Complete')),\r\n                            map(() => true)\r\n                        ),\r\n                        timer(this.configurationProvider.openIDConfiguration.isauthorizedrace_timeout_in_seconds * 1000).pipe(\r\n                            // backup, if nothing happens after X seconds stop waiting and emit (5s Default)\r\n                            tap(() => {\r\n                                this.resetAuthorizationData(false);\r\n                                this.oidcSecurityCommon.authNonce = '';\r\n                                this.loggerService.logWarning('IsAuthorizedRace: Timeout reached. Emitting.');\r\n                            }),\r\n                            map(() => true)\r\n                        )\r\n                    )\r\n                );\r\n\r\n                this.loggerService.logDebug('Silent Renew is active, check if token in storage is active');\r\n                if (this.oidcSecurityCommon.authNonce === '' || this.oidcSecurityCommon.authNonce === undefined) {\r\n                    // login not running, or a second silent renew, user must login first before this will work.\r\n                    this.loggerService.logDebug('Silent Renew or login not running, try to refresh the session');\r\n                    this.refreshSession().subscribe();\r\n                }\r\n\r\n                return race$;\r\n            }),\r\n            tap(() => this.loggerService.logDebug('IsAuthorizedRace: Completed')),\r\n            switchMapTo(this._isAuthorized.asObservable()),\r\n            tap((isAuthorized: boolean) => this.loggerService.logDebug(`getIsAuthorized: ${isAuthorized}`)),\r\n            shareReplay(1)\r\n        );\r\n\r\n        this._isSetupAndAuthorized\r\n            .pipe(filter(() => this.configurationProvider.openIDConfiguration.start_checksession))\r\n            .subscribe(isSetupAndAuthorized => {\r\n                if (isSetupAndAuthorized) {\r\n                    this.oidcSecurityCheckSession.startCheckingSession(this.configurationProvider.openIDConfiguration.client_id);\r\n                } else {\r\n                    this.oidcSecurityCheckSession.stopCheckingSession();\r\n                }\r\n            });\r\n    }\r\n\r\n    setupModule(openIdConfiguration: OpenIdConfiguration, authWellKnownEndpoints: AuthWellKnownEndpoints): void {\r\n        this.configurationProvider.setup(openIdConfiguration, authWellKnownEndpoints);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => {\r\n            this.loggerService.logDebug('onCheckSessionChanged');\r\n            this.checkSessionChanged = true;\r\n            this._onCheckSessionChanged.next(this.checkSessionChanged);\r\n        });\r\n\r\n        const userData = this.oidcSecurityCommon.userData;\r\n        if (userData) {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized) {\r\n            this.loggerService.logDebug('IsAuthorized setup module');\r\n            this.loggerService.logDebug(this.oidcSecurityCommon.idToken);\r\n            if (\r\n                this.oidcSecurityValidation.isTokenExpired(\r\n                    this.oidcSecurityCommon.idToken || this.oidcSecurityCommon.accessToken,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                )\r\n            ) {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token isTokenExpired');\r\n            } else {\r\n                this.loggerService.logDebug('IsAuthorized setup module; id_token is valid');\r\n                this.setIsAuthorized(isAuthorized);\r\n            }\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.loggerService.logDebug('STS server: ' + this.configurationProvider.openIDConfiguration.stsServer);\r\n\r\n        this._onModuleSetup.next();\r\n\r\n        if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            this.oidcSecuritySilentRenew.initRenew();\r\n\r\n            // Support authorization via DOM events.\r\n            // Deregister if OidcSecurityService.setupModule is called again by any instance.\r\n            //      We only ever want the latest setup service to be reacting to this event.\r\n            this.boundSilentRenewEvent = this.silentRenewEventHandler.bind(this);\r\n\r\n            const instanceId = Math.random();\r\n\r\n            const boundSilentRenewInitEvent: any = ((e: CustomEvent) => {\r\n                if (e.detail !== instanceId) {\r\n                    window.removeEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent);\r\n                    window.removeEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent);\r\n                }\r\n            }).bind(this);\r\n\r\n            window.addEventListener('oidc-silent-renew-init', boundSilentRenewInitEvent, false);\r\n            window.addEventListener('oidc-silent-renew-message', this.boundSilentRenewEvent, false);\r\n\r\n            window.dispatchEvent(\r\n                new CustomEvent('oidc-silent-renew-init', {\r\n                    detail: instanceId,\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserData<T = any>(): Observable<T> {\r\n        return this._userData.asObservable();\r\n    }\r\n\r\n    getIsModuleSetup(): Observable<boolean> {\r\n        return this._isModuleSetup.asObservable();\r\n    }\r\n\r\n    getIsAuthorized(): Observable<boolean> {\r\n        return this._isSetupAndAuthorized;\r\n    }\r\n\r\n    getToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getIdToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getRefreshToken(): string {\r\n        if (!this._isAuthorized.getValue()) {\r\n            return '';\r\n        }\r\n\r\n        const token = this.oidcSecurityCommon.getRefreshToken();\r\n        return decodeURIComponent(token);\r\n    }\r\n\r\n    getPayloadFromIdToken(encode = false): any {\r\n        const token = this.getIdToken();\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode);\r\n    }\r\n\r\n    setState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\r\n\r\n    getState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\r\n\r\n    setCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\r\n\r\n    // Code Flow with PCKE or Implicit Flow\r\n    authorize(urlHandler?: (url: string) => any) {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.loggerService.logError('Well known endpoints must be loaded before user can login!');\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.configurationProvider.openIDConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.loggerService.logDebug('BEGIN Authorize Code Flow, no auth data');\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (!state) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            // Implicit Flow\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.redirect_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || ''\r\n                );\r\n            } else {\r\n                this.loggerService.logError('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        if (urlHandler) {\r\n            urlHandler(url);\r\n        } else {\r\n            this.redirectTo(url);\r\n        }\r\n    }\r\n\r\n    // Code Flow\r\n    authorizedCallbackWithCode(urlToCheck: string) {\r\n        this.authorizedCallbackWithCode$(urlToCheck).subscribe();\r\n    }\r\n    authorizedCallbackWithCode$(urlToCheck: string): Observable<void> {\r\n        const code = this.urlParserService.getUrlParameter(urlToCheck, 'code');\r\n        const state = this.urlParserService.getUrlParameter(urlToCheck, 'state');\r\n        const sessionState = this.urlParserService.getUrlParameter(urlToCheck, 'session_state') || null;\r\n\r\n        if (!state) {\r\n            this.loggerService.logDebug('no state in url');\r\n            return of();\r\n        }\r\n        if (!code) {\r\n            this.loggerService.logDebug('no code in url');\r\n            return of();\r\n        }\r\n        this.loggerService.logDebug('running validation for callback' + urlToCheck);\r\n        return this.requestTokensWithCode$(code, state, sessionState);\r\n    }\r\n\r\n    // Code Flow\r\n    requestTokensWithCode(code: string, state: string, sessionState: string | null): void {\r\n        this.requestTokensWithCode$(code, state, sessionState).subscribe();\r\n    }\r\n\r\n    requestTokensWithCode$(code: string, state: string, sessionState: string | null): Observable<void> {\r\n        return this._isModuleSetup.pipe(\r\n            filter(isModuleSetup => !!isModuleSetup),\r\n            take(1),\r\n            switchMap(() => {\r\n                return this.requestTokensWithCodeProcedure$(code, state, sessionState);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Refresh Token\r\n    refreshTokensWithCodeProcedure(code: string, state: string): Observable<any> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        const data = `grant_type=refresh_token&client_id=${this.configurationProvider.openIDConfiguration.client_id}&refresh_token=${code}`;\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\r\n            map(response => {\r\n                this.loggerService.logDebug('token refresh response: ' + JSON.stringify(response));\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return of(false);\r\n            })\r\n        );\r\n    }\r\n\r\n    requestTokensWithCodeProcedure(code: string, state: string, session_state: string | null): void {\r\n        this.requestTokensWithCodeProcedure$(code, state, session_state).subscribe();\r\n    }\r\n\r\n    // Code Flow with PCKE\r\n    requestTokensWithCodeProcedure$(code: string, state: string, session_state: string | null): Observable<void> {\r\n        let tokenRequestUrl = '';\r\n        if (this.configurationProvider.wellKnownEndpoints && this.configurationProvider.wellKnownEndpoints.token_endpoint) {\r\n            tokenRequestUrl = `${this.configurationProvider.wellKnownEndpoints.token_endpoint}`;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.validateStateFromHashCallback(state, this.oidcSecurityCommon.authStateControl)) {\r\n            this.loggerService.logWarning('authorizedCallback incorrect state');\r\n            // ValidationResult.StatesDoNotMatch;\r\n            return throwError(new Error('incorrect state'));\r\n        }\r\n\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        let data = oneLine`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\r\n            &code_verifier=${this.oidcSecurityCommon.code_verifier}\r\n            &code=${code}&redirect_uri=${this.configurationProvider.openIDConfiguration.redirect_url}`;\r\n\r\n        if (this.oidcSecurityCommon.silentRenewRunning === 'running') {\r\n            data = oneLine`grant_type=authorization_code&client_id=${this.configurationProvider.openIDConfiguration.client_id}\r\n                &code_verifier=${this.oidcSecurityCommon.code_verifier}\r\n                &code=${code}\r\n                &redirect_uri=${this.configurationProvider.openIDConfiguration.silent_renew_url}`;\r\n        }\r\n\r\n        return this.httpClient.post(tokenRequestUrl, data, { headers }).pipe(\r\n            map(response => {\r\n                let obj: any = new Object();\r\n                obj = response;\r\n                obj.state = state;\r\n                obj.session_state = session_state;\r\n\r\n                this.authorizedCodeFlowCallbackProcedure(obj);\r\n\r\n                return undefined;\r\n            }),\r\n            catchError(error => {\r\n                this.loggerService.logError(error);\r\n                this.loggerService.logError(`OidcService code request ${this.configurationProvider.openIDConfiguration.stsServer}`);\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    // Code Flow\r\n    private authorizedCodeFlowCallbackProcedure(result: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorized Code Flow Callback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedImplicitFlowCallbackProcedure(hash?: string) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n\r\n        this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        const result: any = hash.split('&').reduce((resultData: any, item: string) => {\r\n            const parts = item.split('=');\r\n            resultData[parts.shift() as string] = parts.join('=');\r\n            return resultData;\r\n        }, {});\r\n\r\n        this.authorizedCallbackProcedure(result, isRenewProcess);\r\n    }\r\n\r\n    // Implicit Flow\r\n    authorizedImplicitFlowCallback(hash?: string) {\r\n        this._isModuleSetup\r\n            .pipe(\r\n                filter((isModuleSetup: boolean) => isModuleSetup),\r\n                take(1)\r\n            )\r\n            .subscribe(() => {\r\n                this.authorizedImplicitFlowCallbackProcedure(hash);\r\n            });\r\n    }\r\n\r\n    private redirectTo(url: string) {\r\n        window.location.href = url;\r\n    }\r\n\r\n    // Implicit Flow\r\n    private authorizedCallbackProcedure(result: any, isRenewProcess: boolean) {\r\n        this.oidcSecurityCommon.authResult = result;\r\n\r\n        if (!this.configurationProvider.openIDConfiguration.history_cleanup_off && !isRenewProcess) {\r\n            // reset the history to remove the tokens\r\n            window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\r\n        } else {\r\n            this.loggerService.logDebug('history clean up inactive');\r\n        }\r\n\r\n        if (result.error) {\r\n            if (isRenewProcess) {\r\n                this.loggerService.logDebug(result);\r\n            } else {\r\n                this.loggerService.logWarning(result);\r\n            }\r\n\r\n            if ((result.error as string) === 'login_required') {\r\n                this._onAuthorizationResult.next(\r\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, isRenewProcess)\r\n                );\r\n            } else {\r\n                this._onAuthorizationResult.next(\r\n                    new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.SecureTokenServerError, isRenewProcess)\r\n                );\r\n            }\r\n\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.authNonce = '';\r\n\r\n            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        } else {\r\n            this.loggerService.logDebug(result);\r\n\r\n            this.loggerService.logDebug('authorizedCallback created, begin token validation');\r\n\r\n            this.getSigningKeys().subscribe(\r\n                jwtKeys => {\r\n                    const validationResult = this.getValidatedStateResult(result, jwtKeys);\r\n\r\n                    if (validationResult.authResponseIsValid) {\r\n                        this.setAuthorizationData(validationResult.access_token, validationResult.id_token);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                            this.getUserinfo(isRenewProcess, result, validationResult.id_token, validationResult.decoded_id_token).subscribe(\r\n                                response => {\r\n                                    if (response) {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                                        }\r\n                                    } else {\r\n                                        this._onAuthorizationResult.next(\r\n                                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\r\n                                        );\r\n                                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                                        }\r\n                                    }\r\n                                },\r\n                                err => {\r\n                                    /* Something went wrong while getting signing key */\r\n                                    this.loggerService.logWarning('Failed to retreive user info with error: ' + JSON.stringify(err));\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (!isRenewProcess) {\r\n                                // userData is set to the id_token decoded, auto get user data set to false\r\n                                this.oidcSecurityUserService.setUserData(validationResult.decoded_id_token);\r\n                                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n                            }\r\n\r\n                            this.runTokenValidation();\r\n\r\n                            this._onAuthorizationResult.next(\r\n                                new AuthorizationResult(AuthorizationState.authorized, validationResult.state, isRenewProcess)\r\n                            );\r\n                            if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                                this.router.navigate([this.configurationProvider.openIDConfiguration.post_login_route]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // something went wrong\r\n                        this.loggerService.logWarning('authorizedCallback, token(s) validation failed, resetting');\r\n                        this.loggerService.logWarning(window.location.hash);\r\n                        this.resetAuthorizationData(false);\r\n                        this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                        this._onAuthorizationResult.next(\r\n                            new AuthorizationResult(AuthorizationState.unauthorized, validationResult.state, isRenewProcess)\r\n                        );\r\n                        if (!this.configurationProvider.openIDConfiguration.trigger_authorization_result_event && !isRenewProcess) {\r\n                            this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n                        }\r\n                    }\r\n                },\r\n                err => {\r\n                    /* Something went wrong while getting signing key */\r\n                    this.loggerService.logWarning('Failed to retreive siging key with error: ' + JSON.stringify(err));\r\n                    this.oidcSecurityCommon.silentRenewRunning = '';\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    getUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.tokenHelperService.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (\r\n                this.configurationProvider.openIDConfiguration.response_type === 'id_token token' ||\r\n                this.configurationProvider.openIDConfiguration.response_type === 'code'\r\n            ) {\r\n                if (isRenewProcess && this._userData.value) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData().subscribe(() => {\r\n                        this.loggerService.logDebug('authorizedCallback (id_token token || code) flow');\r\n\r\n                        const userData = this.oidcSecurityUserService.getUserData();\r\n\r\n                        if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, userData.sub)) {\r\n                            this.setUserData(userData);\r\n                            this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n                            this.loggerService.logDebug(this.oidcSecurityUserService.getUserData());\r\n\r\n                            this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                            this.runTokenValidation();\r\n                            observer.next(true);\r\n                        } else {\r\n                            // something went wrong, userdata sub does not match that from id_token\r\n                            this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                            this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                            this.resetAuthorizationData(false);\r\n                            observer.next(false);\r\n                        }\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            } else {\r\n                // flow id_token\r\n                this.loggerService.logDebug('authorizedCallback id_token flow');\r\n                this.loggerService.logDebug(this.oidcSecurityCommon.accessToken);\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.setUserData(decoded_id_token);\r\n                this.setUserData(this.oidcSecurityUserService.getUserData());\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                this.runTokenValidation();\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\n\r\n    logoff(urlHandler?: (url: string) => any) {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.loggerService.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                const url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n                this.resetAuthorizationData(false);\r\n\r\n                if (this.configurationProvider.openIDConfiguration.start_checksession && this.checkSessionChanged) {\r\n                    this.loggerService.logDebug('only local login cleaned up, server session has changed');\r\n                } else if (urlHandler) {\r\n                    urlHandler(url);\r\n                } else {\r\n                    this.redirectTo(url);\r\n                }\r\n            } else {\r\n                this.resetAuthorizationData(false);\r\n                this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\r\n            }\r\n        } else {\r\n            this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n        }\r\n    }\r\n\r\n    refreshSession(): Observable<boolean> {\r\n        if (!this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return of(false);\r\n        }\r\n\r\n        this.loggerService.logDebug('BEGIN refresh session Authorize');\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n\r\n        let state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random() + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        const nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let url = '';\r\n\r\n        // Code Flow\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            if (this.configurationProvider.openIDConfiguration.use_refresh_token) {\r\n                // try using refresh token\r\n                const refresh_token = this.oidcSecurityCommon.getRefreshToken();\r\n                if (refresh_token) {\r\n                    this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\r\n                    // Nonce is not used with refresh tokens; but Keycloak may send it anyway\r\n                    this.oidcSecurityCommon.authNonce = OidcSecurityValidation.RefreshTokenNoncePlaceholder;\r\n                    return this.refreshTokensWithCodeProcedure(refresh_token, state);\r\n                } else {\r\n                    this.loggerService.logDebug('no refresh token found, using silent renew');\r\n                }\r\n            }\r\n            // code_challenge with \"S256\"\r\n            const code_verifier = 'C' + Math.random() + '' + Date.now() + '' + Date.now() + Math.random();\r\n            const code_challenge = this.oidcSecurityValidation.generate_code_verifier(code_verifier);\r\n\r\n            this.oidcSecurityCommon.code_verifier = code_verifier;\r\n\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    true,\r\n                    code_challenge,\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        } else {\r\n            if (this.configurationProvider.wellKnownEndpoints) {\r\n                url = this.createAuthorizeUrl(\r\n                    false,\r\n                    '',\r\n                    this.configurationProvider.openIDConfiguration.silent_renew_url,\r\n                    nonce,\r\n                    state,\r\n                    this.configurationProvider.wellKnownEndpoints.authorization_endpoint || '',\r\n                    'none'\r\n                );\r\n            } else {\r\n                this.loggerService.logWarning('authWellKnownEndpoints is undefined');\r\n            }\r\n        }\r\n\r\n        return this.oidcSecuritySilentRenew.startRenew(url).pipe(map(() => true));\r\n    }\r\n\r\n    handleError(error: any) {\r\n        const silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        const isRenewProcess = silentRenew === 'running';\r\n        this.loggerService.logError(error);\r\n        if (error.status === 403 || error.status === '403') {\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status === 401 || error.status === '401') {\r\n            const silentRenewRunning = this.oidcSecurityCommon.silentRenewRunning;\r\n\r\n            this.resetAuthorizationData(!!silentRenewRunning);\r\n\r\n            if (this.configurationProvider.openIDConfiguration.trigger_authorization_result_event) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.NotSet, isRenewProcess));\r\n            } else {\r\n                this.router.navigate([this.configurationProvider.openIDConfiguration.unauthorized_route]);\r\n            }\r\n        }\r\n    }\r\n\r\n    startCheckingSilentRenew(): void {\r\n        this.runTokenValidation();\r\n    }\r\n\r\n    stopCheckingSilentRenew(): void {\r\n        if (this._scheduledHeartBeat) {\r\n            clearTimeout(this._scheduledHeartBeat);\r\n            this._scheduledHeartBeat = null;\r\n            this.runTokenValidationRunning = false;\r\n        }\r\n    }\r\n\r\n    resetAuthorizationData(isRenewProcess: boolean): void {\r\n        if (!isRenewProcess) {\r\n            if (this.configurationProvider.openIDConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n            this.setIsAuthorized(false);\r\n        }\r\n    }\r\n\r\n    getEndSessionUrl(): string | undefined {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            if (this.configurationProvider.wellKnownEndpoints.end_session_endpoint) {\r\n                const end_session_endpoint = this.configurationProvider.wellKnownEndpoints.end_session_endpoint;\r\n                const id_token_hint = this.oidcSecurityCommon.idToken;\r\n                return this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getValidatedStateResult(result: any, jwtKeys: JwtKeys): ValidateStateResult {\r\n        if (result.error) {\r\n            return new ValidateStateResult('', '', false, {});\r\n        }\r\n\r\n        return this.stateValidationService.validateState(result, jwtKeys);\r\n    }\r\n\r\n    private setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\r\n\r\n    private setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\r\n\r\n    private setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.loggerService.logDebug(access_token);\r\n        this.loggerService.logDebug(id_token);\r\n        this.loggerService.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\r\n\r\n    private createAuthorizeUrl(\r\n        isCodeFlow: boolean,\r\n        code_challenge: string,\r\n        redirect_url: string,\r\n        nonce: string,\r\n        state: string,\r\n        authorization_endpoint: string,\r\n        prompt?: string\r\n    ): string {\r\n        const urlParts = authorization_endpoint.split('?');\r\n        const authorizationUrl = urlParts[0];\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('client_id', this.configurationProvider.openIDConfiguration.client_id);\r\n        params = params.append('redirect_uri', redirect_url);\r\n        params = params.append('response_type', this.configurationProvider.openIDConfiguration.response_type);\r\n        params = params.append('scope', this.configurationProvider.openIDConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n\r\n        if (isCodeFlow) {\r\n            params = params.append('code_challenge', code_challenge);\r\n            params = params.append('code_challenge_method', 'S256');\r\n        }\r\n\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n\r\n        if (this.configurationProvider.openIDConfiguration.hd_param) {\r\n            params = params.append('hd', this.configurationProvider.openIDConfiguration.hd_param);\r\n        }\r\n\r\n        const customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\r\n\r\n    private createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        const urlParts = end_session_endpoint.split('?');\r\n\r\n        const authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let params = new HttpParams({\r\n            fromString: urlParts[1],\r\n            encoder: new UriEncoder(),\r\n        });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append('post_logout_redirect_uri', this.configurationProvider.openIDConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\r\n\r\n    private getSigningKeys(): Observable<JwtKeys> {\r\n        if (this.configurationProvider.wellKnownEndpoints) {\r\n            this.loggerService.logDebug('jwks_uri: ' + this.configurationProvider.wellKnownEndpoints.jwks_uri);\r\n\r\n            return this.oidcDataService\r\n                .get<JwtKeys>(this.configurationProvider.wellKnownEndpoints.jwks_uri || '')\r\n                .pipe(catchError(this.handleErrorGetSigningKeys));\r\n        } else {\r\n            this.loggerService.logWarning('getSigningKeys: authWellKnownEndpoints is undefined');\r\n        }\r\n\r\n        return this.oidcDataService.get<JwtKeys>('undefined').pipe(catchError(this.handleErrorGetSigningKeys));\r\n    }\r\n\r\n    private handleErrorGetSigningKeys(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || {};\r\n            const err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.logError(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n\r\n    private runTokenValidation() {\r\n        if (this.runTokenValidationRunning || !this.configurationProvider.openIDConfiguration.silent_renew) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n        this.loggerService.logDebug('runTokenValidation silent-renew running');\r\n\r\n        /**\r\n         *   First time: delay 10 seconds to call silentRenewHeartBeatCheck\r\n         *   Afterwards: Run this check in a 5 second interval only AFTER the previous operation ends.\r\n         */\r\n        const silentRenewHeartBeatCheck = () => {\r\n            this.loggerService.logDebug(\r\n                'silentRenewHeartBeatCheck\\r\\n' +\r\n                    `\\tsilentRenewRunning: ${this.oidcSecurityCommon.silentRenewRunning === 'running'}\\r\\n` +\r\n                    `\\tidToken: ${!!this.getIdToken()}\\r\\n` +\r\n                    `\\t_userData.value: ${!!this._userData.value}`\r\n            );\r\n            if (this._userData.value && this.oidcSecurityCommon.silentRenewRunning !== 'running' && this.getIdToken()) {\r\n                if (\r\n                    this.oidcSecurityValidation.isTokenExpired(\r\n                        this.oidcSecurityCommon.idToken,\r\n                        this.configurationProvider.openIDConfiguration.silent_renew_offset_in_seconds\r\n                    )\r\n                ) {\r\n                    this.loggerService.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.configurationProvider.openIDConfiguration.silent_renew) {\r\n                        this.refreshSession().subscribe(\r\n                            () => {\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            },\r\n                            (err: any) => {\r\n                                this.loggerService.logError('Error: ' + err);\r\n                                this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n                            }\r\n                        );\r\n                        /* In this situation, we schedule a heartbeat check only when silentRenew is finished.\r\n                        We don't want to schedule another check so we have to return here */\r\n                        return;\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Delay 3 seconds and do the next check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 3000);\r\n        };\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n            /* Initial heartbeat check */\r\n            this._scheduledHeartBeat = setTimeout(silentRenewHeartBeatCheck, 10000);\r\n        });\r\n    }\r\n\r\n    private silentRenewEventHandler(e: CustomEvent) {\r\n        this.loggerService.logDebug('silentRenewEventHandler');\r\n\r\n        if (this.configurationProvider.openIDConfiguration.response_type === 'code') {\r\n            const urlParts = e.detail.toString().split('?');\r\n            const params = new HttpParams({\r\n                fromString: urlParts[1],\r\n            });\r\n            const code = params.get('code');\r\n            const state = params.get('state');\r\n            const session_state = params.get('session_state');\r\n            const error = params.get('error');\r\n            if (code && state) {\r\n                this.requestTokensWithCodeProcedure(code, state, session_state);\r\n            }\r\n            if (error) {\r\n                this._onAuthorizationResult.next(new AuthorizationResult(AuthorizationState.unauthorized, ValidationResult.LoginRequired, true));\r\n                this.resetAuthorizationData(false);\r\n                this.oidcSecurityCommon.authNonce = '';\r\n                this.loggerService.logDebug(e.detail.toString());\r\n            }\r\n        } else {\r\n            // ImplicitFlow\r\n            this.authorizedImplicitFlowCallback(e.detail);\r\n        }\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { OidcDataService } from '../data-services/oidc-data.service';\r\nimport { IFrameService } from '../services/existing-iframe.service';\r\nimport { EqualityHelperService } from '../services/oidc-equality-helper.service';\r\nimport { StateValidationService } from '../services/oidc-security-state-validation.service';\r\nimport { TokenHelperService } from '../services/oidc-token-helper.service';\r\nimport { LoggerService } from '../services/oidc.logger.service';\r\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\r\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\r\nimport { OidcConfigService } from '../services/oidc.security.config.service';\r\nimport { OidcSecurityService } from '../services/oidc.security.service';\r\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\r\nimport { BrowserStorage, OidcSecurityStorage } from '../services/oidc.security.storage';\r\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\r\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\r\n\r\n@NgModule()\r\nexport class AuthModule {\r\n    static forRoot(token: Token = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: AuthModule,\r\n            providers: [\r\n                OidcConfigService,\r\n                OidcSecurityService,\r\n                OidcSecurityValidation,\r\n                OidcSecurityCheckSession,\r\n                OidcSecuritySilentRenew,\r\n                OidcSecurityUserService,\r\n                OidcSecurityCommon,\r\n                TokenHelperService,\r\n                LoggerService,\r\n                IFrameService,\r\n                EqualityHelperService,\r\n                OidcDataService,\r\n                StateValidationService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: token.storage || BrowserStorage,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n\r\nexport interface Type<T> extends Function {\r\n    new (...args: any[]): T;\r\n}\r\n\r\nexport interface Token {\r\n    storage?: Type<any>;\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAa,mBAAmB;;;;;;IAC5B,YAAmB,kBAAsC,EAAS,gBAAkC,EAAS,iBAA0B,KAAK;QAAzH,uBAAkB,GAAlB,kBAAkB,CAAoB;QAAS,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAS,mBAAc,GAAd,cAAc,CAAiB;KAAI;CACnJ;;;;;;;;ICJG,YAAa,YAAY;IACzB,WAAY,WAAW;IACvB,cAAe,cAAc;;;;;;;ACHjC,MAAa,OAAO;IAApB;QACI,SAAI,GAAa,EAAE,CAAC;KACvB;CAAA;MAEY,MAAM;IAAnB;QACI,QAAG,GAAG,EAAE,CAAC;QACT,QAAG,GAAG,EAAE,CAAC;QACT,QAAG,GAAG,EAAE,CAAC;QACT,QAAG,GAAG,EAAE,CAAC;QACT,MAAC,GAAG,EAAE,CAAC;QACP,MAAC,GAAG,EAAE,CAAC;QACP,QAAG,GAAU,EAAE,CAAC;KACnB;CAAA;;;;;;;;ICXG,QAAS,QAAQ;IACjB,kBAAmB,kBAAkB;IACrC,iBAAkB,iBAAiB;IACnC,gBAAiB,gBAAgB;IACjC,yBAA0B,yBAAyB;IACnD,kBAAmB,kBAAkB;IACrC,uBAAwB,uBAAuB;IAC/C,0BAA2B,0BAA0B;IACrD,cAAe,cAAc;IAC7B,cAAe,cAAc;IAC7B,iBAAkB,iBAAiB;IACnC,IAAK,IAAI;IACT,eAAgB,eAAe;IAC/B,wBAAyB,wBAAwB;;;;;;;ACdrD;AAGA,MAAa,mBAAmB;;;;;;;;IAC5B,YACW,eAAe,EAAE,EACjB,WAAW,EAAE,EACb,sBAAsB,KAAK,EAC3B,mBAAwB,EAAE,EAC1B,QAA0B,gBAAgB,CAAC,MAAM;QAJjD,iBAAY,GAAZ,YAAY,CAAK;QACjB,aAAQ,GAAR,QAAQ,CAAK;QACb,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,qBAAgB,GAAhB,gBAAgB,CAAU;QAC1B,UAAK,GAAL,KAAK,CAA4C;KACxD;CACP;;;;;;ACXD,MAKa,eAAe;;;;IACxB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAAI;;;;;;IAE9C,qBAAqB,CAAI,GAAW;;YAC5B,OAAO,GAAG,IAAI,WAAW,EAAE;QAC/B,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,GAAG,EAAE;YAC/B,OAAO;SACV,CAAC,CAAC;KACN;;;;;;;IAED,mBAAmB,CAAI,GAAW,EAAE,KAAa;;YACzC,OAAO,GAAG,IAAI,WAAW,EAAE;QAC/B,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACpD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;QAE9E,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,GAAG,EAAE;YAC/B,OAAO;SACV,CAAC,CAAC;KACN;;;;;;IAED,GAAG,CAAI,GAAW;;YACV,OAAO,GAAG,IAAI,WAAW,EAAE;QAC/B,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,GAAG,EAAE;YAC/B,OAAO;SACV,CAAC,CAAC;KACN;;;YA9BJ,UAAU;;;;YAJF,UAAU;;;;;;;ACAnB,MAIa,gBAAgB;;;;;IAMzB,YAAyC,UAAkB;QAAlB,eAAU,GAAV,UAAU,CAAQ;KAAI;;;;IAL/D,IAAI,SAAS;QACT,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC7C;;;YAJJ,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;YAOuB,MAAM,uBAA9C,MAAM,SAAC,WAAW;;;;;;;;ACVnC,MAOa,qBAAqB;;;;IA4D9B,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QA3D9C,mBAAc,GAAgC;YAClD,SAAS,EAAE,oBAAoB;YAC/B,YAAY,EAAE,oBAAoB;YAClC,SAAS,EAAE,YAAY;YACvB,aAAa,EAAE,MAAM;YACrB,KAAK,EAAE,sBAAsB;YAC7B,QAAQ,EAAE,EAAE;YACZ,wBAAwB,EAAE,oBAAoB;YAC9C,kBAAkB,EAAE,KAAK;YACzB,YAAY,EAAE,KAAK;YACnB,gBAAgB,EAAE,oBAAoB;YACtC,8BAA8B,EAAE,CAAC;YACjC,iBAAiB,EAAE,KAAK;YACxB,0BAA0B,EAAE,KAAK;YACjC,gBAAgB,EAAE,GAAG;YACrB,eAAe,EAAE,YAAY;YAC7B,kBAAkB,EAAE,eAAe;YACnC,aAAa,EAAE,IAAI;YACnB,qCAAqC,EAAE,IAAI;YAC3C,kCAAkC,EAAE,KAAK;YACzC,0BAA0B,EAAE,IAAI;YAChC,wBAAwB,EAAE,KAAK;YAC/B,kBAAkB,EAAE,KAAK;YACzB,mBAAmB,EAAE,KAAK;YAC1B,0CAA0C,EAAE,CAAC;YAC7C,mCAAmC,EAAE,CAAC;YACtC,6BAA6B,EAAE,KAAK;YACpC,OAAO,EAAE,OAAO,OAAO,KAAK,WAAW,GAAG,cAAc,GAAG,IAAI;SAClE,CAAC;QAEM,0BAAqB,GAA2B;YACpD,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,sBAAsB,EAAE,EAAE;YAC1B,cAAc,EAAE,EAAE;YAClB,iBAAiB,EAAE,EAAE;YACrB,oBAAoB,EAAE,EAAE;YACxB,oBAAoB,EAAE,EAAE;YACxB,mBAAmB,EAAE,EAAE;YACvB,sBAAsB,EAAE,EAAE;SAC7B,CAAC;QAEM,8BAAyB,GAAgC,IAAI,CAAC,cAAc,CAAC;QAC7E,2BAAsB,GAA2B,IAAI,CAAC,qBAAqB,CAAC;QAE5E,kCAA6B,GAAG,IAAI,OAAO,EAAuB,CAAC;KAcjB;;;;IAZ1D,IAAI,mBAAmB;QACnB,OAAO,IAAI,CAAC,yBAAyB,CAAC;KACzC;;;;IAED,IAAI,kBAAkB;QAClB,OAAO,IAAI,CAAC,sBAAsB,CAAC;KACtC;;;;IAED,IAAI,qBAAqB;QACrB,OAAO,IAAI,CAAC,6BAA6B,CAAC,YAAY,EAAE,CAAC;KAC5D;;;;;;IAID,KAAK,CACD,yBAAiE,EACjE,4BAAuE;QAEvE,IAAI,CAAC,yBAAyB,qBAAQ,IAAI,CAAC,yBAAyB,EAAK,yBAAyB,CAAE,CAAC;QACrG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACrD,IAAI,CAAC,sBAAsB,qBAAQ,4BAA4B,CAAE,CAAC;QAClE,IAAI,CAAC,6BAA6B,CAAC,IAAI,mBAAM,IAAI,CAAC,yBAAyB,EAAG,CAAC;KAClF;;;;;;IAEO,eAAe,CAAC,aAAkC;QACtD,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;YAClC,aAAa,CAAC,kBAAkB,GAAG,KAAK,CAAC;YACzC,aAAa,CAAC,YAAY,GAAG,KAAK,CAAC;YACnC,aAAa,CAAC,iBAAiB,GAAG,KAAK,CAAC;SAC3C;KACJ;;;YA/EJ,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;YAFzB,gBAAgB;;;;;;;;ACJzB,MAIa,aAAa;;;;IACtB,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;KAAI;;;;;;IAEpE,QAAQ,CAAC,OAAY,EAAE,GAAG,IAAW;QACjC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;KACnC;;;;;IAED,UAAU,CAAC,OAAY;QACnB,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,0BAA0B,EAAE;YAC3E,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACzB;KACJ;;;;;IAED,QAAQ,CAAC,OAAY;QACjB,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,wBAAwB,EAAE;YACzE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACxB;KACJ;;;YAlBJ,UAAU;;;;YAFF,qBAAqB;;;;;;;ACD9B,MAIa,aAAa;;;;IACtB,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;KAAI;;;;;IAEpD,iBAAiB,CAAC,UAAkB;;cAC1B,cAAc,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC;QACjE,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE;YACtC,OAAO,cAAc,CAAC;SACzB;;cACK,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;QACzD,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE;YACpC,OAAO,YAAY,CAAC;SACvB;QACD,OAAO,IAAI,CAAC;KACf;;;;;IAED,qBAAqB,CAAC,UAAkB;;cAC9B,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC7D,aAAa,CAAC,EAAE,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC3C,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAChD,OAAO,aAAa,CAAC;KACxB;;;;;;IAEO,yBAAyB,CAAC,UAAkB;QAChD,IAAI;;kBACM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC;YACvE,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;gBACrC,OAAO,aAAa,CAAC;aACxB;YACD,OAAO,IAAI,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,IAAI,CAAC;SACf;KACJ;;;;;;IAEO,mBAAmB,CAAC,UAAkB;;cACpC,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC;QAChE,IAAI,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE;YACrC,OAAO,aAAa,CAAC;SACxB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;IAEO,eAAe,CAAC,OAA2B;QAC/C,OAAO,CAAC,CAAC,OAAO,IAAI,OAAO,YAAY,iBAAiB,CAAC;KAC5D;;;YA/CJ,UAAU;;;;YAFF,aAAa;;;;;;;ACDtB,MAGa,qBAAqB;;;;;;IAC9B,QAAQ,CAAC,MAAkD,EAAE,MAAkD;QAC3G,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;YACpB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC1C,OAAO,IAAI,CAAC,WAAW,oBAAC,MAAM,uBAAW,MAAM,GAAU,CAAC;SAC7D;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC3C,OAAO,MAAM,KAAK,MAAM,CAAC;SAC5B;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;SACxF;QAED,IAAI,IAAI,CAAC,kCAAkC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;YACzD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;gBACrD,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;aAC/B;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;gBACrD,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;aAC/B;SACJ;KACJ;;;;;;;IAEO,kCAAkC,CAAC,MAA+B,EAAE,MAA+B;QACvG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;KACzH;;;;;;;IAEO,oBAAoB,CAAC,MAA+B,EAAE,MAA+B;QACzF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;KACnE;;;;;;;IAEO,oBAAoB,CAAC,MAA+B,EAAE,MAA+B;QACzF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;KACnE;;;;;;;IAEO,mBAAmB,CAAC,MAA+B,EAAE,MAA+B;QACxF,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACzD;;;;;;IAEO,aAAa,CAAC,KAAU;QAC5B,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,MAAM,CAAC;KAC/D;;;;;;IAEO,aAAa,CAAC,KAAU;QAC5B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;KACpC;;;;;;;IAEO,WAAW,CAAC,IAAmB,EAAE,IAAmB;QACxD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC7B,OAAO,KAAK,CAAC;SAChB;QAED,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,GAAI;YAC7B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;gBACrB,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC;KACf;;;YAjEJ,UAAU;;;;;;;ACFX,MAIa,kBAAkB;;;;IAE3B,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QADjD,mBAAc,GAAG,CAAC,CAAC;KACkC;;;;;IAE7D,sBAAsB,CAAC,WAAgB;QACnC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,OAAO,IAAI,IAAI,EAAE,CAAC;SACrB;;cAEK,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;KACf;;;;;;IAED,kBAAkB,CAAC,KAAU,EAAE,OAAgB;QAC3C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,EAAE,CAAC;SACb;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KACjD;;;;;;IAED,mBAAmB,CAAC,KAAU,EAAE,OAAgB;QAC5C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,EAAE,CAAC;SACb;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KACjD;;;;;;IAED,qBAAqB,CAAC,KAAU,EAAE,OAAgB;QAC9C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,EAAE,CAAC;SACb;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;KACjD;;;;;;;;IAEO,cAAc,CAAC,KAAa,EAAE,KAAa,EAAE,OAAgB;;cAC3D,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC;QAEzD,IAAI,OAAO,EAAE;YACT,OAAO,WAAW,CAAC;SACtB;;cAEK,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC7B;;;;;;IAEO,eAAe,CAAC,GAAW;;YAC3B,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;QAEtD,QAAQ,MAAM,CAAC,MAAM,GAAG,CAAC;YACrB,KAAK,CAAC;gBACF,MAAM;YACV,KAAK,CAAC;gBACF,MAAM,IAAI,IAAI,CAAC;gBACf,MAAM;YACV,KAAK,CAAC;gBACF,MAAM,IAAI,GAAG,CAAC;gBACd,MAAM;YACV;gBACI,MAAM,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;;cAEK,OAAO,GAAG,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAErH,IAAI;;YAEA,OAAO,kBAAkB,CACrB,OAAO;iBACF,KAAK,CAAC,EAAE,CAAC;iBACT,GAAG;;;;YAAC,CAAC,CAAS,KAAK,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAC;iBACzE,IAAI,CAAC,EAAE,CAAC,CAChB,CAAC;SACL;QAAC,OAAO,GAAG,EAAE;YACV,OAAO,OAAO,CAAC;SAClB;KACJ;;;;;;IAEO,YAAY,CAAC,KAAa;QAC9B,IAAI,CAAC,KAAK,EAAE;YACR,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,KAAK,gCAAgC,CAAC,CAAC;YAC7E,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,oBAAC,KAAK,IAAY,QAAQ,CAAC,GAAG,CAAC,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,KAAK,qCAAqC,CAAC,CAAC;YAClF,OAAO,KAAK,CAAC;SAChB;;cAEK,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;QAE9B,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,cAAc,EAAE;YACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,KAAK,gDAAgD,IAAI,CAAC,cAAc,OAAO,CAAC,CAAC;YACvH,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;;IAEO,kBAAkB,CAAC,KAAa,EAAE,KAAa;QACnD,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;KAClC;;;YAzGJ,UAAU;;;;YAFF,aAAa;;;;;;;ACDtB;;;;AAOA,MAAsB,mBAAmB;;;YADxC,UAAU;;MAgBE,cAAc;;;;IAGvB,YAAoB,cAAqC;QAArC,mBAAc,GAAd,cAAc,CAAuB;QACrD,IAAI,CAAC,UAAU,GAAG,OAAO,OAAO,KAAK,WAAW,CAAC;KACpD;;;;;IAEM,IAAI,CAAC,GAAW;QACnB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAC;SAC7I;QAED,OAAO;KACV;;;;;;IAEM,KAAK,CAAC,GAAW,EAAE,KAAU;QAChC,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,KAAK,GAAG,KAAK,KAAK,SAAS,GAAG,IAAI,GAAG,KAAK,CAAC;YAC3C,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CACnD,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,SAAS,EAC7D,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CACxB,CAAC;SACL;KACJ;;;YAxBJ,UAAU;;;;YApBF,qBAAqB;;;;;;;ACD9B,MAMa,kBAAkB;;;;IAiH3B,YAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAhHpD,sBAAiB,GAAG,qBAAqB,CAAC;QAU1C,uBAAkB,GAAG,mBAAmB,CAAC;QAUzC,mBAAc,GAAG,0BAA0B,CAAC;QAU5C,wBAAmB,GAAG,eAAe,CAAC;QAUtC,oBAAe,GAAG,UAAU,CAAC;QAU7B,qBAAgB,GAAG,WAAW,CAAC;QAU/B,wBAAmB,GAAG,eAAe,CAAC;QAUtC,4BAAuB,GAAG,kBAAkB,CAAC;QAU7C,wBAAmB,GAAG,eAAe,CAAC;QAUtC,8BAAyB,GAAG,8BAA8B,CAAC;QAU3D,+BAA0B,GAAG,+BAA+B,CAAC;KAYL;;;;IA9GhE,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KAChD;;;;;IAED,IAAW,UAAU,CAAC,KAAU;QAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;KAC7C;;;;IAID,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;KACvD;;;;;IAED,IAAW,WAAW,CAAC,KAAa;QAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;KAC9C;;;;IAID,IAAW,OAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KACnD;;;;;IAED,IAAW,OAAO,CAAC,KAAa;QAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KAC1C;;;;IAID,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KAClD;;;;;IAED,IAAW,YAAY,CAAC,KAA0B;QAC9C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAC/C;;;;IAID,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAC9C;;;;;IAED,IAAW,QAAQ,CAAC,KAAU;QAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;KAC3C;;;;IAID,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;KACrD;;;;;IAED,IAAW,SAAS,CAAC,KAAa;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;KAC5C;;;;IAID,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;KACxD;;;;;IAED,IAAW,aAAa,CAAC,KAAa;QAClC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAC/C;;;;IAID,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;KAC5D;;;;;IAED,IAAW,gBAAgB,CAAC,KAAa;QACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;KACnD;;;;IAID,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;KAClD;;;;;IAED,IAAW,YAAY,CAAC,KAAU;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAC/C;;;;IAID,IAAW,kBAAkB;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,CAAC;KAC9D;;;;;IAED,IAAW,kBAAkB,CAAC,KAAuB;QACjD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;KACrD;;;;IAID,IAAW,mBAAmB;QAG1B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;KACzD;;;;;IAED,IAAW,mBAAmB,CAAC,KAAmD;QAC9E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;KACtD;;;;;;IAIO,QAAQ,CAAC,GAAW;QACxB,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7C;;;;;;;IAEO,KAAK,CAAC,GAAW,EAAE,KAAU;QACjC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC9C;;;;;IAED,gBAAgB,CAAC,cAAuB;QACpC,IAAI,CAAC,cAAc,EAAE;YACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;YACvC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;YAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;SAC5C;KACJ;;;;IAED,cAAc;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KACjD;;;;IAED,UAAU;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC7C;;;;IAED,eAAe;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KACxC;;;YAnJJ,UAAU;;;;YAJF,mBAAmB;;;;;;;ACD5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,MAAa,sBAAsB;;;;;;IAG/B,YACY,kBAAyC,EACzC,kBAAsC,EACtC,aAA4B;QAF5B,uBAAkB,GAAlB,kBAAkB,CAAuB;QACzC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;KACpC;;;;;;;;IAIJ,cAAc,CAAC,KAAa,EAAE,aAAsB;;YAC5C,OAAY;QAChB,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEpE,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;KAC1E;;;;;;;;;IAKD,iCAAiC,CAAC,gBAAwB,EAAE,aAAsB;;cACxE,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,gBAAgB,CAAC;QAC5F,aAAa,GAAG,aAAa,IAAI,CAAC,CAAC;QAEnC,IAAI,CAAC,mBAAmB,EAAE;YACtB,OAAO,KAAK,CAAC;SAChB;;cAEK,oBAAoB,GAAG,mBAAmB,CAAC,OAAO,EAAE;;cACpD,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,aAAa,GAAG,IAAI;;cAC3D,eAAe,GAAG,oBAAoB,GAAG,aAAa;QAE5D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,uBAAuB,oBAAoB,MAAM,aAAa,MAAM,eAAe,GAAG,CAAC,CAAC;;QAGpH,OAAO,eAAe,CAAC;KAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BD,0BAA0B,CAAC,WAAgB;;YACnC,SAAS,GAAG,IAAI;QACpB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;SACrF;QAED,OAAO,SAAS,CAAC;KACpB;;;;;;;;;IAID,gCAAgC,CAAC,WAAgB,EAAE,yBAAiC,EAAE,0BAAmC;QACrH,IAAI,0BAA0B,EAAE;YAC5B,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SAChB;;cAEK,kBAAkB,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;QACtC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAElD,yBAAyB,GAAG,yBAAyB,IAAI,CAAC,CAAC;QAE3D,IAAI,kBAAkB,IAAI,IAAI,EAAE;YAC5B,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB,oCAAoC,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,GAAG,yBAAyB,GAAG,IAAI,CAC1I,CAAC;QACF,OAAO,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC,OAAO,EAAE,GAAG,yBAAyB,GAAG,IAAI,CAAC;KACjG;;;;;;;;;;;;;IASD,uBAAuB,CAAC,WAAgB,EAAE,UAAe,EAAE,uBAAgC;;cACjF,kBAAkB,GACpB,CAAC,WAAW,CAAC,KAAK,KAAK,SAAS,IAAI,uBAAuB,KAAK,UAAU,KAAK,sBAAsB,CAAC,4BAA4B;QACtI,IAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC,KAAK,KAAK,UAAU,EAAE;YACzD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qDAAqD,GAAG,WAAW,CAAC,KAAK,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC;YACtI,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;;;;IAKD,qBAAqB,CAAC,WAAgB,EAAE,6BAAkC;QACtE,IAAI,oBAAC,WAAW,CAAC,GAAG,4BAAiB,6BAA6B,GAAW,EAAE;YAC3E,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB,iDAAiD;gBAC7C,WAAW,CAAC,GAAG;gBACf,iCAAiC;gBACjC,6BAA6B,CACpC,CAAC;YACF,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;;;;;IAMD,qBAAqB,CAAC,WAAgB,EAAE,GAAQ;QAC5C,IAAI,WAAW,CAAC,GAAG,YAAY,KAAK,EAAE;;kBAC5B,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC;YAErE,IAAI,CAAC,MAAM,EAAE;gBACT,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,wDAAwD,GAAG,WAAW,CAAC,GAAG,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;gBAC9H,OAAO,KAAK,CAAC;aAChB;YAED,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,WAAW,CAAC,GAAG,KAAK,GAAG,EAAE;YAChC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iDAAiD,GAAG,WAAW,CAAC,GAAG,GAAG,aAAa,GAAG,GAAG,CAAC,CAAC;YAEvH,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;IAED,6BAA6B,CAAC,KAAU,EAAE,UAAe;QACrD,IAAI,oBAAC,KAAK,4BAAiB,UAAU,GAAW,EAAE;YAC9C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,+CAA+C,GAAG,KAAK,GAAG,eAAe,GAAG,UAAU,CAAC,CAAC;YACpH,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;IAED,8BAA8B,CAAC,UAAe,EAAE,WAAgB;QAC5D,IAAI,oBAAC,UAAU,4BAAiB,WAAW,GAAW,EAAE;YACpD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,uDAAuD,GAAG,UAAU,GAAG,gBAAgB,GAAG,WAAW,CAAC,CAAC;YACnI,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;;;;;;;;;;IAMD,2BAA2B,CAAC,OAAY,EAAE,OAAY;QAClD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAC3B,OAAO,KAAK,CAAC;SAChB;;cAEK,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC;QAE7E,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,WAAW,KAAK,MAAM,EAAE;YAC3E,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,6BAA6B,CAAC,CAAC;YAC7D,OAAO,KAAK,CAAC;SAChB;;cAEK,GAAG,GAAG,UAAU,CAAC,GAAG;;cACpB,GAAG,GAAG,UAAU,CAAC,GAAG;QAE1B,IAAI,OAAO,yBAAM,GAAG,GAAW,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;YACtD,OAAO,KAAK,CAAC;SAChB;;YAEG,OAAO,GAAG,KAAK;QAEnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;;;;gBAG/B,oBAAoB,GAAG,CAAC;YAC5B,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;gBAC5B,IAAI,oBAAC,GAAG,CAAC,GAAG,QAAgB,KAAK,IAAI,oBAAC,GAAG,CAAC,GAAG,QAAgB,KAAK,EAAE;oBAChE,oBAAoB,GAAG,oBAAoB,GAAG,CAAC,CAAC;iBACnD;aACJ;YAED,IAAI,oBAAoB,KAAK,CAAC,EAAE;gBAC5B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oEAAoE,CAAC,CAAC;gBACpG,OAAO,KAAK,CAAC;aAChB;iBAAM,IAAI,oBAAoB,GAAG,CAAC,EAAE;gBACjC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,wEAAwE,CAAC,CAAC;gBACxG,OAAO,KAAK,CAAC;aAChB;iBAAM;gBACH,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;oBAC5B,IAAI,oBAAC,GAAG,CAAC,GAAG,QAAgB,KAAK,IAAI,oBAAC,GAAG,CAAC,GAAG,QAAgB,KAAK,EAAE;;8BAC1D,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;wBACrC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;wBAC7D,IAAI,CAAC,OAAO,EAAE;4BACV,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qDAAqD,CAAC,CAAC;yBACxF;wBACD,OAAO,OAAO,CAAC;qBAClB;iBACJ;aACJ;SACJ;aAAM;;YAEH,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE;gBAC5B,IAAI,oBAAC,GAAG,CAAC,GAAG,4BAAiB,GAAG,GAAW,EAAE;;0BACnC,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;oBACrC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC7D,IAAI,CAAC,OAAO,EAAE;wBACV,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qDAAqD,CAAC,CAAC;qBACxF;oBACD,OAAO,OAAO,CAAC;iBAClB;aACJ;SACJ;QAED,OAAO,OAAO,CAAC;KAClB;;;;;IAED,6BAA6B,CAAC,YAAoB;QAC9C,IAAI,YAAY,KAAK,gBAAgB,IAAI,YAAY,KAAK,UAAU,EAAE;YAClE,OAAO,IAAI,CAAC;SACf;QAED,IAAI,YAAY,KAAK,MAAM,EAAE;YACzB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oDAAoD,GAAG,YAAY,CAAC,CAAC;QACnG,OAAO,KAAK,CAAC;KAChB;;;;;;;;;;;;;;;;;;;;;;;;;IAsBD,yBAAyB,CAAC,WAAgB,EAAE,MAAW,EAAE,UAAmB;QACxE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,0BAA0B,GAAG,MAAM,CAAC,CAAC;;QAGjE,IAAI,UAAU,EAAE;YACZ,IAAI,qBAAE,MAAM,GAAW,EAAE;gBACrB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,mEAAmE,CAAC,CAAC;gBACjG,OAAO,IAAI,CAAC;aACf;SACJ;;cAEK,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,WAAW,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,wCAAwC,GAAG,QAAQ,CAAC,CAAC;QACjF,IAAI,QAAQ,yBAAM,MAAM,GAAW,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;aAAM;;kBACG,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC7E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,eAAe,GAAG,SAAS,CAAC,CAAC;YACzD,IAAI,SAAS,yBAAM,MAAM,GAAW,EAAE;gBAClC,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,KAAK,CAAC;KAChB;;;;;;IAEO,gBAAgB,CAAC,WAAgB;;cAC/B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC;;cACzD,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;cAC9C,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC;QAExC,OAAO,QAAQ,CAAC;KACnB;;;;;IAED,sBAAsB,CAAC,aAAkB;;cAC/B,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC;;cAC3D,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC;QAEhC,OAAO,QAAQ,CAAC;KACnB;;AAnVM,mDAA4B,GAAG,kBAAkB,CAAC;;YAF5D,UAAU;;;;YA9CF,qBAAqB;YACrB,kBAAkB;YAClB,aAAa;;;;;;;ACJtB,MAWa,sBAAsB;;;;;;;;IAC/B,YACW,kBAAsC,EACrC,sBAA8C,EAC9C,kBAAsC,EACtC,aAA4B,EACnB,qBAA4C;QAJtD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACrC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QACnB,0BAAqB,GAArB,qBAAqB,CAAuB;KAC7D;;;;;;IAEJ,aAAa,CAAC,MAAW,EAAE,OAAgB;;cACjC,QAAQ,GAAG,IAAI,mBAAmB,EAAE;QAC1C,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;YACpH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;YACpE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;YACnD,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACpC,OAAO,QAAQ,CAAC;SACnB;QAED,IACI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,gBAAgB;YACjF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EACzE;YACE,QAAQ,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;SAC/C;QAED,IAAI,MAAM,CAAC,QAAQ,EAAE;YACjB,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAEpC,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAElG,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;gBACtF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yDAAyD,CAAC,CAAC;gBACvF,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,eAAe,CAAC;gBAClD,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IACI,CAAC,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAChD,QAAQ,CAAC,gBAAgB,EACzB,IAAI,CAAC,kBAAkB,CAAC,SAAS,EACjC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,0BAA0B,CAC5E,EACH;gBACE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;gBACpE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,cAAc,CAAC;gBACjD,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;gBACpF,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qFAAqF,CAAC,CAAC;gBACnH,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,uBAAuB,CAAC;gBAC1D,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IACI,CAAC,IAAI,CAAC,sBAAsB,CAAC,gCAAgC,CACzD,QAAQ,CAAC,gBAAgB,EACzB,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,0CAA0C,EACzF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,6BAA6B,CAC/E,EACH;gBACE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oGAAoG,CAAC,CAAC;gBACpI,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;gBACnD,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;gBAC/C,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,EAAE;oBACnE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,wDAAwD,CAAC,CAAC;iBACzF;qBAAM,IACH,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB;oBAClE,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAC9C,QAAQ,CAAC,gBAAgB,EACzB,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,MAAM,CACvD,EACH;oBACE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,+EAA+E,CAAC,CAAC;oBAC/G,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,qBAAqB,CAAC;oBACxD,IAAI,CAAC,4BAA4B,EAAE,CAAC;oBACpC,OAAO,QAAQ,CAAC;iBACnB;aACJ;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;gBACrE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,wBAAwB,CAAC;gBAC3D,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IACI,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAC9C,QAAQ,CAAC,gBAAgB,EACzB,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAC3D,EACH;gBACE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAC;gBAClE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;YAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,iCAAiC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;gBAC3F,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kCAAkC,CAAC,CAAC;gBAClE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC/C,IAAI,CAAC,4BAA4B,EAAE,CAAC;gBACpC,OAAO,QAAQ,CAAC;aACnB;SACJ;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC;SAClF;;QAGD,IACI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,gBAAgB;YACjF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EACzE;YACE,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC;YACpC,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACpC,OAAO,QAAQ,CAAC;SACnB;QAED,IACI,CAAC,IAAI,CAAC,sBAAsB,CAAC,yBAAyB,CAClD,QAAQ,CAAC,YAAY,EACrB,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EACjC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,CAC1E;YACD,CAAC,QAAQ,CAAC,YAAY,EACxB;YACE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,sCAAsC,CAAC,CAAC;YACtE,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,eAAe,CAAC;YAClD,IAAI,CAAC,4BAA4B,EAAE,CAAC;YACpC,OAAO,QAAQ,CAAC;SACnB;QAED,QAAQ,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,QAAQ,CAAC,KAAK,GAAG,gBAAgB,CAAC,EAAE,CAAC;QACrC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,OAAO,QAAQ,CAAC;KACnB;;;;;IAEO,0BAA0B;QAC9B,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,EAAE,CAAC;QAEvC,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qCAAqC,EAAE;YACtF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,EAAE,CAAC;SACjD;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iDAAiD,CAAC,CAAC;KAClF;;;;;IAEO,4BAA4B;QAChC,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,EAAE,CAAC;QAEvC,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qCAAqC,EAAE;YACtF,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,EAAE,CAAC;SACjD;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qCAAqC,CAAC,CAAC;KACtE;;;YAnKJ,UAAU;;;;YAHF,kBAAkB;YAClB,sBAAsB;YAHtB,kBAAkB;YAClB,aAAa;YAFb,qBAAqB;;;;;;;ACJ9B;MAQM,mCAAmC,GAAG,yBAAyB;;AAKrE,MAAa,wBAAwB;;;;;;;;IAcjC,YACY,kBAAsC,EACtC,aAA4B,EAC5B,aAA4B,EAC5B,IAAY,EACH,qBAA4C;QAJrD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QAC5B,kBAAa,GAAb,aAAa,CAAe;QAC5B,SAAI,GAAJ,IAAI,CAAQ;QACH,0BAAqB,GAArB,qBAAqB,CAAuB;QAfzD,sBAAiB,GAAG,CAAC,CAAC;QACtB,wBAAmB,GAAG,CAAC,CAAC;QACxB,sBAAiB,GAAG,IAAI,CAAC;QACzB,0BAAqB,GAAG,KAAK,CAAC;QAC9B,wBAAmB,GAAG,IAAI,OAAO,EAAO,CAAC;KAY7C;;;;IAVJ,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;KAClD;;;;;IAUO,gBAAgB;;cACd,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,mCAAmC,CAAC;QAEhG,IAAI,CAAC,cAAc,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;QACpC,OAAO,IAAI,CAAC;KACf;;;;;IAEO,IAAI;QACR,IAAI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;YAClE,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACvB;QAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE;YAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,mCAAmC,CAAC,CAAC;YACnG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;SACtE;QAED,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAChD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qEAAqE,CAAC,CAAC;YACrG,OAAO;SACV;QAED,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;YACpE,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;SACzH;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,yDAAyD,CAAC,CAAC;SAC5F;QAED,OAAO,UAAU,CAAC,MAAM;;;;QAAC,CAAC,QAA4C;YAClE,IAAI,CAAC,aAAa,CAAC,MAAM;;;YAAG;gBACxB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACpC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB,CAAA,CAAC;SACL,EAAC,CAAC;KACN;;;;;IAED,oBAAoB,CAAC,QAAgB;QACjC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO;SACV;QAED,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACpC;;;;IAED,mBAAmB;QACf,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC1B,OAAO;SACV;QAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAClC;;;;;;IAEO,iBAAiB,CAAC,QAAgB;;cAChC,sBAAsB;;;QAAG;YAC3B,IAAI,CAAC,IAAI,EAAE;iBACN,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACb,SAAS;;;YAAC;gBACP,IAAI,IAAI,CAAC,aAAa,IAAI,QAAQ,EAAE;oBAChC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;0BAC1C,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY;oBACzD,IAAI,YAAY,EAAE;wBACd,IAAI,CAAC,mBAAmB,EAAE,CAAC;wBAC3B,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,WAAW,CACxC,QAAQ,GAAG,GAAG,GAAG,YAAY,EAC7B,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAC3D,CAAC;qBACL;yBAAM;wBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,mEAAmE,CAAC,CAAC;wBACjG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;qBACnC;iBACJ;qBAAM;oBACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,yEAAyE,CAAC,CAAC;oBACzG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;iBAEnD;;gBAGD,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE;oBAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB;oDACwB,IAAI,CAAC,mBAAmB,uBAAuB,CAC1E,CAAC;oBACF,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;iBACnC;gBAED,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC,sBAAsB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACxF,EAAC,CAAC;SACV,CAAA;QAED,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAE7B,IAAI,CAAC,IAAI,CAAC,iBAAiB;;;QAAC;YACxB,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC,sBAAsB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACxF,EAAC,CAAC;KACN;;;;;IACO,uBAAuB;QAC3B,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;KAClC;;;;;;IAEO,cAAc,CAAC,CAAM;QACzB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IACI,IAAI,CAAC,aAAa;YAClB,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS;YACrE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa,CAAC,aAAa,EAC/C;YACE,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;gBACpB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,wCAAwC,CAAC,CAAC;aAC3E;iBAAM,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;aACnC;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,mCAAmC,CAAC,CAAC;aAC7E;SACJ;KACJ;;;YAjJJ,UAAU;;;;YANF,kBAAkB;YADlB,aAAa;YADb,aAAa;YAJD,MAAM;YAGlB,qBAAqB;;;;;;;ACH9B,MAYa,iBAAiB;;;;;IAO1B,YAA6B,aAA4B,EAAmB,UAAsB;QAArE,kBAAa,GAAb,aAAa,CAAe;QAAmB,eAAU,GAAV,UAAU,CAAY;QAN1F,gCAA2B,GAAG,IAAI,aAAa,CAAe,CAAC,CAAC,CAAC;KAM6B;;;;IAJtG,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,2BAA2B,CAAC,YAAY,EAAE,CAAC;KAC1D;;;;;IAID,IAAI,CAAC,SAAiB;QAClB,OAAO,IAAI,CAAC,UAAU;aACjB,GAAG,CAAC,SAAS,CAAC;aACd,IAAI,CACD,SAAS;;;;QAAC,mBAAmB;YACzB,OAAO,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;SAC3D,EAAC,EACF,UAAU;;;;QAAC,KAAK;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,sDAAsD,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;YACtG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SACpB,EAAC,CACL;aACA,SAAS,EAAE,CAAC;KACpB;;;;;IAED,oBAAoB,CAAC,SAAiB;QAClC,OAAO,IAAI,CAAC,sBAAsB,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;KACjE;;;;;IAED,2BAA2B,CAAC,GAAW;QACnC,OAAO,IAAI,CAAC,UAAU;aACjB,GAAG,CAAC,GAAG,CAAC;aACR,IAAI,CACD,SAAS;;;;QAAC,kBAAkB;YACxB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC;gBAClC,sBAAsB,EAAE,kBAAkB;gBAC1C,YAAY,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE;aACnC,CAAC,CAAC;YACH,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACnB,EAAC,EACF,UAAU;;;;QAAC,KAAK;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,6EAA6E,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;YACvH,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SACpB,EAAC,CACL;aACA,SAAS,EAAE,CAAC;KACpB;;;;;;IAEO,sBAAsB,CAAC,YAAiB;QAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;YACzB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,wDAAwD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;YAClI,MAAM,IAAI,KAAK,CAAC,wDAAwD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;SAC3G;;cAEK,GAAG,GAAG,GAAG,YAAY,CAAC,SAAS,mCAAmC;QAExE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAChC,SAAS;;;;QAAC,kBAAkB;YACxB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC;gBAClC,sBAAsB,EAAE,kBAAkB;gBAC1C,YAAY,EAAE,YAAY;aAC7B,CAAC,CAAC;YACH,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACnB,EAAC,EACF,UAAU;;;;QAAC,KAAK;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,sEAAsE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;YAChH,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SACpB,EAAC,CACL,CAAC;KACL;;;YAxEJ,UAAU;;;;YAPF,aAAa;YAJb,UAAU;;;;;;;ACAnB;MAKM,kCAAkC,GAAG,wBAAwB;AAGnE,MAAa,uBAAuB;;;;;IAChC,YAAoB,aAA4B,EAAU,aAA4B;QAAlE,kBAAa,GAAb,aAAa,CAAe;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;;;;IAE1F,SAAS;;cACC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,kCAAkC,CAAC;QAC/F,IAAI,CAAC,cAAc,EAAE;YACjB,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,kCAAkC,CAAC,CAAC;SACvF;QACD,OAAO,cAAc,CAAC;KACzB;;;;;IAED,UAAU,CAAC,GAAW;;cACZ,aAAa,GAAG,IAAI,CAAC,SAAS,EAAE;QACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAqB,GAAG,GAAG,CAAC,CAAC;QACzD,OAAO,IAAI,UAAU;;;;QAAO,QAAQ;;kBAC1B,aAAa;;;YAAG;gBAClB,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;gBACzD,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACzB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB,CAAA;YACD,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACtD,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;YACxB;;;YAAO;gBACH,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC5D,EAAC;SACL,EAAC,CAAC;KACN;;;YA3BJ,UAAU;;;;YAJF,aAAa;YADb,aAAa;;;;;;;ACFtB,MASa,uBAAuB;;;;;;;IAGhC,YACY,eAAgC,EAChC,kBAAsC,EACtC,aAA4B,EACnB,qBAA4C;QAHrD,oBAAe,GAAf,eAAe,CAAiB;QAChC,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QACnB,0BAAqB,GAArB,qBAAqB,CAAuB;QANzD,aAAQ,GAAQ,EAAE,CAAC;KAOvB;;;;IAEJ,YAAY;QACR,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,GAAG;;;;QAAC,CAAC,IAAS,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAC,CAAC,CAAC;KACtF;;;;IAED,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;KACxB;;;;;IAED,WAAW,CAAC,KAAU;QAClB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACzB;;;;;IAEO,mBAAmB;;cACjB,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE;QAEtD,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAChD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,yDAAyD,CAAC,CAAC;YAEzF,MAAM,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACtD;;cAEK,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB;QAEvI,IAAI,CAAC,cAAc,EAAE;YACjB,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB,gHAAgH,CACnH,CAAC;YACF,MAAM,KAAK,CAAC,uDAAuD,CAAC,CAAC;SACxE;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,iBAAiB,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;KACjI;;;YA9CJ,UAAU;;;;YALF,eAAe;YAGf,kBAAkB;YADlB,aAAa;YADb,qBAAqB;;;;;;;ACF9B,MAAa,UAAU;;;;;IACnB,SAAS,CAAC,GAAW;QACjB,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAClC;;;;;IAED,WAAW,CAAC,KAAa;QACrB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACpC;;;;;IAED,SAAS,CAAC,GAAW;QACjB,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;KAClC;;;;;IAED,WAAW,CAAC,KAAa;QACrB,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACpC;CACJ;;;;;;AClBD,MAGa,gBAAgB;;;;;;IACzB,eAAe,CAAC,UAAe,EAAE,IAAS;QACtC,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,EAAE,CAAC;SACb;QAED,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,EAAE,CAAC;SACb;QAED,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;;cACpD,KAAK,GAAG,IAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,GAAG,WAAW,CAAC;;cACjD,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;QACtC,OAAO,OAAO,KAAK,IAAI,GAAG,EAAE,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KACjE;;;YAfJ,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;;;;;ACFlC;AA4BA,MAAa,mBAAmB;;;;;;;;;;;;;;;;;IAmC5B,YACY,eAAgC,EAChC,sBAA8C,EAC9C,MAAc,EACd,wBAAkD,EAClD,uBAAgD,EAChD,uBAAgD,EAChD,kBAAsC,EACtC,sBAA8C,EAC9C,kBAAsC,EACtC,aAA4B,EAC5B,IAAY,EACH,UAAsB,EACtB,qBAA4C,EAC5C,gBAAkC;QAb3C,oBAAe,GAAf,eAAe,CAAiB;QAChC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,WAAM,GAAN,MAAM,CAAQ;QACd,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAe;QAC5B,SAAI,GAAJ,IAAI,CAAQ;QACH,eAAU,GAAV,UAAU,CAAY;QACtB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAhD/C,mBAAc,GAAG,IAAI,OAAO,EAAW,CAAC;QACxC,2BAAsB,GAAG,IAAI,OAAO,EAAW,CAAC;QAChD,2BAAsB,GAAG,IAAI,OAAO,EAAuB,CAAC;QAkBpE,wBAAmB,GAAG,KAAK,CAAC;QAC5B,gBAAW,GAAG,KAAK,CAAC;QAEZ,mBAAc,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QAErD,kBAAa,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QAGpD,cAAS,GAAG,IAAI,eAAe,CAAM,EAAE,CAAC,CAAC;QACzC,iCAA4B,GAAG,KAAK,CAAC;QACrC,8BAAyB,GAAG,KAAK,CAAC;QAoBtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;;;QAAC;YACvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClC,EAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACjD,MAAM;;;;QAAC,CAAC,aAAsB,KAAK,aAAa,EAAC,EACjD,SAAS;;;QAAC;YACN,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;gBAC9D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,sDAAsD,CAAC,CAAC;gBACpF,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aACvB;;kBAEK,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,IAAI,CAChD,MAAM;;;;YAAC,CAAC,YAAqB,KAAK,YAAY,EAAC,EAC/C,IAAI,CAAC,CAAC,CAAC,EACP,GAAG;;;YAAC,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,uDAAuD,CAAC,EAAC;;YAE/F,IAAI,CACA,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,CAAC,CAAC,CAAC,EACP,GAAG;;;YAAC,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yDAAyD,CAAC,EAAC,EACjG,GAAG;;;YAAC,MAAM,IAAI,EAAC,CAClB,EACD,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,mCAAmC,GAAG,IAAI,CAAC,CAAC,IAAI;;YAEjG,GAAG;;;YAAC;gBACA,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,EAAE,CAAC;gBACvC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,8CAA8C,CAAC,CAAC;aACjF,EAAC,EACF,GAAG;;;YAAC,MAAM,IAAI,EAAC,CAClB,CACJ,CACJ;YAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,6DAA6D,CAAC,CAAC;YAC3F,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,KAAK,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,KAAK,SAAS,EAAE;;gBAE7F,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,+DAA+D,CAAC,CAAC;gBAC7F,IAAI,CAAC,cAAc,EAAE,CAAC,SAAS,EAAE,CAAC;aACrC;YAED,OAAO,KAAK,CAAC;SAChB,EAAC,EACF,GAAG;;;QAAC,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,6BAA6B,CAAC,EAAC,EACrE,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,EAC9C,GAAG;;;;QAAC,CAAC,YAAqB,KAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,oBAAoB,YAAY,EAAE,CAAC,EAAC,EAC/F,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;QAEF,IAAI,CAAC,qBAAqB;aACrB,IAAI,CAAC,MAAM;;;QAAC,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,EAAC,CAAC;aACrF,SAAS;;;;QAAC,oBAAoB;YAC3B,IAAI,oBAAoB,EAAE;gBACtB,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;aAChH;iBAAM;gBACH,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,EAAE,CAAC;aACvD;SACJ,EAAC,CAAC;KACV;;;;IA1GD,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;KAC7C;;;;IAED,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,CAAC;KACrD;;;;IAED,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,CAAC;KACrD;;;;IAED,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC;KAC3D;;;;;;IA8FD,WAAW,CAAC,mBAAwC,EAAE,sBAA8C;QAChG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;QAE9E,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,SAAS;;;QAAC;YAC1D,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;YACrD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC9D,EAAC,CAAC;;cAEG,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ;QACjD,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SAC9B;;cAEK,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY;QACzD,IAAI,YAAY,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;YACzD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;YAC7D,IACI,IAAI,CAAC,sBAAsB,CAAC,cAAc,CACtC,IAAI,CAAC,kBAAkB,CAAC,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,EACtE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,8BAA8B,CAChF,EACH;gBACE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,oDAAoD,CAAC,CAAC;aACrF;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,8CAA8C,CAAC,CAAC;gBAC5E,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAEvG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;YAC7D,IAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE,CAAC;;;;YAKzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;kBAE/D,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE;;kBAE1B,yBAAyB,GAAQ;;;;YAAC,CAAC,CAAc;gBACnD,IAAI,CAAC,CAAC,MAAM,KAAK,UAAU,EAAE;oBACzB,MAAM,CAAC,mBAAmB,CAAC,2BAA2B,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;oBACpF,MAAM,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,yBAAyB,CAAC,CAAC;iBACnF;aACJ,GAAE,IAAI,CAAC,IAAI,CAAC;YAEb,MAAM,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,yBAAyB,EAAE,KAAK,CAAC,CAAC;YACpF,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,EAAE,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAExF,MAAM,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,wBAAwB,EAAE;gBACtC,MAAM,EAAE,UAAU;aACrB,CAAC,CACL,CAAC;SACL;KACJ;;;;;IAED,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;KACxC;;;;IAED,gBAAgB;QACZ,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;KAC7C;;;;IAED,eAAe;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC;KACrC;;;;IAED,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE;YAChC,OAAO,EAAE,CAAC;SACb;;cAEK,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE;QACtD,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACpC;;;;IAED,UAAU;QACN,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE;YAChC,OAAO,EAAE,CAAC;SACb;;cAEK,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;QAClD,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACpC;;;;IAED,eAAe;QACX,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE;YAChC,OAAO,EAAE,CAAC;SACb;;cAEK,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE;QACvD,OAAO,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACpC;;;;;IAED,qBAAqB,CAAC,MAAM,GAAG,KAAK;;cAC1B,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE;QAC/B,OAAO,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACrE;;;;;IAED,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,KAAK,CAAC;KACpD;;;;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;KACnD;;;;;IAED,0BAA0B,CAAC,MAAoD;QAC3E,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,GAAG,MAAM,CAAC;KACxD;;;;;;IAGD,SAAS,CAAC,UAAiC;QACvC,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAC/C,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC;SAC5C;QAED,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE;YACpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,4DAA4D,CAAC,CAAC;YAC1F,OAAO;SACV;QAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAE;;YAE1H,OAAO;SACV;QAED,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAEnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yCAAyC,CAAC,CAAC;;YAEnE,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;QACpD,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,KAAK,CAAC;SACpD;;cAEK,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE;QACnD,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,6CAA6C,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;;YAElH,GAAG,GAAG,EAAE;;QAEZ,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EAAE;;;kBAEnE,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;;kBACvF,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,aAAa,CAAC;YAExF,IAAI,CAAC,kBAAkB,CAAC,aAAa,GAAG,aAAa,CAAC;YAEtD,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;gBAC/C,GAAG,GAAG,IAAI,CAAC,kBAAkB,CACzB,IAAI,EACJ,cAAc,EACd,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAC3D,KAAK,EACL,KAAK,EACL,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,EAAE,CAC7E,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qCAAqC,CAAC,CAAC;aACtE;SACJ;aAAM;;YAGH,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;gBAC/C,GAAG,GAAG,IAAI,CAAC,kBAAkB,CACzB,KAAK,EACL,EAAE,EACF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAC3D,KAAK,EACL,KAAK,EACL,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,EAAE,CAC7E,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qCAAqC,CAAC,CAAC;aACtE;SACJ;QAED,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,GAAG,CAAC,CAAC;SACnB;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB;KACJ;;;;;;IAGD,0BAA0B,CAAC,UAAkB;QACzC,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,CAAC;KAC5D;;;;;IACD,2BAA2B,CAAC,UAAkB;;cACpC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC;;cAChE,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC;;cAClE,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,IAAI,IAAI;QAE/F,IAAI,CAAC,KAAK,EAAE;YACR,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YAC/C,OAAO,EAAE,EAAE,CAAC;SACf;QACD,IAAI,CAAC,IAAI,EAAE;YACP,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;YAC9C,OAAO,EAAE,EAAE,CAAC;SACf;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iCAAiC,GAAG,UAAU,CAAC,CAAC;QAC5E,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;KACjE;;;;;;;;IAGD,qBAAqB,CAAC,IAAY,EAAE,KAAa,EAAE,YAA2B;QAC1E,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;KACtE;;;;;;;IAED,sBAAsB,CAAC,IAAY,EAAE,KAAa,EAAE,YAA2B;QAC3E,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAC3B,MAAM;;;;QAAC,aAAa,IAAI,CAAC,CAAC,aAAa,EAAC,EACxC,IAAI,CAAC,CAAC,CAAC,EACP,SAAS;;;QAAC;YACN,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;SAC1E,EAAC,CACL,CAAC;KACL;;;;;;;IAGD,8BAA8B,CAAC,IAAY,EAAE,KAAa;;YAClD,eAAe,GAAG,EAAE;QACxB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,cAAc,EAAE;YAC/G,eAAe,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;SACvF;;YAEG,OAAO,GAAgB,IAAI,WAAW,EAAE;QAC5C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;;cAErE,IAAI,GAAG,sCAAsC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,kBAAkB,IAAI,EAAE;QAEnI,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAChE,GAAG;;;;QAAC,QAAQ;YACR,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,0BAA0B,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;;gBAC/E,GAAG,GAAQ,IAAI,MAAM,EAAE;YAC3B,GAAG,GAAG,QAAQ,CAAC;YACf,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;YAElB,IAAI,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC;SACjD,EAAC,EACF,UAAU;;;;QAAC,KAAK;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,4BAA4B,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,CAAC;YACpH,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SACpB,EAAC,CACL,CAAC;KACL;;;;;;;IAED,8BAA8B,CAAC,IAAY,EAAE,KAAa,EAAE,aAA4B;QACpF,IAAI,CAAC,+BAA+B,CAAC,IAAI,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;KAChF;;;;;;;;IAGD,+BAA+B,CAAC,IAAY,EAAE,KAAa,EAAE,aAA4B;;YACjF,eAAe,GAAG,EAAE;QACxB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,cAAc,EAAE;YAC/G,eAAe,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC;SACvF;QAED,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;YAC7G,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;;YAEpE,OAAO,UAAU,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACnD;;YAEG,OAAO,GAAgB,IAAI,WAAW,EAAE;QAC5C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;;YAEvE,IAAI,GAAG,OAAO,CAAA,2CAA2C,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS;6BAChG,IAAI,CAAC,kBAAkB,CAAC,aAAa;oBAC9C,IAAI,iBAAiB,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;QAE9F,IAAI,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,KAAK,SAAS,EAAE;YAC1D,IAAI,GAAG,OAAO,CAAA,2CAA2C,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS;iCAC5F,IAAI,CAAC,kBAAkB,CAAC,aAAa;wBAC9C,IAAI;gCACI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;SACzF;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,CAChE,GAAG;;;;QAAC,QAAQ;;gBACJ,GAAG,GAAQ,IAAI,MAAM,EAAE;YAC3B,GAAG,GAAG,QAAQ,CAAC;YACf,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;YAClB,GAAG,CAAC,aAAa,GAAG,aAAa,CAAC;YAElC,IAAI,CAAC,mCAAmC,CAAC,GAAG,CAAC,CAAC;YAE9C,OAAO,SAAS,CAAC;SACpB,EAAC,EACF,UAAU;;;;QAAC,KAAK;YACZ,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,4BAA4B,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,CAAC;YACpH,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC5B,EAAC,CACL,CAAC;KACL;;;;;;;IAGO,mCAAmC,CAAC,MAAW;;cAC7C,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB;;cACxD,cAAc,GAAG,WAAW,KAAK,SAAS;QAEhD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,mDAAmD,CAAC,CAAC;QACjF,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAC5C,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;KAC5D;;;;;;;IAGO,uCAAuC,CAAC,IAAa;;cACnD,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB;;cACxD,cAAc,GAAG,WAAW,KAAK,SAAS;QAEhD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,wCAAwC,CAAC,CAAC;QACtE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;QAE5C,IAAI,GAAG,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;cAExC,MAAM,GAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM;;;;;QAAC,CAAC,UAAe,EAAE,IAAY;;kBAC/D,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YAC7B,UAAU,oBAAC,KAAK,CAAC,KAAK,EAAE,GAAW,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtD,OAAO,UAAU,CAAC;SACrB,GAAE,EAAE,CAAC;QAEN,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;KAC5D;;;;;;IAGD,8BAA8B,CAAC,IAAa;QACxC,IAAI,CAAC,cAAc;aACd,IAAI,CACD,MAAM;;;;QAAC,CAAC,aAAsB,KAAK,aAAa,EAAC,EACjD,IAAI,CAAC,CAAC,CAAC,CACV;aACA,SAAS;;;QAAC;YACP,IAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,CAAC;SACtD,EAAC,CAAC;KACV;;;;;;IAEO,UAAU,CAAC,GAAW;QAC1B,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;KAC9B;;;;;;;;IAGO,2BAA2B,CAAC,MAAW,EAAE,cAAuB;QACpE,IAAI,CAAC,kBAAkB,CAAC,UAAU,GAAG,MAAM,CAAC;QAE5C,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,mBAAmB,IAAI,CAAC,cAAc,EAAE;;YAExF,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC7G;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;SAC5D;QAED,IAAI,MAAM,CAAC,KAAK,EAAE;YACd,IAAI,cAAc,EAAE;gBAChB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACvC;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACzC;YAED,IAAI,oBAAC,MAAM,CAAC,KAAK,QAAgB,gBAAgB,EAAE;gBAC/C,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,aAAa,EAAE,cAAc,CAAC,CAC3G,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,sBAAsB,EAAE,cAAc,CAAC,CACpH,CAAC;aACL;YAED,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,EAAE,CAAC;YAEvC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,IAAI,CAAC,cAAc,EAAE;gBACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;aAC7F;SACJ;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,oDAAoD,CAAC,CAAC;YAElF,IAAI,CAAC,cAAc,EAAE,CAAC,SAAS;;;;YAC3B,OAAO;;sBACG,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,OAAO,CAAC;gBAEtE,IAAI,gBAAgB,CAAC,mBAAmB,EAAE;oBACtC,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,YAAY,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBACpF,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,GAAG,EAAE,CAAC;oBAEhD,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,EAAE;wBAC9D,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,MAAM,EAAE,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,SAAS;;;;wBAC5G,QAAQ;4BACJ,IAAI,QAAQ,EAAE;gCACV,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,UAAU,EAAE,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,CACjG,CAAC;gCACF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,IAAI,CAAC,cAAc,EAAE;oCACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC;iCAC3F;6BACJ;iCAAM;gCACH,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,CACnG,CAAC;gCACF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,IAAI,CAAC,cAAc,EAAE;oCACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;iCAC7F;6BACJ;yBACJ;;;;wBACD,GAAG;;4BAEC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,2CAA2C,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;yBACpG,EACJ,CAAC;qBACL;yBAAM;wBACH,IAAI,CAAC,cAAc,EAAE;;4BAEjB,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;4BAC5E,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC,CAAC;yBAChE;wBAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAE1B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,UAAU,EAAE,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,CACjG,CAAC;wBACF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,IAAI,CAAC,cAAc,EAAE;4BACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC;yBAC3F;qBACJ;iBACJ;qBAAM;;oBAEH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,2DAA2D,CAAC,CAAC;oBAC3F,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACpD,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,GAAG,EAAE,CAAC;oBAEhD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAC5B,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,CACnG,CAAC;oBACF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,IAAI,CAAC,cAAc,EAAE;wBACvG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBAC7F;iBACJ;aACJ;;;;YACD,GAAG;;gBAEC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,4CAA4C,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,GAAG,EAAE,CAAC;aACnD,EACJ,CAAC;SACL;KACJ;;;;;;;;IAED,WAAW,CAAC,cAAc,GAAG,KAAK,EAAE,MAAY,EAAE,QAAc,EAAE,gBAAsB;QACpF,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC9D,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;QACjE,gBAAgB,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAEtH,OAAO,IAAI,UAAU;;;;QAAU,QAAQ;;YAEnC,IACI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,gBAAgB;gBACjF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EACzE;gBACE,IAAI,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;oBACxC,IAAI,CAAC,kBAAkB,CAAC,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;oBAC5D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACvB;qBAAM;oBACH,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC,SAAS;;;oBAAC;wBAClD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kDAAkD,CAAC,CAAC;;8BAE1E,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE;wBAE3D,IAAI,IAAI,CAAC,sBAAsB,CAAC,8BAA8B,CAAC,gBAAgB,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;4BAChG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;4BAC3B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;4BACjE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC,CAAC;4BAExE,IAAI,CAAC,kBAAkB,CAAC,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;4BAE5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;4BAC1B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACvB;6BAAM;;4BAEH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,kEAAkE,CAAC,CAAC;4BAClG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,2DAA2D,CAAC,CAAC;4BACzF,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;4BACnC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACxB;wBACD,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACvB,EAAC,CAAC;iBACN;aACJ;iBAAM;;gBAEH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,kCAAkC,CAAC,CAAC;gBAChE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;;gBAGjE,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;gBAC3D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC,CAAC;gBAE7D,IAAI,CAAC,kBAAkB,CAAC,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC;gBAE5D,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAE1B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB;SACJ,EAAC,CAAC;KACN;;;;;IAED,MAAM,CAAC,UAAiC;;QAEpC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,+BAA+B,CAAC,CAAC;QAE7D,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAC/C,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;;sBAC9D,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB;;sBACzF,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO;;sBAC/C,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,aAAa,CAAC;gBAEzE,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBAEnC,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,IAAI,IAAI,CAAC,mBAAmB,EAAE;oBAC/F,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yDAAyD,CAAC,CAAC;iBAC1F;qBAAM,IAAI,UAAU,EAAE;oBACnB,UAAU,CAAC,GAAG,CAAC,CAAC;iBACnB;qBAAM;oBACH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBACxB;aACJ;iBAAM;gBACH,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,sDAAsD,CAAC,CAAC;aACvF;SACJ;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;SACxE;KACJ;;;;IAED,cAAc;QACV,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;YAC9D,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iCAAiC,CAAC,CAAC;QAC/D,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,GAAG,SAAS,CAAC;;YAEnD,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;QACpD,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,EAAE;YAChC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAAG,KAAK,CAAC;SACpD;;cAEK,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE;QACnD,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,8CAA8C,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;;YAEnH,GAAG,GAAG,EAAE;;QAGZ,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EAAE;YACzE,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,iBAAiB,EAAE;;;sBAE5D,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE;gBAC/D,IAAI,aAAa,EAAE;oBACf,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,iEAAiE,CAAC,CAAC;;oBAE/F,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,sBAAsB,CAAC,4BAA4B,CAAC;oBACxF,OAAO,IAAI,CAAC,8BAA8B,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;iBACpE;qBAAM;oBACH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,4CAA4C,CAAC,CAAC;iBAC7E;aACJ;;;kBAEK,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;;kBACvF,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,aAAa,CAAC;YAExF,IAAI,CAAC,kBAAkB,CAAC,aAAa,GAAG,aAAa,CAAC;YAEtD,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;gBAC/C,GAAG,GAAG,IAAI,CAAC,kBAAkB,CACzB,IAAI,EACJ,cAAc,EACd,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,gBAAgB,EAC/D,KAAK,EACL,KAAK,EACL,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,EAAE,EAC1E,MAAM,CACT,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;aACxE;SACJ;aAAM;YACH,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;gBAC/C,GAAG,GAAG,IAAI,CAAC,kBAAkB,CACzB,KAAK,EACL,EAAE,EACF,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,gBAAgB,EAC/D,KAAK,EACL,KAAK,EACL,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,sBAAsB,IAAI,EAAE,EAC1E,MAAM,CACT,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;aACxE;SACJ;QAED,OAAO,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG;;;QAAC,MAAM,IAAI,EAAC,CAAC,CAAC;KAC7E;;;;;IAED,WAAW,CAAC,KAAU;;cACZ,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB;;cACxD,cAAc,GAAG,WAAW,KAAK,SAAS;QAChD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,EAAE;YAChD,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,EAAE;gBACnF,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;aACvI;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;aAC1F;SACJ;aAAM,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,EAAE;;kBACjD,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB;YAErE,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC;YAElD,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kCAAkC,EAAE;gBACnF,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;aACvI;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC,CAAC;aAC7F;SACJ;KACJ;;;;IAED,wBAAwB;QACpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC7B;;;;IAED,uBAAuB;QACnB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;SAC1C;KACJ;;;;;IAED,sBAAsB,CAAC,cAAuB;QAC1C,IAAI,CAAC,cAAc,EAAE;YACjB,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,EAAE;;gBAE9D,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;aACxB;YAED,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YACzD,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC/B;KACJ;;;;IAED,gBAAgB;QACZ,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAC/C,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;;sBAC9D,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,oBAAoB;;sBACzF,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO;gBACrD,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;aACxE;SACJ;KACJ;;;;;;;IAEO,uBAAuB,CAAC,MAAW,EAAE,OAAgB;QACzD,IAAI,MAAM,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;SACrD;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KACrE;;;;;;IAEO,WAAW,CAAC,QAAa;QAC7B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACjC;;;;;;IAEO,eAAe,CAAC,YAAqB;QACzC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACzC;;;;;;;IAEO,oBAAoB,CAAC,YAAiB,EAAE,QAAa;QACzD,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,KAAK,EAAE,EAAE;YAC5C,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,EAAE,CAAC;SAC5C;QAED,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,uCAAuC,CAAC,CAAC;QACrE,IAAI,CAAC,kBAAkB,CAAC,WAAW,GAAG,YAAY,CAAC;QACnD,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,kBAAkB,CAAC,YAAY,GAAG,IAAI,CAAC;KAC/C;;;;;;;;;;;;IAEO,kBAAkB,CACtB,UAAmB,EACnB,cAAsB,EACtB,YAAoB,EACpB,KAAa,EACb,KAAa,EACb,sBAA8B,EAC9B,MAAe;;cAET,QAAQ,GAAG,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC;;cAC5C,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC;;YAChC,MAAM,GAAG,IAAI,UAAU,CAAC;YACxB,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,IAAI,UAAU,EAAE;SAC5B,CAAC;QACF,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAC3F,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QACrD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QACtG,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACtF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAEvC,IAAI,UAAU,EAAE;YACZ,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;YACzD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;SAC3D;QAED,IAAI,MAAM,EAAE;YACR,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SAC5C;QAED,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,QAAQ,EAAE;YACzD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;SACzF;;cAEK,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC;QAEnF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO;;;;QAAC,GAAG;YACjC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC7D,EAAC,CAAC;QAEH,OAAO,GAAG,gBAAgB,IAAI,MAAM,EAAE,CAAC;KAC1C;;;;;;;IAEO,mBAAmB,CAAC,oBAA4B,EAAE,aAAqB;;cACrE,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC;;cAE1C,0BAA0B,GAAG,QAAQ,CAAC,CAAC,CAAC;;YAE1C,MAAM,GAAG,IAAI,UAAU,CAAC;YACxB,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,IAAI,UAAU,EAAE;SAC5B,CAAC;QACF,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QACpD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,0BAA0B,EAAE,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;QAE5H,OAAO,GAAG,0BAA0B,IAAI,MAAM,EAAE,CAAC;KACpD;;;;;IAEO,cAAc;QAClB,IAAI,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE;YAC/C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAEnG,OAAO,IAAI,CAAC,eAAe;iBACtB,GAAG,CAAU,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,QAAQ,IAAI,EAAE,CAAC;iBAC1E,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;SACzD;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qDAAqD,CAAC,CAAC;SACxF;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAU,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;KAC1G;;;;;;IAEO,yBAAyB,CAAC,KAAqB;;YAC/C,MAAc;QAClB,IAAI,KAAK,YAAY,QAAQ,EAAE;;kBACrB,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE;;kBACzB,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAChC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,MAAM,KAAK,CAAC,UAAU,IAAI,EAAE,IAAI,GAAG,EAAE,CAAC;SACjE;aAAM;YACH,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC7D;QACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACpC,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;KAC7B;;;;;IAEO,kBAAkB;QACtB,IAAI,IAAI,CAAC,yBAAyB,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;YAChG,OAAO;SACV;QACD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QACtC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yCAAyC,CAAC,CAAC;;;;;;cAMjE,yBAAyB;;;QAAG;YAC9B,IAAI,CAAC,aAAa,CAAC,QAAQ,CACvB,+BAA+B;gBAC3B,yBAAyB,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,KAAK,SAAS,MAAM;gBACvF,cAAc,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM;gBACvC,sBAAsB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CACrD,CAAC;YACF,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,KAAK,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACvG,IACI,IAAI,CAAC,sBAAsB,CAAC,cAAc,CACtC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAC/B,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,8BAA8B,CAChF,EACH;oBACE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qEAAqE,CAAC,CAAC;oBAEnG,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,EAAE;wBAC7D,IAAI,CAAC,cAAc,EAAE,CAAC,SAAS;;;wBAC3B;4BACI,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;yBAC1E;;;;wBACD,CAAC,GAAQ;4BACL,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;4BAC7C,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;yBAC1E,EACJ,CAAC;;;wBAGF,OAAO;qBACV;yBAAM;wBACH,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;qBACtC;iBACJ;aACJ;;YAGD,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;SAC1E,CAAA;QAED,IAAI,CAAC,IAAI,CAAC,iBAAiB;;;QAAC;;YAExB,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;SAC3E,EAAC,CAAC;KACN;;;;;;IAEO,uBAAuB,CAAC,CAAc;QAC1C,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;QAEvD,IAAI,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,KAAK,MAAM,EAAE;;kBACnE,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC;;kBACzC,MAAM,GAAG,IAAI,UAAU,CAAC;gBAC1B,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;aAC1B,CAAC;;kBACI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;;kBACzB,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;;kBAC3B,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC;;kBAC3C,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC;YACjC,IAAI,IAAI,IAAI,KAAK,EAAE;gBACf,IAAI,CAAC,8BAA8B,CAAC,IAAI,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;aACnE;YACD,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,EAAE,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;gBACjI,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,kBAAkB,CAAC,SAAS,GAAG,EAAE,CAAC;gBACvC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACpD;SACJ;aAAM;;YAEH,IAAI,CAAC,8BAA8B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SACjD;KACJ;;;YAn+BJ,UAAU;;;;YAtBF,eAAe;YASf,sBAAsB;YAZtB,MAAM;YAeN,wBAAwB;YAExB,uBAAuB;YACvB,uBAAuB;YAFvB,kBAAkB;YAGlB,sBAAsB;YANtB,kBAAkB;YAClB,aAAa;YAfD,MAAM;YADlB,UAAU;YAaV,qBAAqB;YAUrB,gBAAgB;;;;;;;ACvBzB,MAiBa,UAAU;;;;;IACnB,OAAO,OAAO,CAAC,QAAe,EAAE;QAC5B,OAAO;YACH,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE;gBACP,iBAAiB;gBACjB,mBAAmB;gBACnB,sBAAsB;gBACtB,wBAAwB;gBACxB,uBAAuB;gBACvB,uBAAuB;gBACvB,kBAAkB;gBAClB,kBAAkB;gBAClB,aAAa;gBACb,aAAa;gBACb,qBAAqB;gBACrB,eAAe;gBACf,sBAAsB;gBACtB;oBACI,OAAO,EAAE,mBAAmB;oBAC5B,QAAQ,EAAE,KAAK,CAAC,OAAO,IAAI,cAAc;iBAC5C;aACJ;SACJ,CAAC;KACL;;;YAzBJ,QAAQ;;;;;;;;;;;;;;;;;;;;"}
